<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Build a Robot | 九州工業大学 CIR-KIT Blog]]></title>
  <link href="http://cir-kit.github.io/blog/categories/build-a-robot/atom.xml" rel="self"/>
  <link href="http://cir-kit.github.io/"/>
  <updated>2015-02-01T01:24:34+09:00</updated>
  <id>http://cir-kit.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう ! (ロボットにグリッパを取り付ける 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/01/gazebo-attach-gripper-to-robot/"/>
    <updated>2015-02-01T01:24:00+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/01/gazebo-attach-gripper-to-robot</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>01/30/2015 (Fri)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「Attach Gripper to Robot」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<h2>はじめに</h2>

<h4>始める前に参照してください（してない人は）</h4>

<ul>
<li><p><a href="http://cir-kit.github.io/2015/01/31/gazebo-make-a-mobile-robot/">移動ロボットを作る</a></p></li>
<li><p><a href="http://cir-kit.github.io/2015/01/31/gazebo-make-a-simple-gripper">簡単なグリッパを作る</a></p></li>
</ul>


<p>このチュートリアルでは、すでに存在するロボットの部品を組み立てて、新しいロボットを作るにはどうするかについて説明します。例えば、移動ロボットに簡単な腕とグリッパを取り付けると言った具合です。</p>

<h2>ロボットの組み立て</h2>

<p>Gazeboを立ち上げてください。その際に、以前のチュートリアルで製作したロボットを読み込むことができるか確認してください。</p>

<h3>移動台車ベース</h3>

<ol>
<li><p>以前<a href="http://cir-kit.github.io/2015/01/31/gazebo-make-a-mobile-robot/">移動ロボットを作る</a>で以下のような移動ロボット（台車）を作成したはずです。
<img src="/images/2015/02/01/gazebo-attach-gripper-to-robot/Mobile_base.png" alt="Mobile_base" /></p></li>
<li><p>このチュートリアルでは<code>~/.gazebo/models/my_robot/model.sdf</code>を修正し、モデルをより大きくすることでグリッパを搭載します。故に、以下のようにして、<code>model.sdf</code>を修正してゆきましょう。:
<code>bash
gedit ~/.gazebo/models/my_robot/model.sdf
</code>
以下のようにして、モデルを大きくし、タイヤの位置を設定し直します。
<code>xml
&lt;?xml version='1.0'?&gt;
&lt;sdf version='1.4'&gt;
&lt;model name="mobile_base"&gt;
 &lt;link name='chassis'&gt;
   &lt;pose&gt;0 0 .25 0 0 0&lt;/pose&gt;
   &lt;inertial&gt;
     &lt;mass&gt;20.0&lt;/mass&gt;
     &lt;pose&gt;-0.1 0 -0.1 0 0 0&lt;/pose&gt;
     &lt;inertia&gt;
       &lt;ixx&gt;0.5&lt;/ixx&gt;
       &lt;iyy&gt;1.0&lt;/iyy&gt;
       &lt;izz&gt;0.1&lt;/izz&gt;
     &lt;/inertia&gt;
   &lt;/inertial&gt;
   &lt;collision name='collision'&gt;
     &lt;geometry&gt;
       &lt;box&gt;
         &lt;size&gt;2 1 0.3&lt;/size&gt;
       &lt;/box&gt;
     &lt;/geometry&gt;
   &lt;/collision&gt;
   &lt;visual name='visual'&gt;
     &lt;geometry&gt;
       &lt;box&gt;
         &lt;size&gt;2 1 0.3&lt;/size&gt;
       &lt;/box&gt;
     &lt;/geometry&gt;
   &lt;/visual&gt;
   &lt;collision name='caster_collision'&gt;
     &lt;pose&gt;-0.8 0 -0.125 0 0 0&lt;/pose&gt;
     &lt;geometry&gt;
       &lt;sphere&gt;
         &lt;radius&gt;.125&lt;/radius&gt;
       &lt;/sphere&gt;
     &lt;/geometry&gt;
     &lt;surface&gt;
       &lt;friction&gt;
         &lt;ode&gt;
           &lt;mu&gt;0&lt;/mu&gt;
           &lt;mu2&gt;0&lt;/mu2&gt;
         &lt;/ode&gt;
       &lt;/friction&gt;
     &lt;/surface&gt;
   &lt;/collision&gt;
   &lt;visual name='caster_visual'&gt;
     &lt;pose&gt;-0.8 0 -0.125 0 0 0&lt;/pose&gt;
     &lt;geometry&gt;
       &lt;sphere&gt;
         &lt;radius&gt;.125&lt;/radius&gt;
       &lt;/sphere&gt;
     &lt;/geometry&gt;
   &lt;/visual&gt;
 &lt;/link&gt;
 &lt;link name="left_wheel"&gt;
   &lt;pose&gt;0.8 0.6 0.125 0 1.5707 1.5707&lt;/pose&gt;
   &lt;collision name="collision"&gt;
     &lt;geometry&gt;
       &lt;cylinder&gt;
         &lt;radius&gt;.125&lt;/radius&gt;
         &lt;length&gt;.05&lt;/length&gt;
       &lt;/cylinder&gt;
     &lt;/geometry&gt;
   &lt;/collision&gt;
   &lt;visual name="visual"&gt;
     &lt;geometry&gt;
       &lt;cylinder&gt;
         &lt;radius&gt;.125&lt;/radius&gt;
         &lt;length&gt;.05&lt;/length&gt;
       &lt;/cylinder&gt;
     &lt;/geometry&gt;
   &lt;/visual&gt;
 &lt;/link&gt;
 &lt;link name="right_wheel"&gt;
   &lt;pose&gt;0.8 -0.6 0.125 0 1.5707 1.5707&lt;/pose&gt;
   &lt;collision name="collision"&gt;
     &lt;geometry&gt;
       &lt;cylinder&gt;
         &lt;radius&gt;.125&lt;/radius&gt;
         &lt;length&gt;.05&lt;/length&gt;
       &lt;/cylinder&gt;
     &lt;/geometry&gt;
   &lt;/collision&gt;
   &lt;visual name="visual"&gt;
     &lt;geometry&gt;
       &lt;cylinder&gt;
         &lt;radius&gt;.125&lt;/radius&gt;
         &lt;length&gt;.05&lt;/length&gt;
       &lt;/cylinder&gt;
     &lt;/geometry&gt;
   &lt;/visual&gt;
 &lt;/link&gt;
 &lt;joint type="revolute" name="left_wheel_hinge"&gt;
   &lt;pose&gt;0 0 -0.03 0 0 0&lt;/pose&gt;
   &lt;child&gt;left_wheel&lt;/child&gt;
   &lt;parent&gt;chassis&lt;/parent&gt;
   &lt;axis&gt;
     &lt;xyz&gt;0 1 0&lt;/xyz&gt;
   &lt;/axis&gt;
 &lt;/joint&gt;
 &lt;joint type="revolute" name="right_wheel_hinge"&gt;
   &lt;pose&gt;0 0 0.03 0 0 0&lt;/pose&gt;
   &lt;child&gt;right_wheel&lt;/child&gt;
   &lt;parent&gt;chassis&lt;/parent&gt;
   &lt;axis&gt;
     &lt;xyz&gt;0 1 0&lt;/xyz&gt;
   &lt;/axis&gt;
 &lt;/joint&gt;
&lt;/model&gt;
&lt;/sdf&gt;
</code>
すると以下の様になっているはずです。
<a href="/images/2015/02/01/gazebo-attach-gripper-to-robot/Mobile_base_large.png">Mobile_base_large</a></p></li>
</ol>


<h2>ロボットを組み立てる</h2>

<ol>
<li><p>簡単なグリッパを取り付けたロボットを作成するために、新しいモデルディレクトリを作成しましょう。
<code>bash
 mkdir ~/.gazebo/models/simple_mobile_manipulator
</code>
そしてモデルのConfigファイル<code>model.config</code>を編集しましょう。
<code>bash
 gedit ~/.gazebo/models/simple_mobile_manipulator/model.config
</code>
作成する<code>model.config</code>の内容は以下のようにしましょう。
<code>xml
 &lt;?xml version="1.0"?&gt;
 &lt;model&gt;
   &lt;name&gt;Simple Mobile Manipulator&lt;/name&gt;
   &lt;version&gt;1.0&lt;/version&gt;
   &lt;sdf version='1.4'&gt;manipulator.sdf&lt;/sdf&gt;
   &lt;author&gt;
     &lt;name&gt;My Name&lt;/name&gt;
     &lt;email&gt;me@my.email&lt;/email&gt;
   &lt;/author&gt;
   &lt;description&gt;
     My simple mobile manipulator
   &lt;/description&gt;
 &lt;/model&gt;
</code></p></li>
<li><p>続いて、モデルのSDFファイル<code>manipulator.sdf</code>を作成しましょう。:
<code>bash
gedit ~/.gazebo/models/simple_mobile_manipulator/manipulator.sdf
</code>
作成する<code>manipulator.sdf</code>の内容は以下のようにしましょう。
<code>xml
&lt;?xml version="1.0" ?&gt;
&lt;sdf version="1.3"&gt;
&lt;model name="simple_mobile_manipulator"&gt;
 &lt;include&gt;
   &lt;uri&gt;model://my_gripper&lt;/uri&gt;
   &lt;pose&gt;1.3 0 0.1 0 0 0&lt;/pose&gt;
 &lt;/include&gt;
 &lt;include&gt;
   &lt;uri&gt;model://my_robot&lt;/uri&gt;
   &lt;pose&gt;0 0 0 0 0 0&lt;/pose&gt;
 &lt;/include&gt;
 &lt;joint name="arm_gripper_joint" type="revolute"&gt;
   &lt;parent&gt;mobile_base::chassis&lt;/parent&gt;
   &lt;child&gt;simple_gripper::riser&lt;/child&gt;
   &lt;axis&gt;
     &lt;limit&gt;
       &lt;lower&gt;0&lt;/lower&gt;
       &lt;upper&gt;0&lt;/upper&gt;
     &lt;/limit&gt;
     &lt;xyz&gt;0 0 1&lt;/xyz&gt;
   &lt;/axis&gt;
 &lt;/joint&gt;
 &lt;!-- attach sensor to the gripper --&gt;
 &lt;include&gt;
   &lt;uri&gt;model://hokuyo&lt;/uri&gt;
   &lt;pose&gt;1.3 0 0.3 0 0 0&lt;/pose&gt;
 &lt;/include&gt;
 &lt;joint name="hokuyo_joint" type="revolute"&gt;
   &lt;child&gt;hokuyo::link&lt;/child&gt;
   &lt;parent&gt;simple_gripper::palm&lt;/parent&gt;
   &lt;axis&gt;
     &lt;xyz&gt;0 0 1&lt;/xyz&gt;
     &lt;limit&gt;
       &lt;upper&gt;0&lt;/upper&gt;
       &lt;lower&gt;0&lt;/lower&gt;
     &lt;/limit&gt;
   &lt;/axis&gt;
 &lt;/joint&gt;
&lt;/model&gt;
&lt;/sdf&gt;
</code></p></li>
<li><p>編集した<code>model.config</code>と<code>manipulator.sdf</code>をセーブしたら、Gazeboを立ち上げ、<strong>Insert</strong>タブより<strong>Simple Mobile Manipulator</strong>モデルを選択して、作成したモデルをシミュレータに表示してください。すると、以下のようになっているはずです。
<img src="/images/2015-02-01-gazebo-attach-gripper-to-robot/Simple_mobile_manipulator.png" alt="Simple_mobile_manipulator" /></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう ! (簡単なグリッパーを作る 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/01/31/gazebo-make-a-simple-gripper/"/>
    <updated>2015-01-31T22:35:00+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/01/31/gazebo-make-a-simple-gripper</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>01/30/2015 (Fri)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「Make a simple gripper」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<h2>はじめに</h2>

<p>このチュートリアルでは，２つの棒を使ったピンチンググリッパーの作り方を説明します。</p>

<h2>モデルディレクトリを作る</h2>

<p>このチュートリアルを始めるために、<a href="http://gazebosim.org/user_guide/started__models__database.html">モデルデータベースドキュメント</a>と<a href="http://sdformat.org/spec">SDF</a>のレファレンスをご覧ください。</p>

<h2>モデルを作る</h2>

<ol>
<li><p><code>world</code> ファイルのためのディレクトリを作成しましょう。
<code>bash
 mkdir ~/simple_gripper_tutorial
 cd ~/simple_gripper_tutorial
</code></p></li>
<li><p>まずはシンプルな空の<code>world</code>から始めます。<code>world</code>ファイルを作成しましょう。
<code>bash
 gedit ~/simple_gripper_tutorial/gripper.world
</code>
以下のSDFファイル<a href="http://bitbucket.org/osrf/gazebo_tutorials/raw/default/simple_gripper/files/box.sdf">gripper.world</a>をコピペしてください。
<code>xml
 &lt;?xml version="1.0"?&gt;
   &lt;sdf version="1.4"&gt;
     &lt;world name="default"&gt;
     &lt;!-- A ground plane --&gt;
     &lt;include&gt;
       &lt;uri&gt;model://ground_plane&lt;/uri&gt;
     &lt;/include&gt;
     &lt;!-- A global light source --&gt;
     &lt;include&gt;
       &lt;uri&gt;model://sun&lt;/uri&gt;
     &lt;/include&gt;
     &lt;include&gt;
       &lt;uri&gt;model://my_gripper&lt;/uri&gt;
     &lt;/include&gt;
     &lt;/world&gt;
   &lt;/sdf&gt;
</code></p></li>
<li><p><code>~/.gazebo</code> ディレクトリの中に，<code>model</code> ディレクトリを作成してください。作成したディレクトリには、これから作成するモデルを置いてゆきます。:
<code>bash
 mkdir -p ~/.gazebo/models/my_gripper
</code></p></li>
<li><p>作成するグリッパの基本的な構造を作りましょう。その最も簡単な方法は静的モデルを作り、リンクを一つ追加することです。静的モデルとは、シミュレーションがスタートしてもリンクが動かないということを意味します。これにより、シミュレータをスタートさせ、ジョイントを追加する前に、モデルを見ながら、リンクの位置を調べることができます。</p></li>
<li><p>以下のように、<a href="http://bitbucket.org/osrf/gazebo_tutorials/raw/default/simple_gripper/files/model.config">model.config</a>を作成しましょう。
<code>xml
 &lt;?xml version="1.0"?&gt;
 &lt;model&gt;
   &lt;name&gt;My Gripper&lt;/name&gt;
   &lt;version&gt;1.0&lt;/version&gt;
   &lt;sdf version='1.4'&gt;simple_gripper.sdf&lt;/sdf&gt;
   &lt;author&gt;
     &lt;name&gt;My Name&lt;/name&gt;
     &lt;email&gt;me@my.email&lt;/email&gt;
   &lt;/author&gt;
   &lt;description&gt;
     My awesome robot.
   &lt;/description&gt;
 &lt;/model&gt;
</code></p></li>
<li><p>以下の<a href="http://bitbucket.org/osrf/gazebo_tutorials/raw/default/simple_gripper/files/simple_gripper.sdf">simple_gripper.sdf</a>ファイルをコピペしてください。
<code>xml
&lt;?xml version="1.0"?&gt;
&lt;sdf version="1.4"&gt;
 &lt;model name="simple_gripper"&gt;
     &lt;link name="riser"&gt;
         &lt;pose&gt;-0.15 0.0 0.5 0 0 0&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;pose&gt;0 0 -0.5 0 0 0&lt;/pose&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;10.0&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.2 0.2 1.0&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.2 0.2 1.0&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Purple&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;link name="palm"&gt;
         &lt;pose&gt;0.0 0.0 0.05 0 0 0&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;0.5&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Red&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;link name="left_finger"&gt;
         &lt;pose&gt;0.1 0.2 0.05 0 0 -0.78539&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;0.1&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.3 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.3 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Blue&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;link name="left_finger_tip"&gt;
         &lt;pose&gt;0.336 0.3 0.05 0 0 1.5707&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;0.1&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Blue&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;link name="right_finger"&gt;
         &lt;pose&gt;0.1 -0.2 0.05 0 0 .78539&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;0.1&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.3 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.3 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Green&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;link name="right_finger_tip"&gt;
         &lt;pose&gt;0.336 -0.3 0.05 0 0 1.5707&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;0.1&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Green&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;static&gt;true&lt;/static&gt;
 &lt;/model&gt;
&lt;/sdf&gt;
</code></p></li>
<li><p>ここまでで、何が作成できたのかを見るために、<code>world</code>ファイルを実行しましょう。
<code>bash
gazebo ~/simple_gripper_tutorial/gripper.world
</code>
すると、以下のようになっているはずです。
<img src="/images/2015-01-31-gazebo-make-a-simple-gripper/Simple-gripper-1.png" alt="Simple-gripper-1" /></p></li>
<li><p>一度でもリンクを作成できたら安心です。<code>simple_gripper.sdf</code>ファイルの中の<code>&lt;/model&gt;</code>と書いてある前に、以下のコードを追加することで、ジョイントを追加することができます。
<code>bash
 gedit ~/.gazebo/models/my_gripper/simple_gripper.sdf
</code>
<code>xml
         &lt;joint name="palm_left_finger" type="revolute"&gt;
             &lt;pose&gt;0 -0.15 0 0 0 0&lt;/pose&gt;
             &lt;child&gt;left_finger&lt;/child&gt;
             &lt;parent&gt;palm&lt;/parent&gt;
             &lt;axis&gt;
                 &lt;limit&gt;
                     &lt;lower&gt;-0.4&lt;/lower&gt;
                     &lt;upper&gt;0.4&lt;/upper&gt;
                 &lt;/limit&gt;
                 &lt;xyz&gt;0 0 1&lt;/xyz&gt;
             &lt;/axis&gt;
         &lt;/joint&gt;
         &lt;joint name="left_finger_tip" type="revolute"&gt;
             &lt;pose&gt;0 0.1 0 0 0 0&lt;/pose&gt;
             &lt;child&gt;left_finger_tip&lt;/child&gt;
             &lt;parent&gt;left_finger&lt;/parent&gt;
             &lt;axis&gt;
                 &lt;limit&gt;
                     &lt;lower&gt;-0.4&lt;/lower&gt;
                     &lt;upper&gt;0.4&lt;/upper&gt;
                 &lt;/limit&gt;
                 &lt;xyz&gt;0 0 1&lt;/xyz&gt;
             &lt;/axis&gt;
         &lt;/joint&gt;
         &lt;joint name="palm_right_finger" type="revolute"&gt;
             &lt;pose&gt;0 0.15 0 0 0 0&lt;/pose&gt;
             &lt;child&gt;right_finger&lt;/child&gt;
             &lt;parent&gt;palm&lt;/parent&gt;
             &lt;axis&gt;
                 &lt;limit&gt;
                     &lt;lower&gt;-0.4&lt;/lower&gt;
                     &lt;upper&gt;0.4&lt;/upper&gt;
                 &lt;/limit&gt;
                 &lt;xyz&gt;0 0 1&lt;/xyz&gt;
             &lt;/axis&gt;
         &lt;/joint&gt;
         &lt;joint name="right_finger_tip" type="revolute"&gt;
             &lt;pose&gt;0 0.1 0 0 0 0&lt;/pose&gt;
             &lt;child&gt;right_finger_tip&lt;/child&gt;
             &lt;parent&gt;right_finger&lt;/parent&gt;
             &lt;axis&gt;
                 &lt;limit&gt;
                     &lt;lower&gt;-0.4&lt;/lower&gt;
                     &lt;upper&gt;0.4&lt;/upper&gt;
                 &lt;/limit&gt;
                 &lt;xyz&gt;0 0 1&lt;/xyz&gt;
             &lt;/axis&gt;
         &lt;/joint&gt;
         &lt;joint name="palm_riser" type="prismatic"&gt;
             &lt;child&gt;palm&lt;/child&gt;
             &lt;parent&gt;riser&lt;/parent&gt;
             &lt;axis&gt;
                 &lt;limit&gt;
                     &lt;lower&gt;0&lt;/lower&gt;
                     &lt;upper&gt;0.9&lt;/upper&gt;
                 &lt;/limit&gt;
                 &lt;xyz&gt;0 0 1&lt;/xyz&gt;
             &lt;/axis&gt;
         &lt;/joint&gt;
</code>
また、モデルを<code>non-static</code>にしましょう。：
<code>xml
         ...
         &lt;static&gt;false&lt;/static&gt;
         ...
</code></p></li>
<li><p>Gazeboをもう一度立ち上げましょう。
<code>bash
 gazebo ~/simple_gripper_tutorial/gripper.world
</code></p></li>
<li><p>モデルの上で右クリックをし、<strong>&ldquo;View->Joints&rdquo;</strong>というのを選択しましょう。新たに作成したジョイントが表示されます。
<img src="/images/2015-01-31-gazebo-make-a-simple-gripper/Simple-gripper-joints.png" alt="Simple-gripper-joints" /></p></li>
<li><p>ジョイントコントロールウィジェットを使えば、それぞれのジョイントの力をコントロールすることができます。グリッパーモデルをクリックしてください。次に、GUIの右端にある直立したハンドル(白いポチが３つ付いているところ)を左にドラックしてください。するとウィジェットが表示されます。ウィジェットでは、それぞれのジョイントのリストとそのスライダーを表示しています。<strong>Force</strong>タブを選択し、スライダーを使ってそれぞれのジョイントに力を適用し、グリッパが動くことを確認してください。例えば、<code>palm_riser</code>の値を<code>10[N]</code>にセットすると、以下のようになるはずです。:
<img src="/images/2015-01-31-gazebo-make-a-simple-gripper/Simple_gripper_joint_control_1_4.png" alt="Simple_gripper_joint_control_1_4" /></p></li>
<li><p>オプション</p></li>
<li><p>小さい箱もしくは円柱をシミュレータに追加し、グリッパーのところに置いてください。</p></li>
<li><p>GUIインターフェースを使って物体を持ち上げてみましょう。</p>

<p><strong>コツ : </strong>物体への慣性力をなるべく少なくするとうまく行くでしょう。</p></li>
</ol>


<h4>Next >> <a href="http://cir-kit.github.io/blog/2015/02/01/gazebo-attach-gripper-to-robot/:">グリッパをロボットに取り付ける</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう ! (ロボットにセンサを取り付ける 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/01/31/gazebo-add-a-sensor-to-a-robot/"/>
    <updated>2015-01-31T22:12:43+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/01/31/gazebo-add-a-sensor-to-a-robot</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>01/25/2015 (Sun)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「Add a Sensor to a Robot」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<h2>はじめに</h2>

<p>このチュートリアルでは、他の複雑なモデルで構成されたコンポーネントに接続し、タグを使用することによって、Gazeboのモデルデータベースにあるモデルを直接使用した複雑なモデルを作るやり方を説明します。</p>

<h2>レーザーを取り付ける</h2>

<p>ロボットなどにレーザーを取り付けるには、モデルにセンサを含む物体を取り付けるだけです。</p>

<ol>
<li><p>前のチュートリアルで、すでに<code>model</code>ディレクトリにいるはずです。:
<code>bash
 cd ~/.gazebo/models/my_robot
</code></p></li>
<li><p>好きなエディタで<code>model.sdf</code>を開いてください。</p></li>
<li><p>ファイルの最後の方にある<code>&lt;/model&gt;</code>タグの前に、以下の要素を追加してください。
<code>xml
     &lt;include&gt;
       &lt;uri&gt;model://hokuyo&lt;/uri&gt;
       &lt;pose&gt;0.2 0 0.2 0 0 0&lt;/pose&gt;
     &lt;/include&gt;
     &lt;joint name="hokuyo_joint" type="revolute"&gt;
       &lt;child&gt;hokuyo::link&lt;/child&gt;
       &lt;parent&gt;chassis&lt;/parent&gt;
       &lt;axis&gt;
         &lt;xyz&gt;0 0 1&lt;/xyz&gt;
         &lt;limit&gt;
           &lt;upper&gt;0&lt;/upper&gt;
           &lt;lower&gt;0&lt;/lower&gt;
         &lt;/limit&gt;
       &lt;/axis&gt;
     &lt;/joint&gt;
</code>
上記のような<code>&lt;include&gt;</code>ブロックでは、Gazeboにモデルを探させ、<code>&lt;pose&gt;</code>で親モデルとの関係を挿入します。今回は、ロボットの前方上方に<code>hokuyo（北陽）</code>のレーザーモデルを追加します。<code>&lt;uri&gt;</code>ブロックでは、モデルデータベースのどこを探せばいいのかGazeboに知らせます。(チュートリアルで使用するモデルデータのuriリストを<a href="http://gazebosim.org/models/">ここ</a>に示します。これは、<a href="https://bitbucket.org/osrf/gazebo_models">mercurial repository</a>と同じです。)<br/>
新しい<code>&lt;joint&gt;</code>は、台車ロボットと<code>hokuyo</code>レーザーをつなげます。<code>&lt;joint&gt;</code>には<code>&lt;upper&gt;</code>と<code>&lt;lower&gt;</code>があり、勝手に動かないように0に設定されています。<br/>
また、<code>&lt;joint&gt;</code>の中にある<code>&lt;child&gt;</code>というのは、以下のソースから始まる<a href="https://bitbucket.org/osrf/gazebo_models/src/6cd587c0a30e/hokuyo/model.sdf?at=default">hokuyo model&rsquo;s SDF</a>から提供されています。
<code>xml
     &lt;?xml version="1.0" ?&gt;
     &lt;sdf version="1.4"&gt;
       &lt;model name="hokuyo"&gt;
         &lt;link name="link"&gt;
</code>
さて、<code>hokuyo</code>モデルが代入できたら、<code>hokuyo</code>のリンクにはそれぞれのモデル名と共に名前空間が生成されます。今回は、モデル名は<code>hokuyo</code>です。なので、<code>hokuyo</code>モデルのリンクはそれぞれ<code>hokuyo::</code>で始まる名前空間で表現されます。</p></li>
<li><p>以下のコマンドで、<code>~/.gazebo/models/</code>の下に<code>hokuyo</code>モデルを追加してください。尚、ダウンロードする<code>hokuyo</code>モデルは、 <a href="https://bitbucket.org/osrf/gazebo_models/src/6cd587c0a30e/hokuyo/?at=default">gazebo_models/hokuyo</a>にあります。
<code>bash
 cd ~/.gazebo/models/
 hg clone https://bitbucket.org/osrf/gazebo_models
</code>
今回は、<code>hokuyo</code>モデルを<code>~/gazebo/models/</code>に追加しました。なので、<code>model.sdf</code>の<code>&lt;include&gt;</code>ブロックにある<code>&lt;uri&gt;</code>の内容を以下の様にしました。
<code>xml
&lt;uri&gt;model://hokuyo&lt;/uri&gt;
</code>
もし、他のディレクトリに置きたい場合には、<code>~/.gazebo/models/</code>ディレクトリからの相対パスを記す必要があります。例えば、<code>~/.gazebo/models/gazebo_models/hokuyo/</code>に<code>hokuyo</code>モデルの本体を配置したのであれば、<code>&lt;include&gt;</code>フロックの<code>&lt;uri&gt;</code>は以下のように記述します。
<code>xml
&lt;uri&gt;model://gazebo_models/hokuyo&lt;/uri&gt;
</code></p></li>
<li><p>では、Gazeboを起動してGUIに表示される<strong>Insert</strong>という項目を利用してシミュレーションにロボットを追加しましょう。すると、下図のようにロボットにレーザーが付いていると思います。
<img src="/images/2015-01-31-gazebo-add-a-sensor-to-a-robot/Add_laser_pioneer.png" alt="Add_laser_pioneer" /></p></li>
<li><p>(オプション)ロボットにカメラを取り付けてみましょう。カメラモデルのURIは<code>model://camera</code>です。このURIは以下のフォルダに収められています。
<code>bash
 ls ~/.gazebo/models/camera/
</code>
SDFについてのレファレンスは<a href="http://gazebosim.org/sdf/">ここ</a>にあります。</p></li>
</ol>


<h4>Next >> <a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-make-a-simple-gripper/">簡単なグリッパをつくる</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう ! (メッシュをつける 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/01/31/gazebo-attach-meshes/"/>
    <updated>2015-01-31T20:50:08+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/01/31/gazebo-attach-meshes</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>01/25/2015 (Sun)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「Attach Meshes」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<h2>はじめに</h2>

<p>メッシュをモデルに追加すると、外観だけでなく、センサにとってもよりリアルなシミュレーションができます。このチュートリアルでは、カスタムメッシュの定義と、シミュレーションではそれがどのように見えるかを説明します。</p>

<h2>メッシュを外観要素として追加する</h2>

<p>メッシュを使う主な例は見た目のリアルさを高めるためです。</p>

<ol>
<li>まずは、<code>my_robot</code>ディレクトリまで移動しましょう。
<code>bash
 cd ~/.gazebo/models/my_robot
</code></li>
<li><code>model.sdf</code>ファイルを好きなエディタで開きましょう。(ここでは<a href="https://wiki.gnome.org/Apps/Gedit">gedit</a>を使用します。)
<code>bash
 gedit ~/.gazebo/models/my_robot/model.sdf
</code></li>
<li><p>台車の見た目にメッシュを取り付けます。以下のようなビジュアルについての定義を探してください。:
<code>xml
     &lt;visual name='visual'&gt;
       &lt;geometry&gt;
         &lt;box&gt;
           &lt;size&gt;.4 .2 .1&lt;/size&gt;
         &lt;/box&gt;
       &lt;/geometry&gt;
     &lt;/visual&gt;
</code></p></li>
<li><p>メッシュはパソコン上のファイルもしくは他のモデルから引用することができます。今回は、<strong>pioneer2dx</strong>のメッシュを使用します。以下のようにして、メッシュを変更してください。(ただし、残りはそのままにして編集してください。)
<code>xml
     &lt;visual name='visual'&gt;
       &lt;geometry&gt;
         &lt;mesh&gt;
           &lt;uri&gt;model://pioneer2dx/meshes/chassis.dae&lt;/uri&gt;
         &lt;/mesh&gt;
       &lt;/geometry&gt;
     &lt;/visual&gt;
</code></p></li>
<li><p>上記の<code>&lt;mesh&gt;</code>によって定義された<strong>pioneer2dx</strong>のモデルがあるなら、ローカルの台車モデルを見るために以下のコマンドで確認しましょう。:
<code>bash
 ls -l ~/.gazebo/models/pioneer2dx/meshes/chassis.dae
</code>
もし、meshファイルが存在しないなら、Gazeboの中(<strong>Insert</strong>タブの下-><a href="http://gazebosim.org/models">http://gazebosim.org/models</a>) で少なくとも一回、<strong>Pioneer 2DX</strong>をスポーンさせて、モデルデータベースからGazeboにモデルを引っ張ってこさせましょう。<br/>
もしくは、ローカルフォルダに直接ダウンロードしましょう。
<code>bash
 cd ~/.gazebo/models
 wget -R *index.html*,*.tar.gz --cut-dirs=1 --no-parent -r -x -nH http://gazebosim.org/models/pioneer2dx/
</code></p></li>
<li><p>Gazeboで、<code>My_Robot</code>モデルをドラッグしましょう。すると、さっきまでの台車が下図のように<code>pioneer2sx</code>の様な見た目になります。</p></li>
</ol>


<p><img src="/images/2015-01-31-gazebo-attach-meshes/Mobile_robot_chassis_1.png" alt="Mobile_robot_chassis_1" /></p>

<ul>
<li><p>台車は、私達のロボットにほ明らかに大きすぎるので、見た目の大きさを作りなおす必要があります。</p></li>
<li><p>見た目の大きさを変更する必要があります。以下のように<code>model.sdf</code>を編集しましょう。</p></li>
</ul>


<p>  <strong>コピーはしないでください。手書きで追加していくことが、今回のチュートリアルです。</strong>
  <code>xml
        &lt;visual name='visual'&gt;
          &lt;geometry&gt;
            &lt;mesh&gt;
              &lt;uri&gt;model://pioneer2dx/meshes/chassis.dae&lt;/uri&gt;
              &lt;scale&gt;0.9 0.5 0.5&lt;/scale&gt;
            &lt;/mesh&gt;
          &lt;/geometry&gt;
        &lt;/visual&gt;
 </code>
  すると、以下の様になります。</p>

<p><img src="/images/2015-01-31-gazebo-attach-meshes/Mobile_robot_chassis_2.png" alt="Mobile_robot_chassis_2" /></p>

<ul>
<li>今度は、小さくなりすぎました。(z軸方向に)見た目を改善するために、少し上に上げてるよう、以下のようにして<code>pose</code>を変更しましょう。<br/>
<strong>コピーはしないでください。手書きで追加していくことが、今回のチュートリアルです。</strong>
<code>xml
&lt;visual name='visual'&gt;
  &lt;pose&gt;0 0 0.05 0 0 0&lt;/pose&gt;
  &lt;geometry&gt;
    &lt;mesh&gt;
      &lt;uri&gt;model://pioneer2dx/meshes/chassis.dae&lt;/uri&gt;
      &lt;scale&gt;0.9 0.5 0.5&lt;/scale&gt;
    &lt;/mesh&gt;
  &lt;/geometry&gt;
&lt;/visual&gt;
</code>
すると、以下のようになります。</li>
</ul>


<p>  <img src="/images/2015-01-31-gazebo-attach-meshes/Mobile_robot_chassis_3.png" alt="Mobile_robot_chassis_3" /></p>

<p>  ここまでで、ロボットの<code>&lt;visual&gt;</code>要素をシンプルに変更しました。なので、GUIや、カメラ、深度カメラ、GPUレーザーの様なセンサに基づくGPUやGUIが<code>Pioneer 2DX</code>のようになっているはずです。また、私達は、<code>&lt;collision&gt;</code>要素も変更していませんし、外観の幾何学形状は、衝突ダイナミクスエンジンや距離センサなどに使われます。</p>

<h2>もっとよく知る</h2>

<p>新しいロボットを作るとき、自分のオリジナルのメッシュを追加痛くなるでしょう。<a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-import-meshes/">メッシュをインポートする</a>というチュートリアルでは、Gazeboに最適なフォーマットでメッシュをインポートする方法について取り上げています。</p>

<h2>試してみる</h2>

<ol>
<li><p><a href="http://sketchup.google.com/3dwarehouse/">3D Warehouse</a>からメッシュをダウンロードしてください。ただし、メッシュデータは<strong>Collada(.dae)</strong>フォーマットにすることに注意してください。</p></li>
<li><p>メッシュを<code>~/.gazebo/models/my_robot/meshes</code>に配置してください。もし<code>mesh</code>ディレクトリが存在しないなら、作成して、その下にメッシュを配置してください。</p></li>
<li><p>台車を置き換えるか、追加するなどして、ロボットにメッシュを使ってみてください。</p></li>
<li><p><strong>注意 : </strong>マテリアル（.pngや.jpgの様な拡張子を持つテクスチャファイル）は<code>~/.gazebo/models/my_robot/materials/textures</code>に配置する必要があります。</p></li>
</ol>


<h4>Next >> <a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-add-a-sensor-to-a-robot/">ロボットにセンサを取り付ける</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう ! (メッシュをインポートする 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/01/31/gazebo-import-meshes/"/>
    <updated>2015-01-31T19:55:25+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/01/31/gazebo-import-meshes</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>01/31/2015 (Sat)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「Import Meshes」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<h2>はじめに</h2>

<p>このチュートリアルでは、Gazeboへの3Dメッシュのインポートの仕方を説明します。</p>

<h2>メッシュを用意する</h2>

<p>Gazeboでは、+Zが上(垂直)、+Xが前(スクリーンの奥に向かう方向)、+Yが左となるような右手系の座標系を使用します。</p>

<h4>複雑さを減らす</h4>

<p>多くのメッシュはとても複雑になります。大量の三角形で構成されるメッシュはその数を減らすか、効率を良くするために、複数のメッシュに分割する必要があります。メッシュを減らす、もしくはメッシュを分割するということについての情報をあなたの3Dメッシュエディタのドキュメントで確認してみてください。</p>

<h4>メッシュを作る</h4>

<p>最初のステップはメッシュを(0,0,0)に設置し、前方（他の部位でも良い）をX軸にそうように設置します。</p>

<h4>メッシュを計測する</h4>

<p>Gazeboではメートル法を使用しています。多くのメッシュ（特に3D warehouseで作成したもの）では英語圏の単位系（インチとか）を使用しています。お気に入りの3Dエディタをメートル法でのものとして作成してください。</p>

<h2>メッシュをエクスポートする</h2>

<p>メッシュを詳細に作成したなら、<strong>Collada</strong>ファイルとしてエクスポートしましょう。このフォーマットにはすべての3D情報と材質情報が入っています。</p>

<h2>メッシュを試す</h2>

<p>メッシュを試す最も簡単な方法は<a href="http://bitbucket.org/osrf/gazebo_tutorials/raw/default/import_mesh/files/my_mesh.world">my_mesh.world</a>のようなメッシュをロードする、簡単な<code>world</code>ファイルを作成することです。以下に示す<code>my_mesh.dae</code>の部分は自分の好きなメッシュファイルの名前に置き換えてください。
<code>xml
&lt;?xml version="1.0"?&gt;
&lt;sdf version="1.4"&gt;
  &lt;world name="default"&gt;
    &lt;include&gt;
      &lt;uri&gt;model://ground_plane&lt;/uri&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://sun&lt;/uri&gt;
    &lt;/include&gt;
    &lt;model name="my_mesh"&gt;
      &lt;pose&gt;0 0 0  0 0 0&lt;/pose&gt;
      &lt;static&gt;true&lt;/static&gt;
      &lt;link name="body"&gt;
        &lt;visual name="visual"&gt;
          &lt;geometry&gt;
            &lt;mesh&gt;&lt;uri&gt;file://my_mesh.dae&lt;/uri&gt;&lt;/mesh&gt;
          &lt;/geometry&gt;
        &lt;/visual&gt;
      &lt;/link&gt;
    &lt;/model&gt;
  &lt;/world&gt;
&lt;/sdf&gt;
</code>
後は、Gazeboを立ち上げるだけです。先ほど作成した<code>my_mesh.world</code>のあるディレクトリで以下のように実行しましょう。
<code>bash
gazebo my_mesh.world
</code></p>

<h2>メッシュをテストする</h2>

<p><a href="https://web.archive.org/web/20120513213905/http://www.c3dl.org/wp-content/2.0Release/Resources/duck.dae">duck.dae</a>と<a href="https://web.archive.org/web/20120513213905/http://www.c3dl.org/wp-content/2.0Release/Resources/duck.png">duck.png</a>を利用することができます。先ほど作成した<code>world</code>ファイルと同じディレクトリに２つのファイルを置いてください。duckのメッシュはY軸を上として定義してあるので、sdfファイルに回転を設置します。なので、モデルは、画面の上をモデルの右として表示しています。：
<code>xml
&lt;visual name="visual"&gt;
  &lt;pose&gt;0 0 0 1.5708 0 0&lt;/pose&gt;
  &lt;geometry&gt;
    &lt;mesh&gt;&lt;uri&gt;file://duck.dae&lt;/uri&gt;&lt;/mesh&gt;
  &lt;/geometry&gt;
&lt;/visual&gt;
</code>
実行すると、以下のように見えるはずです。ちなみに、<code>&lt;uri&gt;</code>に示されているディレクトリは、読み込んだ<code>world</code>ファイルのあるディレクトリからの相対ディレクトリです。
<img src="/images/2015-01-31-gazebo-import-meshes/TutorialMeshDuck.png" alt="TutorialMeshDuck" /></p>
]]></content>
  </entry>
  
</feed>
