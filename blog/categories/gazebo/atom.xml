<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gazebo | 九州工業大学 CIR-KIT Blog]]></title>
  <link href="http://cir-kit.github.io/blog/categories/gazebo/atom.xml" rel="self"/>
  <link href="http://cir-kit.github.io/"/>
  <updated>2015-02-13T05:10:24+09:00</updated>
  <id>http://cir-kit.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[環境をつくろう ! (Digital Elevation Models 編) No.3.3]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/03/gazebo-digital-elevation-models/"/>
    <updated>2015-02-03T19:58:17+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/03/gazebo-digital-elevation-models</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/03/2015 (Tue)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第三弾「Build a World」。
このチュートリアルでは、シミュレーション中の環境をどのように構築するかについて説明します。<br/>
今回はその「Digital Elevation Models」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>ADVANCED</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_world">GAZEBO Tutorial-Build a World</a></p>

<h2>はじめに</h2>

<p><strong>Digital Elevation Model (DEM)</strong>は3Dの植物や建物のような物体を含まないような地形です。DEMはLIDARやradar、カメラなどによるセンサフュージョンによって生成されます。グラウンドポジションの地形の標高は、定期的に水平間隔でサンプリングされています。<a href="http://en.wikipedia.org/wiki/Digital_elevation_model">Wikipedia</a>でDEMのより詳しい情報があります。<br/>
DEMという言葉は一般的な名称であり、至って普通のフォーマットです。実際、DEMは代表的なグリッド立体図（水平捜線）や、ベクトルベースの基板地図変換である<strong>vector-based triangular irregular network (TIN)</strong>なのです。現在Gazeboは<a href="http://www.gdal.org/">GDAL</a>ライブラリでサポートされているraster(水平捜線)データのみをサポートしています。<br/>
GazeboをDEMをサポートする主な動機付けは、リアルな地形をシミュレートできるようにしたいというものです。ロボットを現実の世界のと同じ地形でシミュレーションし、その動向をテストし、救助用または農業用への応用を図ることは興味深いものとなるでしょう。</p>

<h2>GazeboにDEMサポートを適用する</h2>

<p>DEMファイルをサポートするには、GDALライブラリをインストールする必要があります。</p>

<h5>Ubuntu Trusty/Utopic の場合:</h5>

<pre><code class="bash">  sudo apt-get install gdal-bin libgdal-dev libgdal1h python-gdal
</code></pre>

<h5>Ubuntu Precise の場合:</h5>

<pre><code class="bash">  sudo apt-get install gdal-bin libgdal1-1.7.0 libgdal1-dev python-gdal
</code></pre>

<h2>DEMファイルとSDFフォーマットでの定義</h2>

<p>立体データを提供する団体はいくつかあります。例えば、80年代の<a href="http://extract.cr.usgs.gov/public/NED/mtsthelens_before.zip">噴火前</a>か<a href="http://extract.cr.usgs.gov/public/NED/mtsthelens_after.zip">噴火後</a>のセント・ヘレンズ山のDEMフォーマットファイルをダウンロードしましょう。ダウンロードしたら、Unzipで解凍し、<code>mtsthelens.dem</code>という名前をつけましょう。
<code>bash
  cd ~/Downloads
  wget http://extract.cr.usgs.gov/public/NED/mtsthelens_before.zip
  unzip ~/Downloads/mtsthelens_before.zip -d /tmp
  mv /tmp/30.1.1.1282760.dem /tmp/mtsthelens.dem
</code>
通常、DEMファイルにはたくさんの取り決めがあるので、Gazeboでは扱えません。なので、DEMの取り決めに合わせる良いアイデアがあります。i日のコマンドで地形を129x129に縮小し、Gazeboの<code>media/dem/</code>ディレクトリにそれをコピーします。
<code>bash
  mkdir -p /tmp/media/dem/
  gdalwarp -ts 129 129 /tmp/mtsthelens.dem /tmp/media/dem/mtsthelens_129.dem
</code>
GazeboでDEMファイルを読み込むのは高低地図を読み込む方法と同じです。Gazeboは読み込みファイルがプレーンファイルかDEMファイルであった場合、自動でファイルを検出します。<code>volcano.world</code>ファイルを作成し、以下の内容をコピペしてください。できたら<code>/tmp</code>のように、どこにでも好きなところに保存してください。。
<code>xml
&lt;?xml version="1.0" ?&gt;
&lt;sdf version="1.4"&gt;
  &lt;world name="default"&gt;
    &lt;!-- A global light source --&gt;
    &lt;include&gt;
      &lt;uri&gt;model://sun&lt;/uri&gt;
    &lt;/include&gt;
    &lt;model name="heightmap"&gt;
      &lt;static&gt;true&lt;/static&gt;
      &lt;link name="link"&gt;
        &lt;collision name="collision"&gt;
          &lt;geometry&gt;
            &lt;heightmap&gt;
              &lt;uri&gt;file://media/dem/mtsthelens_129.dem&lt;/uri&gt;
              &lt;size&gt;150 150 50&lt;/size&gt;
              &lt;pos&gt;0 0 0&lt;/pos&gt;
            &lt;/heightmap&gt;
          &lt;/geometry&gt;
        &lt;/collision&gt;
        &lt;visual name="visual_abcedf"&gt;
          &lt;geometry&gt;
            &lt;heightmap&gt;
              &lt;texture&gt;
                &lt;diffuse&gt;file://media/materials/textures/dirt_diffusespecular.png&lt;/diffuse&gt;
                &lt;normal&gt;file://media/materials/textures/flat_normal.png&lt;/normal&gt;
                &lt;size&gt;1&lt;/size&gt;
              &lt;/texture&gt;
              &lt;texture&gt;
                &lt;diffuse&gt;file://media/materials/textures/grass_diffusespecular.png&lt;/diffuse&gt;
                &lt;normal&gt;file://media/materials/textures/flat_normal.png&lt;/normal&gt;
                &lt;size&gt;1&lt;/size&gt;
              &lt;/texture&gt;
              &lt;texture&gt;
                &lt;diffuse&gt;file://media/materials/textures/fungus_diffusespecular.png&lt;/diffuse&gt;
                &lt;normal&gt;file://media/materials/textures/flat_normal.png&lt;/normal&gt;
                &lt;size&gt;1&lt;/size&gt;
              &lt;/texture&gt;
              &lt;blend&gt;
                &lt;min_height&gt;2&lt;/min_height&gt;
                &lt;fade_dist&gt;5&lt;/fade_dist&gt;
              &lt;/blend&gt;
              &lt;blend&gt;
                &lt;min_height&gt;4&lt;/min_height&gt;
                &lt;fade_dist&gt;5&lt;/fade_dist&gt;
              &lt;/blend&gt;
              &lt;uri&gt;file://media/dem/mtsthelens_129.dem&lt;/uri&gt;
              &lt;size&gt;150 150 50&lt;/size&gt;
              &lt;pos&gt;0 0 0&lt;/pos&gt;
            &lt;/heightmap&gt;
          &lt;/geometry&gt;
        &lt;/visual&gt;
      &lt;/link&gt;
    &lt;/model&gt;
  &lt;/world&gt;
&lt;/sdf&gt;
</code>
コードの上部にある<code>&lt;heightmap&gt;&lt;size&gt;</code>要素は、(<code>&lt;size&gt;</code>要素がないときは)Gazeboが原寸でDEMファイルを読み込むかどうかを決定し、(<code>&lt;size&gt;</code>要素があるときは)リサイズします。今回は、DEMファイルをリサイズします。<code>&lt;size&gt;</code>要素はGazeboにシミュレーションで使用し、リサイズする大きさをメートル単位で定義します。もし、正しいアスペクト比を維持したいなら横幅、高さ、海抜（<code>&lt;size&gt;</code>の三番目です）を詳細に計算して定義してください。今回の例では、DEMファイルは150 x 150 [m]で最も高いところで、海抜50 [m] となるようにリサイズしています。<br/>
GazeboをDEMファイルを含む<code>world</code>と共に立ち上げ、以下のような火山の立体図が表示されることを確認してください。以下のコマンドの例では、ファイルを<code>/tmp</code>ディレクトリに置いています。
<code>bash
　# インストールパスにあるgazeboのsetup.shにsourceコマンドを実行することを確認してください。
　source /usr/share/gazebo/setup.sh
　GAZEBO_RESOURCE_PATH="$GAZEBO_RESOURCE_PATH:/tmp" gazebo /tmp/volcano.world
</code>
<img src="/images/2015-02-04-gazebo-digital-elevation-model/gazebo_sthelens.png" alt="gazebo_sthelens" /></p>

<h2>興味のある地域のDEMファイルを手に入れるにはどうしたらよいですか?</h2>

<h3>GLCF(Global Land Cover Facillity)について</h3>

<p>続いて、興味のある特定の地域のDEMファイルを手に入れる方法を説明します。<br/>
<a href="http://glcf.umd.edu/">Global Land Cover Facility</a>では地球の高解像度なデジタル地形データを提供し、維持しています。<a href="http://glcfapp.glcf.umd.edu:8080/esdi/index.jsp">Search and Preview tool</a>へ行ってみましょう。すると、イメージしたシミュレータを見つけることができるでしょう。すべての地形パッチはあなたがこのツールを使う前から知っているであろう個々の<a href="http://www.shinko-keirin.co.jp/keirinkan/tea/sho/jissen/rika/201303_4/index.html">pathとrow</a>を持っています。私達は、QGISを使い興味のあるpath/rowを発見するのです。以下のキャプチャはその検索画面です。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/glcf_search_tool.png" alt="glcf_search_tool" /></p>

<h3>QIGSについて</h3>

<p><a href="http://www.qgis.org/">QIGS</a>とはクロスプラットフォームのオープンソース地理情報システムプログラムです。以下のように、このプログラムでは閲覧、編集、調査で使用することができます。<a href="http://www.qgis.org/en/site/forusers/download.html">QGISのサイトの指示</a>にしたがってQGISをダウンロードしてください。</p>

<!-- ![qgis](/images/2015-02-04-gazebo-digital-elevation-model/qgis.png) -->


<h5>QIGSのダウンロード</h5>

<p><a href="http://www.qgis.org/en/site/forusers/download.html">QGISのダウンロード</a>を参考にしてQGISをダウンロードします。<br/>
以下のように、aptを使ってQGISをインストールします。
<code>bash
  sudo apt-get update
  sudo apt-get install qgis python-qgis
</code></p>

<h5>QGISの使い方</h5>

<ol>
<li><p>QGISを開いたら、以下のように、画面左にある<strong>WMS/WMTSレイヤの追加</strong>というアイコンをクリックしましょう。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis-add-wms-wmts.png" alt="qgis-add-wms-wmts" /></p></li>
<li><p>すると以下のようなウィンドウが出るので、以下のように、バーをクリックし、<strong>Lizardtch server</strong>を選択し、<strong>接続</strong>ボタンを押してください。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis-lizardtech-server.png" alt="qgis-lizardtech-server" /></p></li>
<li><p>すると、以下の一枚目のように、レイヤを選択できるようになるので、タイトルが<strong>MODIS</strong>であるレイヤを選んで、一番下の<strong>追加</strong>を押してください。終わったら、このウィンドウィンドウを閉じてください。<br/>
うまく行くと、二枚目の写真のように、世界地図がレイヤに表示されるはずです。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis-add-modis.png" alt="qgis-add-modis" />
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis-modis-layer.png" alt="qgis-modis-layer" /></p></li>
<li><p>続いてのステップは他のレイヤーを利用可能なパッチと共に追加します。<a href="http://landsat.usgs.gov/documents/wrs2_descending.zip">このshapeファイル</a>をダウンロードし、どこでも良いのでフォルダに解凍してください。私は、<code>~/Downloads/</code>に保存し、そこで展開しました。</p></li>
<li><p>QGISに戻り、以下の一枚目のように、<strong>ベクタレイヤの追加</strong>というアイコンを押してください。すると、<strong>開く前に、現在のプロジェクトを保存しますか？</strong>と聞かれるポップアプが表示されるので、<strong>保存する</strong>を選んでください。その後、先ほど解凍したフォルダの中の<code>wrs2descending.shp</code>ファイルを選択してください。うまく開けると、2枚目の様なレイヤが表示されるはずです。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis-add-vector-layer.png" alt="qgis-add-vector-layer" />
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis-wrs2-descending-layer.png" alt="qgis-wrs2-descending-layer" /></p></li>
</ol>


<p>ここまでで、メインウィンドウに２つのレイヤが開いていることを確認できるはずです。２つのレイヤーを同時に確認できるようにするため、<code>wrs2desceding</code>レイヤの透明度を変更しましょう。<br/>
ウィンドウ左側のレイヤ一覧より、<code>wrsdescending</code>レイヤをダブルクリックすると、以下の一枚目のようなウィンドウが出るので、透明度を85%程度に修正しましょう。成功すれば、二枚目のようなレイヤになっているはずです。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis-wrs2-descending-%20transparency.png" alt="qgis-wrs2-descending- transparency" />
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis-modis-wrs2-descending.png" alt="qgis-modis-wrs2-descending" /></p>

<h3>QGISとGLCFを使って地形データを取得するまでの手順</h3>

<h5>QGISの操作</h5>

<ol>
<li><p>脇ほどまでのレイヤを使って、スクロールと左ボタンを使用し、興味のある地域まで移動してください。<br/>
今回は、富士山まで移動してみました。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis-mtfuji.png" alt="qgis-mtfuji" /></p></li>
<li><p>以下のように、上部のバーにある、<strong>地物情報表示</strong>というアイコンをクリックしてください。<br/>
その状態で、興味のある地域をクリックすると、以下のように、そのエリア一体の地形パッチがハイライトされます。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis-identify-features.png" alt="qgis-identify-features" /></p></li>
<li><p>以下のキャプチャの例では、富士山近辺の地域のDEMのためのpathとrowを確認することができます。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis-identify-features-detail.png" alt="qgis-identify-features-detail" />
ちなみに、公式チュートリアルでは、以下のキャプチャのように、スペイン、カナリア諸島の、<a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%B9%E3%83%BB%E3%83%91%E3%83%AB%E3%83%9E%E3%82%B9%E3%83%BB%E3%83%87%E3%83%BB%E3%82%B0%E3%83%A9%E3%83%B3%E3%83%BB%E3%82%AB%E3%83%8A%E3%83%AA%E3%82%A2">ラスパルマス</a>のDEMのpathとrowを確認しています。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/qgis_las_palmas.png" alt="qgis_las_palmas" /></p></li>
</ol>


<h5>GLCFの操作</h5>

<ol>
<li><p><a href="http://glcfapp.glcf.umd.edu:8080/esdi/index.jsp">GLCF検索ツール</a>に戻り、調べたpath/rowの値を<strong>Start Path</strong>と<strong>Start Row</strong>とラベリングされているカラムに入力しましょう。</p></li>
<li><p>入力したら、<strong>Submit Quenry</strong>をクリックしてください。</p></li>
<li><p><strong>Preview and Download</strong>を押すと結果を表示できます。以下の結果は、富士山近傍のもので、path = 108、row = 35とした時の結果です。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/glcf-mtfuji.png" alt="glcf-mtfuji" /></p></li>
<li><p>地形ファイルを選び、<strong>Download</strong>を押してください。<br/>
今回は、計測年度が一番新しい、2011年のもの、ID:294-863を選びました。（上図参照）</p></li>
<li><p>最後に、拡張子が<code>.TIF.gz</code>のファイルを選び、好きなディレクトリに保存し、展開してください。<br/>
尚、<code>.gz</code>が付いているデータは複数ありますが、<code>README.GTF</code>によると、<code>*_B62.TIF.gz</code>となっているものが程よい解像度で、良いみたいです。また、<code>README.GTF</code>によると、<code>*.TIF.*</code>は<code>GeoTiff</code>フォーマットになっているそうなので、これを選びましょう。尚、<code>*</code>はワイルドカードです。<br/>
<a href="http://glcf.umd.edu/">GLCF(Global Land Cover Facility)</a>ファイルは、DEMが利用できるフォーマットとして、最も標準的なな<a href="http://ja.wikipedia.org/wiki/GeoTIFF">GeoTiffフォーマット</a>になっています。</p></li>
</ol>


<h2>GazeboでDEMデータを使用するための準備</h2>

<p>DEMデータは通常、高精細に作られています。Gazeboで使用する前に、<code>gdalwarp</code>を使って地形の解像度を扱いやすいサイズにします。
<code>bash
  gdalwarp -ts &lt;width&gt; &lt;height&gt; &lt;srcDEM&gt; &lt;targetDEM&gt;
</code>
DEMデータは、しばしば、<code>holes</code>や<code>void</code>エリアを含んでいます。そういったエリアはDEMが生成された時に作成できなかったデータがあるエリアと一致します。<code>hole</code>というデータの場合、<code>hole</code>には、DEMで使用された、データタイプの最大値もしくは最小値が割り当てられています。<br/>
上記のような<code>hols</code>が埋められたDEMのデータセットである、<code>finished</code>バージョンをダウンロードするよう、常に心がけてください。もし、あなたのDEMの地形データが<code>hols</code>(<code>NODATA</code>値としても知られている)を含んでいる場合、<code>gdal_fillnodata.py</code>のような、<code>gdal</code>のツールを使って手動で修復してみてください。</p>

<h2>Gazeboで様々なDEMを使う</h2>

<p>Gazeboは、直接様々なDEMをサポートしていないにも関わらず、GDALにはDEMを一つにするマージのための有益なツールセットがあります。DEMのセットをダウンロードする最初のステップはマージすることです。パッチは他のパッチと重なることがあるということを覚えておいてください。GDALはそれらの重なりをシームレスにマージできるのです。今あなたがいるディレクトリにマージする準備ができた状態で<code>Geofiff</code>ファイルがあるとすると、次のコマンドで、それをマージできます。
<code>bash
  gdal_merge.py *.tif -o dem_merged.tif
</code>
すると、<code>dem_merged.tif</code>ファイルを<code>world</code>ファイルの中で使用できますし、Gazeboはすべてのパッチがマージされた状態で、地形を読み込むでしょう。以下のスクリーンショットは、公式サイトのもので、カナリア諸島一帯を囲む４つのパッチをマージした結果だそうです。
<img src="/images/2015-02-04-gazebo-digital-elevation-model/gazebo_dem_merged.png" alt="gazebo_dem_merged" /></p>

<h2>最後に</h2>

<p>自分で取得した地図をとりあえず表示することは出来ましたが、縮尺とかがおかしいままなので、解決したら、また投稿します。とりあえず今は、先に進みたいです。(02/04/2015 21:51)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[環境をつくろう ! (環境を修正する 編) No.3.2]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/03/gazebo-modifying-a-world/"/>
    <updated>2015-02-03T18:59:45+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/03/gazebo-modifying-a-world</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/03/2015 (Tue)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第三弾「Build a World」。
このチュートリアルでは、シミュレーション中の環境をどのように構築するかについて説明します。<br/>
今回はその「Modifying a World」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_world">GAZEBO Tutorial-Build a World</a></p>

<h2>はじめに</h2>

<p>このチュートリアルでは、どのようにして物理プロパティや場面プロパティを含むグローバルプロパティを修正するか説明します。<br/>
Gazeboを起動してください。:
<code>bash
  gazebo
</code></p>

<h2>場面プロパティ</h2>

<p><strong>World</strong>タブの中で、<strong>scene</strong>を選んでください。すると、以下のような場面プロパティのリストが表示されたはずです。続いてプロパティの詳細を表示するために、三角形のボタンをクリックしてプロパティを展開してください。</p>

<!-- ![tutorialSceneTab](/images/2015-02-03-gazebo-modifying-a-world/tutorialSceneTab.png) -->


<!-- ![tutorialSceneTabExpanded](/images/2015-02-03-gazebo-modifying-a-world/tutorialSceneTabExpanded.png)   -->


<p>これらのプロパティでは照明についての詳細を変更することができます。<br/>
<strong>メモ : </strong>skyが選択されている場合、背景色は変更できません。</p>

<h2>物理プロパティ</h2>

<p><strong>World</strong>タブの中で、<strong>physics</strong>を選択してください。すると、以下のように物理プロパティのリストが表示されたはずです。</p>

<ul>
<li><p>チェックボックスはプラグインやセンサが起動している間、物理エンジンを起動するかどうかを選択できます。</p></li>
<li><p><strong>rial time update rate parameter</strong>は物理エンジンのアプデートの時間を[Hz]で指定します。もし、この値を0にしたら、可能な限り速い速度でアップデートを行います。<strong>rial time update rate</strong>と<strong>step size</strong>はリアルタイム要素を代表する要素であり、シミュレーション時間をリアルタイムにするかどうかを決定します。</p></li>
<li><p><strong>max step size</strong>は一秒間にどれだけの間物理シミュレータのアップデートステップを維持するかを定義します。</p></li>
</ul>


<p><strong>grabity</strong>ブロックでは:</p>

<ul>
<li>x,y,zのパラメータで全体の重力をベクトルで設定します。単位は[$m/s<sup>2</sup>$]です。</li>
</ul>


<p><strong>solver</strong>ブロックでは:</p>

<ul>
<li><p>慣性パラメータによりLCP solver（ODEやbulletで使用されています）で使用するための慣性データを設定します。</p></li>
<li><p>SORパラメータは<a href="http://en.wikipedia.org/wiki/Successive_over-relaxation">連続する加速緩和</a>を記述します。この、加速緩和とは慣性要素を収束させるために使用します。</p></li>
</ul>


<p><strong>constraints</strong>ブロックには制約を解除するパラメータがいくつか含まれています。</p>

<ul>
<li>CFMやERPパラメータは<a href="http://ode-wiki.org/wiki/index.php?title=Manual:_Concepts#Constraint_Force_Mixing_.28CFM.29">Constant Force Mixing</a>や<a href="http://ode-wiki.org/wiki/index.php?title=Manual:_Concepts#Joint_error_and_the_Error_Reduction_Parameter_.28ERP.29">Error Reduction</a>のパラメータにを記述し、ODEやbulletで使用されます。CFMやERｐパラメータは<a href="http://ode-wiki.org/wiki/index.php?title=Manual:_Concepts#How_To_Use_ERP_and_CFM">linear stiffness や damping coefficients</a>に関連付けることができます。<strong>max velocity</strong>や<strong>surface layer</strong>パラメータは<strong>split inpulse method</strong>の解決に使用されます。どのようなcontactにおいても、<strong>surface layer</strong>やバウンドしないような<strong>max velocity</strong>より遅い速度による深さより深い。(????)<strong>私もよくわからない</strong>ので、ちょっと勘弁してください。すみませんorz&hellip;<br/>
パラメータについての詳しい説明は、<a href="http://osrf-distributions.s3.amazonaws.com/sdformat/api/dev.html#physics12">sdf physics documentation</a>をご覧ください。</li>
</ul>


<!-- ![tutorialPhysicsTab](/images/2015-02-03-gazebo-modifying-a-world/tutorialPhysicsTab.png) -->


<h4>Next >> <a href="">GazeboでのDEMｓの使い方</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[環境をつくろう ! (新規の環境を作る 編) No.3.1]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/03/gazebo-building-a-new-world/"/>
    <updated>2015-02-03T17:42:21+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/03/gazebo-building-a-new-world</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/03/2015 (Tue)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第三弾「Build a World」。
このチュートリアルでは、シミュレーション中の環境をどのように構築するかについて説明します。<br/>
今回はその「Building a New World」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_world">GAZEBO Tutorial-Build a World</a></p>

<h2>はじめに</h2>

<p>このチュートリアルでは、動的もしくは静的な物体を生成する過程について説明します。</p>

<h2>用語説明</h2>

<ul>
<li><p><strong>World : </strong>ロボットや物体（例えばビルやテーブル、照明など）さらに、空や照明のパラメータ、物理的特性を記述するのに使用します。</p></li>
<li><p><strong>Static : </strong>staticマークがついた物体（SDFファイルで<code>&lt;static&gt;true&lt;/static&gt;</code>と記述されているもの）であり、衝突要素のみを持つ様な物体です。すべての動いていない物体は<code>static</code>と記述する必要があります。また、そのように記述することで、パフォーマンスが向上します。</p></li>
<li><p><strong>Dynamic : </strong>dynamicマークがついた物体（SDFファイルには<code>&lt;static&gt;</code>要素がないか、<code>false</code>が設定されています）で、慣性要素と衝突要素を含みます。</p></li>
</ul>


<h2>セットアップ</h2>

<ol>
<li><p>Gazeboがインストールされていることを確認してください。インストールしていない場合には、<a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-install/">Gazeboのインストール</a>をご覧ください。</p></li>
<li><p>チュートリアル用の作業ディレクトリを作成しましょう。:
<code>bash
 mkdir ~/build_world_tutorial
 cd ~/build_world_tutorial
</code></p></li>
<li><p>Gazeboを起動し、以下のように<code>gland plane</code>が起動していることを確かめましょう。
<code>bash
 gazebo
</code>
<img src="/images/2015-02-03-gazebo-building-a-new-world/empty_world.png" alt="empty_world" /></p></li>
</ol>


<h2>物体を追加する</h2>

<p>Gazeboには、物体を追加する方法が２つあります。</p>

<ol>
<li><p>１つ目は、簡単な形状の設置です。これは、以下のようにレンダリングウィンドウの上部にあります。
<img src="/images/2015-02-03-gazebo-building-a-new-world/empty_world_simple_shapes_highlighted.png" alt="empty_world_simple_shapes_highlighted" /></p></li>
<li><p>２つ目は、モデルデータベースにあります。以下のように画面左上部にある<strong>Insert</strong>タブをクリックすることで、追加する物体の一覧が表示でき、追加する物体を選択することができます。
<img src="/images/2015-02-03-gazebo-building-a-new-world/empty_world_insert_highlighted.png" alt="empty_world_insert_highlighted" /></p></li>
</ol>


<h2>簡単な図形を追加する</h2>

<p>箱、球、円柱をアイコンをレンダリングウィンドウ上部のアイコンをクリックすることで追加できます。それぞれの形状の大きさは以下のようになっています。</p>

<ul>
<li><p>箱 : 1x1x1 [m]</p></li>
<li><p>球 : 直径 1 [m]</p></li>
<li><p>円柱 : 直径 1 [m]、高さ 1 [m]</p></li>
</ul>


<p>箱のアイコンを選択し、マウスをレンダリングウィンドウに動かしてください。すると、マウスと共に動く箱を確認できるはずです。気に入った場所に箱を設置するには、左クリックを押してください。<br/>
球と円柱でも同じことを繰り返してください。すると以下のような感じになるはずです。
<img src="/images/2015-02-03-gazebo-building-a-new-world/simple_shapes.png" alt="simple_shapes" /></p>

<h2>モデルデータベースからモデルを追加する</h2>

<p>Gazeboのモデルデータベースはロボットや机、建物に至るまでのありとあらゆる種類の保管場所です。</p>

<ol>
<li><p>モデルデータベースに接続するために、画面左上端にある<strong>Insert</strong>タブを選択してください。<br/>
モデルのリストは現在の場所に従ったセクションに分けられています。それぞれのセクションはURIもしくはパスによって読み込まれています。リモートサーバーに置かれている物体を選択するとモデルを<code>~/.gazebo/models</code>にダウンロードします。</p></li>
<li><p><code>world</code>にいろいろなモデルを追加してみましょう。モデルをダウンロードするときは、容量の大きい物もありますので、注意してください。</p></li>
<li><p>以下のような感じでモデルを追加することができたと思います。モデルは、あなたが選んだものが表示差rているはずです。ですので、以下のキャプチャは、あくまでも一例です。:
<img src="/images/2015-02-03-gazebo-building-a-new-world/added_models_to_empty_world.png" alt="added_models_to_empty_world" /></p></li>
</ol>


<h2>モデルのポジション</h2>

<p>それぞれのモデルのポジションは変換ツールもしくは回転ツールを使うことで変更できます。<br/>
以下のように、アイコンが用意されています。
<img src="/images/2015-02-03-gazebo-building-a-new-world/empty_rts.png" alt="empty_rts" /></p>

<h3>変換</h3>

<p>変換ツールでは、物体をx,y,z軸それぞれに移動することができます。動かしたいモデルをクリックで選択しこのツールを使ってみましょう。３軸マーカーがモデル上に現れたと思います。このマーカーを使ってモデルをx,y,z軸方向に動かすのです。<br/>
モデルをクリックし、ドラッグするだけで、物体をx-y平面では移動させることができます。x,y,zのキーを押しながらドラッグすることで、どの軸に沿って動かすのかを決定することができます。<br/>
いろいろな方法で、モデルを動かしてみましょう。</p>

<h3>回転</h3>

<p>回転ツールではx,y,z軸周りにモデルを回転することができます。動かしたいモデルをクリックで選択しこのツールを使ってみましょう。３つの輪でできたマーカがモデル上に現れたと思います。このマーカーを使ってモデルをx,y,z軸周りに回転することができるのです。<br/>
いろいろな方向にモデルを回転させてみましょう。</p>

<h3>大きさ</h3>

<p>大きさツールではモデルの大きさをx,y,z軸に沿って変更することができます。現在は、このツールは簡単な形状（つまり、箱、球、円柱）にのみ適用できます。簡単なモデルを選択し、このツールを使ってみましょう。すると、三軸のマーカーが出現したはずです。これを使ってx,y,z軸方向に物体の大きさを変更することができます。<br/>
いろいろな大きさにしてみましょう。</p>

<h2>モデルを削除する</h2>

<p>モデルを選択し、Deleteキーを押せばモデルを削除できます。また、モデルの上で右クリックし、<strong>Delete</strong>を選択してもモデルを削除できます。<br/>
いくつかのモデルを削除してみましょう。</p>

<h2>Worldを保存する</h2>

<p>気に入った<code>world</code>データが出来上がったら、<strong>File</strong>メニューより保存することができます。<br/>
<strong>File</strong>メニューを選び<strong>Save as</strong>を選択しましょう。<br/>
ポップアップが現れ、新しいファイルネームを問われます。<code>my_world.sdf</code>などのフィル名を入力し、OKをクリックしましょう。</p>

<h2>Worldを読み込む</h2>

<p>コマンドラインで以下のように入力すれば、保存した<code>world</code>データを読み込むことができます。<br/>
以下の例は、<code>my_worlf.sdf</code>を読み込んでいます。
<code>bash
gazebo my_world.sdf
</code>
ファイル名は現在の作業ディレクトリ直下にしてください。そうしない場合には、絶対パスもしくは、作業ディレクトリからの相対パスを入力してください。</p>

<h3>Next >> <a href="http://cir-kit.github.io/blog/2015/02/03/gazebo-modifying-a-world/">環境を修正する</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう !（動く箱 編）No.2.9]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/01/gazebo-animated-box/"/>
    <updated>2015-02-01T10:50:42+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/01/gazebo-animated-box</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/01/2015 (Sun)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「Animated Box」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<h2>はじめに</h2>

<p>このチュートリアルでは、10周期で地面の上をスライドするようなシンプルな箱と、その<code>world</code>を生成します。<br/>
また、Gazeboもしくは、自分独自の実行可能なシミュレーションを使用しての参照方法、アクセス方法、相互作用の様々な方法を紹介します。
シミュレーションで生成する箱は自身の姿勢を配信し、姿勢を受け取るとコールバックを呼び、箱のロケーションとタイムスタンプをプリントアウトします。</p>

<h2>セットアップ</h2>

<p>作業ディレクトリを作成しましょう。
<code>bash
mkdir ~/gazebo_animatebox_tutorial
cd ~/gazebo_animatebox_tutorial
</code></p>

<h2>動く箱のコード</h2>

<p><a href="https://bitbucket.org/osrf/gazebo/src/gazebo_4.0/examples/stand_alone/animated_box/animated_box.cc">animate_box.cc</a>、<a href="https://bitbucket.org/osrf/gazebo/src/gazebo_4.0/examples/stand_alone/animated_box/independent_listener.cc">independent_listner.cc</a>、<a href="https://bitbucket.org/osrf/gazebo/src/gazebo_4.0/examples/stand_alone/animated_box/integrated_main.cc">integrated_main.cc</a>、<a href="https://bitbucket.org/osrf/gazebo/src/gazebo_4.0/examples/stand_alone/animated_box/CMakeLists.txt">CMakeLists.txt</a>、<a href="https://bitbucket.org/osrf/gazebo/src/gazebo_4.0/examples/stand_alone/animated_box/animated_box.world">animated_box.world</a>を現在のディレクトリにコピーしましょう。
<code>bash
wget http://bitbucket.org/osrf/gazebo/raw/gazebo_4.0/examples/stand_alone/animated_box/animated_box.cc
wget http://bitbucket.org/osrf/gazebo/raw/gazebo_4.0/examples/stand_alone/animated_box/independent_listener.cc
wget http://bitbucket.org/osrf/gazebo/raw/gazebo_4.0/examples/stand_alone/animated_box/integrated_main.cc
wget http://bitbucket.org/osrf/gazebo/raw/gazebo_4.0/examples/stand_alone/animated_box/CMakeLists.txt
wget http://bitbucket.org/osrf/gazebo/raw/gazebo_4.0/examples/stand_alone/animated_box/animated_box.world
</code>
プラグインをビルドしましょう。
<code>bash
mkdir build
cd build
cmake ../
make
</code>
ただし、Gazeboはプラグインを最後に読み込むことができるということを覚えておいてください。
<code>bash
export GAZEBO_PLUGIN_PATH=`pwd`:$GAZEBO_PLUGIN_PATH
</code></p>

<h2>Gazeboでシミュレーションする</h2>

<p>今回は、プラグインを使ったGazeboをどのようにして使うかを説明します。<br/>
以下のようにしてGazeboを起動しましょう。
<code>bash
cd ~/gazebo_animatebox_tutorial
gazebo animated_box.world
</code>
他のターミナルで、<code>gz topc</code>コマンドを使用し、箱の姿勢を表示するユーザーインターフェースを起動しましょう。
<code>bash
gz topic -v /gazebo/animated_box_world/pose/local/info
</code>
すると、箱の姿勢を表示するGUIが表示できたはずです。<br/>
以下の動画は、動く箱と、その状態を表示するGUIが動いている様子です。</p>

<div class="youtube-container">
<iframe width="560" height="315" src="https://www.youtube.com/embed/QMrT0iapF4g" frameborder="0" allowfullscreen></iframe>
</div>


<h2>独自の実行ファイルを使ってシミュレーションに接続する。</h2>

<p>Gazeboが起動していないことを確認してください。<br/>
これまでの説明通りにGazeboを起動してください。同時にGazeboに接続できる独立したリスナを起動してください。このリスナというのは、箱のロケーションとタイムスタンプを受け取り、それをプリントアウトするようなものです。
<code>bash
cd ~/gazebo_animatebox_tutorial
gazebo animated_box.world &amp; ./build/independent_listener
</code></p>

<p>実行すると、以下の動画のようになります。<br/>
先ほどまでのように、<code>gz topic</code>によるアプリケーションとは異なり、箱の状態が端末に表示されていることがわかります。<br/>
<strong>注目 : </strong>もし、Gazeboは起動するが、箱が動ないという現象に陥ったなら、それは、パス通しがうまく行っていません。一つ前の項でパス通しをしていますので、<code>libanimated_box.so</code>ファイルのあるディレクトリで、以下のコマンドを実行し、パス通しをし直しましょう。
<code>bash
export GAZEBO_PLUGIN_PATH=`pwd`:$GAZEBO_PLUGIN_PATH
</code>
ちなみに、この現象は、パスを通した後に一旦端末を閉じ、新しい端末で実行した場合に起きるようです。</p>

<div class="youtube-container">
<iframe width="560" height="315" src="https://www.youtube.com/embed/e3kCrol8XA8" frameborder="0" allowfullscreen></iframe>
</div>


<h2>シミュレーションを起動し、独自の実行ファイルを接続する。</h2>

<p>Gazeboが起動していないことを確認してください。
例<code>integrated_main</code>は以下のようになっています。</p>

<ol>
<li><p>箱を表示するシミュレーションを起動する。</p></li>
<li><p>シミュレーションにリスナを接続する。</p></li>
<li><p>リスナはタイムスタンプと姿勢を受け取り、それぞれをプリントアウトします。</p></li>
</ol>


<p>ファイル<code>integrated_main</code>を実行しましょう。
<code>bash
cd ~/gazebo_animatebox_tutorial
./build/integrated_main animated_box.world
</code></p>

<p>シミュレーションを見るために、以下のコマンドを実行しましょう。
<code>bash
gzclient
</code></p>

<p>実行すると、以下の動画のようになります。<br/>
先ほどと同様、端末に箱の状態が表示されますが、コマンド一つでGazeboが立ち上がっていないところに違いがあります。つまり、今回は、<code>gzserver</code>のみを立ち上げ、その後手動で<code>gzclient</code>を立ち上げたということです。この、<code>gzserver</code>と<code>gzclient</code>の概念については<a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-components/">GAZEBOを使ってみよう ! (Gazebo コンポーネント 編)</a>で説明していますので、そちらをご覧ください。</p>

<div class="youtube-container">
<iframe width="560" height="315" src="https://www.youtube.com/embed/dY7pIIXt85E" frameborder="0" allowfullscreen></iframe>
</div>


<h2>ソースコード</h2>

<h3>independent_listner.cc</h3>

<p>実行しているシミュレーションに接続し、姿勢情報トピックを受け取り、物体の姿勢を表示します。</p>

<h3>integrated_main.cc</h3>

<p>シミュレーションを起動し、姿勢情報トピックを受け取り、物体の姿勢を表示します。</p>

<h3>animated_box.cc</h3>

<p>シミュレーションのアニメーション要素を定義したプラグインライブラリです。アニメーション要素とは、シミュレーションの中で、箱を動かすようなものです。</p>

<h3>animated_box.world</h3>

<p>シミュレーションの環境とその環境下に置く箱のについて定義下XMLファイルです。</p>

<h3>CMakeLists.txt</h3>

<p>スクリプトをビルドするCMakeです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう ! (簡単なグリッパーを作る 編) No.2.8]]></title>
    <link href="http://cir-kit.github.io/blog/2015/01/31/gazebo-make-a-simple-gripper/"/>
    <updated>2015-01-31T22:35:00+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/01/31/gazebo-make-a-simple-gripper</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>01/30/2015 (Fri)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「Make a simple gripper」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<h2>はじめに</h2>

<p>このチュートリアルでは，２つの棒を使ったピンチンググリッパーの作り方を説明します。</p>

<h2>モデルディレクトリを作る</h2>

<p>このチュートリアルを始めるために、<a href="http://gazebosim.org/user_guide/started__models__database.html">モデルデータベースドキュメント</a>と<a href="http://sdformat.org/spec">SDF</a>のレファレンスをご覧ください。</p>

<h2>モデルを作る</h2>

<ol>
<li><p><code>world</code> ファイルのためのディレクトリを作成しましょう。
<code>bash
 mkdir ~/simple_gripper_tutorial
 cd ~/simple_gripper_tutorial
</code></p></li>
<li><p>まずはシンプルな空の<code>world</code>から始めます。<code>world</code>ファイルを作成しましょう。
<code>bash
 gedit ~/simple_gripper_tutorial/gripper.world
</code>
以下のSDFファイル<a href="http://bitbucket.org/osrf/gazebo_tutorials/raw/default/simple_gripper/files/box.sdf">gripper.world</a>をコピペしてください。
<code>xml
 &lt;?xml version="1.0"?&gt;
   &lt;sdf version="1.4"&gt;
     &lt;world name="default"&gt;
     &lt;!-- A ground plane --&gt;
     &lt;include&gt;
       &lt;uri&gt;model://ground_plane&lt;/uri&gt;
     &lt;/include&gt;
     &lt;!-- A global light source --&gt;
     &lt;include&gt;
       &lt;uri&gt;model://sun&lt;/uri&gt;
     &lt;/include&gt;
     &lt;include&gt;
       &lt;uri&gt;model://my_gripper&lt;/uri&gt;
     &lt;/include&gt;
     &lt;/world&gt;
   &lt;/sdf&gt;
</code></p></li>
<li><p><code>~/.gazebo</code> ディレクトリの中に，<code>model</code> ディレクトリを作成してください。作成したディレクトリには、これから作成するモデルを置いてゆきます。:
<code>bash
 mkdir -p ~/.gazebo/models/my_gripper
</code></p></li>
<li><p>作成するグリッパの基本的な構造を作りましょう。その最も簡単な方法は静的モデルを作り、リンクを一つ追加することです。静的モデルとは、シミュレーションがスタートしてもリンクが動かないということを意味します。これにより、シミュレータをスタートさせ、ジョイントを追加する前に、モデルを見ながら、リンクの位置を調べることができます。</p></li>
<li><p>以下のように、<a href="http://bitbucket.org/osrf/gazebo_tutorials/raw/default/simple_gripper/files/model.config">model.config</a>を作成しましょう。
<code>xml
 &lt;?xml version="1.0"?&gt;
 &lt;model&gt;
   &lt;name&gt;My Gripper&lt;/name&gt;
   &lt;version&gt;1.0&lt;/version&gt;
   &lt;sdf version='1.4'&gt;simple_gripper.sdf&lt;/sdf&gt;
   &lt;author&gt;
     &lt;name&gt;My Name&lt;/name&gt;
     &lt;email&gt;me@my.email&lt;/email&gt;
   &lt;/author&gt;
   &lt;description&gt;
     My awesome robot.
   &lt;/description&gt;
 &lt;/model&gt;
</code></p></li>
<li><p>以下の<a href="http://bitbucket.org/osrf/gazebo_tutorials/raw/default/simple_gripper/files/simple_gripper.sdf">simple_gripper.sdf</a>ファイルをコピペしてください。
<code>xml
&lt;?xml version="1.0"?&gt;
&lt;sdf version="1.4"&gt;
 &lt;model name="simple_gripper"&gt;
     &lt;link name="riser"&gt;
         &lt;pose&gt;-0.15 0.0 0.5 0 0 0&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;pose&gt;0 0 -0.5 0 0 0&lt;/pose&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;10.0&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.2 0.2 1.0&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.2 0.2 1.0&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Purple&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;link name="palm"&gt;
         &lt;pose&gt;0.0 0.0 0.05 0 0 0&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;0.5&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Red&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;link name="left_finger"&gt;
         &lt;pose&gt;0.1 0.2 0.05 0 0 -0.78539&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;0.1&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.3 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.3 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Blue&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;link name="left_finger_tip"&gt;
         &lt;pose&gt;0.336 0.3 0.05 0 0 1.5707&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;0.1&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Blue&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;link name="right_finger"&gt;
         &lt;pose&gt;0.1 -0.2 0.05 0 0 .78539&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;0.1&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.3 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.3 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Green&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;link name="right_finger_tip"&gt;
         &lt;pose&gt;0.336 -0.3 0.05 0 0 1.5707&lt;/pose&gt;
         &lt;inertial&gt;
             &lt;inertia&gt;
                 &lt;ixx&gt;0.01&lt;/ixx&gt;
                 &lt;ixy&gt;0&lt;/ixy&gt;
                 &lt;ixz&gt;0&lt;/ixz&gt;
                 &lt;iyy&gt;0.01&lt;/iyy&gt;
                 &lt;iyz&gt;0&lt;/iyz&gt;
                 &lt;izz&gt;0.01&lt;/izz&gt;
             &lt;/inertia&gt;
             &lt;mass&gt;0.1&lt;/mass&gt;
         &lt;/inertial&gt;
         &lt;collision name="collision"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
             &lt;geometry&gt;
                 &lt;box&gt;
                     &lt;size&gt;0.1 0.2 0.1&lt;/size&gt;
                 &lt;/box&gt;
             &lt;/geometry&gt;
             &lt;material&gt;
                 &lt;script&gt;Gazebo/Green&lt;/script&gt;
             &lt;/material&gt;
         &lt;/visual&gt;
     &lt;/link&gt;
     &lt;static&gt;true&lt;/static&gt;
 &lt;/model&gt;
&lt;/sdf&gt;
</code></p></li>
<li><p>ここまでで、何が作成できたのかを見るために、<code>world</code>ファイルを実行しましょう。
<code>bash
gazebo ~/simple_gripper_tutorial/gripper.world
</code>
すると、以下のようになっているはずです。
<img src="/images/2015-01-31-gazebo-make-a-simple-gripper/Simple-gripper-1.png" alt="Simple-gripper-1" /></p></li>
<li><p>一度でもリンクを作成できたら安心です。<code>simple_gripper.sdf</code>ファイルの中の<code>&lt;/model&gt;</code>と書いてある前に、以下のコードを追加することで、ジョイントを追加することができます。
<code>bash
 gedit ~/.gazebo/models/my_gripper/simple_gripper.sdf
</code>
<code>xml
         &lt;joint name="palm_left_finger" type="revolute"&gt;
             &lt;pose&gt;0 -0.15 0 0 0 0&lt;/pose&gt;
             &lt;child&gt;left_finger&lt;/child&gt;
             &lt;parent&gt;palm&lt;/parent&gt;
             &lt;axis&gt;
                 &lt;limit&gt;
                     &lt;lower&gt;-0.4&lt;/lower&gt;
                     &lt;upper&gt;0.4&lt;/upper&gt;
                 &lt;/limit&gt;
                 &lt;xyz&gt;0 0 1&lt;/xyz&gt;
             &lt;/axis&gt;
         &lt;/joint&gt;
         &lt;joint name="left_finger_tip" type="revolute"&gt;
             &lt;pose&gt;0 0.1 0 0 0 0&lt;/pose&gt;
             &lt;child&gt;left_finger_tip&lt;/child&gt;
             &lt;parent&gt;left_finger&lt;/parent&gt;
             &lt;axis&gt;
                 &lt;limit&gt;
                     &lt;lower&gt;-0.4&lt;/lower&gt;
                     &lt;upper&gt;0.4&lt;/upper&gt;
                 &lt;/limit&gt;
                 &lt;xyz&gt;0 0 1&lt;/xyz&gt;
             &lt;/axis&gt;
         &lt;/joint&gt;
         &lt;joint name="palm_right_finger" type="revolute"&gt;
             &lt;pose&gt;0 0.15 0 0 0 0&lt;/pose&gt;
             &lt;child&gt;right_finger&lt;/child&gt;
             &lt;parent&gt;palm&lt;/parent&gt;
             &lt;axis&gt;
                 &lt;limit&gt;
                     &lt;lower&gt;-0.4&lt;/lower&gt;
                     &lt;upper&gt;0.4&lt;/upper&gt;
                 &lt;/limit&gt;
                 &lt;xyz&gt;0 0 1&lt;/xyz&gt;
             &lt;/axis&gt;
         &lt;/joint&gt;
         &lt;joint name="right_finger_tip" type="revolute"&gt;
             &lt;pose&gt;0 0.1 0 0 0 0&lt;/pose&gt;
             &lt;child&gt;right_finger_tip&lt;/child&gt;
             &lt;parent&gt;right_finger&lt;/parent&gt;
             &lt;axis&gt;
                 &lt;limit&gt;
                     &lt;lower&gt;-0.4&lt;/lower&gt;
                     &lt;upper&gt;0.4&lt;/upper&gt;
                 &lt;/limit&gt;
                 &lt;xyz&gt;0 0 1&lt;/xyz&gt;
             &lt;/axis&gt;
         &lt;/joint&gt;
         &lt;joint name="palm_riser" type="prismatic"&gt;
             &lt;child&gt;palm&lt;/child&gt;
             &lt;parent&gt;riser&lt;/parent&gt;
             &lt;axis&gt;
                 &lt;limit&gt;
                     &lt;lower&gt;0&lt;/lower&gt;
                     &lt;upper&gt;0.9&lt;/upper&gt;
                 &lt;/limit&gt;
                 &lt;xyz&gt;0 0 1&lt;/xyz&gt;
             &lt;/axis&gt;
         &lt;/joint&gt;
</code>
また、モデルを<code>non-static</code>にしましょう。：
<code>xml
         ...
         &lt;static&gt;false&lt;/static&gt;
         ...
</code></p></li>
<li><p>Gazeboをもう一度立ち上げましょう。
<code>bash
 gazebo ~/simple_gripper_tutorial/gripper.world
</code></p></li>
<li><p>モデルの上で右クリックをし、<strong>&ldquo;View->Joints&rdquo;</strong>というのを選択しましょう。新たに作成したジョイントが表示されます。
<img src="/images/2015-01-31-gazebo-make-a-simple-gripper/Simple-gripper-joints.png" alt="Simple-gripper-joints" /></p></li>
<li><p>ジョイントコントロールウィジェットを使えば、それぞれのジョイントの力をコントロールすることができます。グリッパーモデルをクリックしてください。次に、GUIの右端にある直立したハンドル(白いポチが３つ付いているところ)を左にドラックしてください。するとウィジェットが表示されます。ウィジェットでは、それぞれのジョイントのリストとそのスライダーを表示しています。<strong>Force</strong>タブを選択し、スライダーを使ってそれぞれのジョイントに力を適用し、グリッパが動くことを確認してください。例えば、<code>palm_riser</code>の値を<code>10[N]</code>にセットすると、以下のようになるはずです。:</p></li>
</ol>


<div class="youtube-container">
<iframe width="420" height="315" src="https://www.youtube.com/embed/lPvVqTvr_BA" frameborder="0" allowfullscreen></iframe>
</div>


<ol>
<li><p>オプション</p></li>
<li><p>小さい箱もしくは円柱をシミュレータに追加し、グリッパーのところに置いてください。</p></li>
<li><p>GUIインターフェースを使って物体を持ち上げてみましょう。</p>

<p><strong>コツ : </strong>物体への慣性力をなるべく少なくするとうまく行くでしょう。</p></li>
</ol>


<h4>Next >> <a href="http://cir-kit.github.io/blog/2015/02/01/gazebo-attach-gripper-to-robot/:">グリッパをロボットに取り付ける</a></h4>
]]></content>
  </entry>
  
</feed>
