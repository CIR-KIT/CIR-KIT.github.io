<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gazebo | 九州工業大学 CIR-KIT Blog]]></title>
  <link href="http://cir-kit.github.io/blog/categories/gazebo/atom.xml" rel="self"/>
  <link href="http://cir-kit.github.io/"/>
  <updated>2015-02-12T16:53:47+09:00</updated>
  <id>http://cir-kit.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう ! (メッシュをインポートする 編) No.2.5]]></title>
    <link href="http://cir-kit.github.io/blog/2015/01/31/gazebo-import-meshes/"/>
    <updated>2015-01-31T19:55:25+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/01/31/gazebo-import-meshes</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>01/31/2015 (Sat)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「Import Meshes」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<h2>はじめに</h2>

<p>このチュートリアルでは、Gazeboへの3Dメッシュのインポートの仕方を説明します。</p>

<h2>メッシュを用意する</h2>

<p>Gazeboでは、+Zが上(垂直)、+Xが前(スクリーンの奥に向かう方向)、+Yが左となるような右手系の座標系を使用します。</p>

<h4>複雑さを減らす</h4>

<p>多くのメッシュはとても複雑になります。大量の三角形で構成されるメッシュはその数を減らすか、効率を良くするために、複数のメッシュに分割する必要があります。メッシュを減らす、もしくはメッシュを分割するということについての情報をあなたの3Dメッシュエディタのドキュメントで確認してみてください。</p>

<h4>メッシュを作る</h4>

<p>最初のステップはメッシュを(0,0,0)に設置し、前方（他の部位でも良い）をX軸にそうように設置します。</p>

<h4>メッシュを計測する</h4>

<p>Gazeboではメートル法を使用しています。多くのメッシュ（特に3D warehouseで作成したもの）では英語圏の単位系（インチとか）を使用しています。お気に入りの3Dエディタをメートル法でのものとして作成してください。</p>

<h2>メッシュをエクスポートする</h2>

<p>メッシュを詳細に作成したなら、<strong>Collada</strong>ファイルとしてエクスポートしましょう。このフォーマットにはすべての3D情報と材質情報が入っています。</p>

<h2>メッシュを試す</h2>

<p>メッシュを試す最も簡単な方法は<a href="http://bitbucket.org/osrf/gazebo_tutorials/raw/default/import_mesh/files/my_mesh.world">my_mesh.world</a>のようなメッシュをロードする、簡単な<code>world</code>ファイルを作成することです。以下に示す<code>my_mesh.dae</code>の部分は自分の好きなメッシュファイルの名前に置き換えてください。
<code>xml
&lt;?xml version="1.0"?&gt;
&lt;sdf version="1.4"&gt;
  &lt;world name="default"&gt;
    &lt;include&gt;
      &lt;uri&gt;model://ground_plane&lt;/uri&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://sun&lt;/uri&gt;
    &lt;/include&gt;
    &lt;model name="my_mesh"&gt;
      &lt;pose&gt;0 0 0  0 0 0&lt;/pose&gt;
      &lt;static&gt;true&lt;/static&gt;
      &lt;link name="body"&gt;
        &lt;visual name="visual"&gt;
          &lt;geometry&gt;
            &lt;mesh&gt;&lt;uri&gt;file://my_mesh.dae&lt;/uri&gt;&lt;/mesh&gt;
          &lt;/geometry&gt;
        &lt;/visual&gt;
      &lt;/link&gt;
    &lt;/model&gt;
  &lt;/world&gt;
&lt;/sdf&gt;
</code>
後は、Gazeboを立ち上げるだけです。先ほど作成した<code>my_mesh.world</code>のあるディレクトリで以下のように実行しましょう。
<code>bash
gazebo my_mesh.world
</code></p>

<h2>メッシュをテストする</h2>

<p><a href="https://web.archive.org/web/20120513213905/http://www.c3dl.org/wp-content/2.0Release/Resources/duck.dae">duck.dae</a>と<a href="https://web.archive.org/web/20120513213905/http://www.c3dl.org/wp-content/2.0Release/Resources/duck.png">duck.png</a>を利用することができます。先ほど作成した<code>world</code>ファイルと同じディレクトリに２つのファイルを置いてください。duckのメッシュはY軸を上として定義してあるので、sdfファイルに回転を設置します。なので、モデルは、画面の上をモデルの右として表示しています。：
<code>xml
&lt;visual name="visual"&gt;
  &lt;pose&gt;0 0 0 1.5708 0 0&lt;/pose&gt;
  &lt;geometry&gt;
    &lt;mesh&gt;&lt;uri&gt;file://duck.dae&lt;/uri&gt;&lt;/mesh&gt;
  &lt;/geometry&gt;
&lt;/visual&gt;
</code>
実行すると、以下のように見えるはずです。ちなみに、<code>&lt;uri&gt;</code>に示されているディレクトリは、読み込んだ<code>world</code>ファイルのあるディレクトリからの相対ディレクトリです。
<img src="/images/2015-01-31-gazebo-import-meshes/TutorialMeshDuck.png" alt="TutorialMeshDuck" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう ! (移動ロボットをつくる 編) No.2.4]]></title>
    <link href="http://cir-kit.github.io/blog/2015/01/31/gazebo-make-a-mobile-robot/"/>
    <updated>2015-01-31T19:28:40+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/01/31/gazebo-make-a-mobile-robot</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>01/25/2015 (Sun)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「Make a Mobile Robot」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<h2>はじめに</h2>

<p>このチュートリアルでは、デファレンシャル駆動機構をもつ二輪移動ロボットを作るプロセスを通じて、Gazeboの基本的なモデルマネジメントを学び、モデルデータベースの中でのベーシックモデル描写についても詳しく学びます。</p>

<h2>モデルディレクトリのセットアップ</h2>

<p><a href="http://gazebosim.org/user_guide/started__models__database.html">モデルデータベースドキュメント</a>を読んでください。Gazeboモデルデータベースディレクトリ構成のフォーマットルールに従ったモデルを作成します。また、モデルの構成フォーマットについての詳細は<a href="http://gazebosim.org/sdf">SDFリファレンス</a>をご覧ください。<br/>
モデルディレクトリを作成します。：
<code>bash
  mkdir -p ~/.gazebo/models/my_robot
</code>
ファイル<code>model.config</code>を作成します。:
<code>bash
  gedit ~/.gazebo/models/my_robot/model.config
</code>
中身は以下の内容にしてください。：
<code>xml
    &lt;?xml version="1.0"?&gt;
    &lt;model&gt;
      &lt;name&gt;My Robot&lt;/name&gt;
      &lt;version&gt;1.0&lt;/version&gt;
      &lt;sdf version='1.4'&gt;model.sdf&lt;/sdf&gt;
      &lt;author&gt;
       &lt;name&gt;My Name&lt;/name&gt;
       &lt;email&gt;me@my.email&lt;/email&gt;
      &lt;/author&gt;
      &lt;description&gt;
        My awesome robot.
      &lt;/description&gt;
    &lt;/model&gt;
</code>
ファイル<code>~/.gazebo/models/my_robot/model.sdf</code>を作成してください。
<code>bash
  gedit ~/.gazebo/models/my_robot/model.sdf
</code>
また、その中身は以下の内容にしてください。
<code>xml
    &lt;?xml version='1.0'?&gt;
    &lt;sdf version='1.4'&gt;
      &lt;model name="my_robot"&gt;
      &lt;/model&gt;
    &lt;/sdf&gt;
</code>
ここまでで、モデルの基本的なコンテンツを作成しました。<code>model.config</code>ファイルではいくつかの追加メタデータによりロボットを記述しています。<code>model.sdf</code>ファイルにはSDF version 1.4にリンクされたGazeboを使用する<code>my_robot</code>という名前のモデルを初期化するために必要なタグが記述されています。</p>

<h2>モデルの構成を作成する</h2>

<p>このステップでは、長方形の本体に２つの車輪も持つモデルを制作してゆきます。
まずは、シンプルなモデルから始め、段階を踏んでモデルを組み立ててゆくことが重要です。最初のステップはモデルの基本的な形状を作成することです。そのために、まずは、静的なモデルを作成します。つまり、物理エンジンについては無視したものから作成するということです。その結果、モデルは一定の場所から移動せず、構成要素を詳細に整理することができるようになります。</p>

<ol>
<li><p>モデルを静的にするために、<code>~/.gazebo/models/my_robot/model.sdf</code>ファイルに<code>&lt;static&gt;true&lt;/static&gt;</code>を追加してください。すると、以下のようなソースコードになるはずです。
<strong>コピーはしないでください。手書きで追加していくことが、今回のチュートリアルです。</strong>
<code>xml
 &lt;?xml version='1.0'?&gt;
 &lt;sdf version='1.4'&gt;
   &lt;model name="my_robot"&gt;
     &lt;static&gt;true&lt;/static&gt;
   &lt;/model&gt;
 &lt;/sdf&gt;
</code></p></li>
<li><p>長方形のロボット本体のモデルを追加するために、<code>~/.gazebo/models/my_robot/model.sdf</code>を以下のように編集してください。すると以下のようなソースコードになるはずです。<br/>
<strong>コピーはしないでください。手書きで追加していくことが、今回のチュートリアルです。</strong>
<code>xml
 &lt;?xml version='1.0'?&gt;
   &lt;sdf version='1.4'&gt;
     &lt;model name="my_robot"&gt;
     &lt;static&gt;true&lt;/static&gt;
       &lt;link name='chassis'&gt;
         &lt;pose&gt;0 0 .1 0 0 0&lt;/pose&gt;
         &lt;collision name='collision'&gt;
           &lt;geometry&gt;
             &lt;box&gt;
               &lt;size&gt;.4 .2 .1&lt;/size&gt;
             &lt;/box&gt;
           &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name='visual'&gt;
           &lt;geometry&gt;
             &lt;box&gt;
               &lt;size&gt;.4 .2 .1&lt;/size&gt;
             &lt;/box&gt;
           &lt;/geometry&gt;
         &lt;/visual&gt;
       &lt;/link&gt;
   &lt;/model&gt;
 &lt;/sdf&gt;
</code>
これで、大きさが<code>0.4 x 0.2 x 0.1 [m]</code>の<code>箱</code>を作ることが出来ました。衝突要素は衝突判定エンジンに使用されるような形状で定義されています。外観要素はレンダリングエンジンに使用されるような形状で定義されています。ほとんどのケースでは、衝突要素と外観要素は同じです。外観要素と衝突要素が異なる場合というのは、外観要素が複雑なメッシュを使用しており、外観要素より、衝突要素のほうがシンプルになる様な場合です。そのような場合には、パフォーマンスの向上を図るために行います。</p></li>
<li><p>Gazeboを起動し、作成したモデルを確認しましょう。GUIに表示される<strong>insertmodelgui</strong>というボタンから<strong>Insert Model</strong>というボタンを押して作成したモデルをインポートしましょう。以下のコマンドで、Gazeboを起動します。:
<code>bash
 gazebo
</code>
うまく行けば、写真のように白い箱が見えるでしょう。また、地面から<code>1[m]</code>浮かんでいるはずです。<br/>
<img src="/images/2015-01-31-gazebo-make-a-mobile-robot/My_robot_box.png" alt="My_robot_box" /></p></li>
<li><p>今度は、ロボットにキャスターを追加しましょう。物理エンジンにおいて、ジョイントを用いたタイヤを使ってキャスターにするより、摩擦なしの球を使うほうが、モデルを単純化できるため、キャスターは摩擦なしの球にします。それでは、<code>model.sdf</code>に要素を追加しましょう。最終的には、以下のようになるはずです。:<br/>
<strong>コピーはしないでください。手書きで追加していくことが、今回のチュートリアルです。</strong>
<code>xml
    &lt;?xml version='1.0'?&gt;
 &lt;sdf version='1.4'&gt;
   &lt;model name="my_robot"&gt;
     &lt;static&gt;true&lt;/static&gt;
     &lt;link name='chassis'&gt;
       &lt;pose&gt;0 0 .1 0 0 0&lt;/pose&gt;
       &lt;collision name='collision'&gt;
         &lt;geometry&gt;
           &lt;box&gt;
             &lt;size&gt;.4 .2 .1&lt;/size&gt;
           &lt;/box&gt;
         &lt;/geometry&gt;
       &lt;/collision&gt;
       &lt;visual name='visual'&gt;
         &lt;geometry&gt;
           &lt;box&gt;
             &lt;size&gt;.4 .2 .1&lt;/size&gt;
           &lt;/box&gt;
         &lt;/geometry&gt;
       &lt;/visual&gt;
       &lt;collision name='caster_collision'&gt;
         &lt;pose&gt;-0.15 0 -0.05 0 0 0&lt;/pose&gt;
         &lt;geometry&gt;
             &lt;sphere&gt;
             &lt;radius&gt;.05&lt;/radius&gt;
           &lt;/sphere&gt;
         &lt;/geometry&gt;
         &lt;surface&gt;
           &lt;friction&gt;
             &lt;ode&gt;
               &lt;mu&gt;0&lt;/mu&gt;
               &lt;mu2&gt;0&lt;/mu2&gt;
               &lt;slip1&gt;1.0&lt;/slip1&gt;
               &lt;slip2&gt;1.0&lt;/slip2&gt;
             &lt;/ode&gt;
           &lt;/friction&gt;
         &lt;/surface&gt;
       &lt;/collision&gt;
       &lt;visual name='caster_visual'&gt;
         &lt;pose&gt;-0.15 0 -0.05 0 0 0&lt;/pose&gt;
         &lt;geometry&gt;
           &lt;sphere&gt;
             &lt;radius&gt;.05&lt;/radius&gt;
           &lt;/sphere&gt;
         &lt;/geometry&gt;
       &lt;/visual&gt;
     &lt;/link&gt;
   &lt;/model&gt;
 &lt;/sdf&gt;
</code>
ロボットの後方にキャスターが追加されることを確認してください。先ほどの手順と同じようにしてGazeboにモデルをスポーンさせてください。<strong>（Gazeboを再起動する必要はありません。というのも、コードを変更するたびに、Gazeboはモデルをリロードするためです。）</strong><br/>
うまく行けば、以下のようになります。
<img src="/images/2015-01-31-gazebo-make-a-mobile-robot/My_robot_caster.png" alt="My_robot_caster" /></p></li>
<li><p>続いて、左タイヤを追加しましょう。<code>model.sdf</code>を以下のように編集しましょう。<br/>
<strong>コピーはしないでください。手書きで追加していくことが、今回のチュートリアルです。</strong>
<code>xml
     &lt;?xml version='1.0'?&gt;
     &lt;sdf version='1.4'&gt;
       &lt;model name="my_robot"&gt;
         &lt;static&gt;true&lt;/static&gt;
         &lt;link name='chassis'&gt;
           &lt;pose&gt;0 0 .1 0 0 0&lt;/pose&gt;
           &lt;collision name='collision'&gt;
             &lt;geometry&gt;
               &lt;box&gt;
                 &lt;size&gt;.4 .2 .1&lt;/size&gt;
               &lt;/box&gt;
             &lt;/geometry&gt;
           &lt;/collision&gt;
           &lt;visual name='visual'&gt;
             &lt;geometry&gt;
               &lt;box&gt;
                 &lt;size&gt;.4 .2 .1&lt;/size&gt;
               &lt;/box&gt;
             &lt;/geometry&gt;
           &lt;/visual&gt;
           &lt;collision name='caster_collision'&gt;
             &lt;pose&gt;-0.15 0 -0.05 0 0 0&lt;/pose&gt;
             &lt;geometry&gt;
               &lt;sphere&gt;
               &lt;radius&gt;.05&lt;/radius&gt;
             &lt;/sphere&gt;
           &lt;/geometry&gt;
           &lt;surface&gt;
             &lt;friction&gt;
               &lt;ode&gt;
                 &lt;mu&gt;0&lt;/mu&gt;
                 &lt;mu2&gt;0&lt;/mu2&gt;
                 &lt;slip1&gt;1.0&lt;/slip1&gt;
                 &lt;slip2&gt;1.0&lt;/slip2&gt;
               &lt;/ode&gt;
             &lt;/friction&gt;
           &lt;/surface&gt;
         &lt;/collision&gt;
         &lt;visual name='caster_visual'&gt;
           &lt;pose&gt;-0.15 0 -0.05 0 0 0&lt;/pose&gt;
           &lt;geometry&gt;
             &lt;sphere&gt;
               &lt;radius&gt;.05&lt;/radius&gt;
             &lt;/sphere&gt;
           &lt;/geometry&gt;
         &lt;/visual&gt;
       &lt;/link&gt;
       &lt;link name="left_wheel"&gt;
         &lt;pose&gt;0.1 0.13 0.1 0 1.5707 1.5707&lt;/pose&gt;
         &lt;collision name="collision"&gt;
           &lt;geometry&gt;
             &lt;cylinder&gt;
               &lt;radius&gt;.1&lt;/radius&gt;
               &lt;length&gt;.05&lt;/length&gt;
             &lt;/cylinder&gt;
           &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
           &lt;geometry&gt;
             &lt;cylinder&gt;
               &lt;radius&gt;.1&lt;/radius&gt;
               &lt;length&gt;.05&lt;/length&gt;
             &lt;/cylinder&gt;
           &lt;/geometry&gt;
         &lt;/visual&gt;
       &lt;/link&gt;
       &lt;/model&gt;
     &lt;/sdf&gt;
</code>
先ほどと同じように、Gazeboで作成したモデルを確認し、追加したタイヤが正しく付いていることを確認しましょう。ちなみに、さっきまでのモデルは削除しました。(モデルを右クリックし、<strong>Delete</strong>をクリックすれば、削除できます)
<img src="/images/2015-01-31-gazebo-make-a-mobile-robot/My_robot_caster_left_wheel.png" alt="My_robot_caster_left_wheel" /></p></li>
<li><p>左タイヤをコピーして右タイヤを作り、リンクの姿勢にタイヤを合わせましょう。以下のように<code>model.sdf</code>を編集してください。:
<strong>コピーはしないでください。手書きで追加していくことが、今回のチュートリアルです。</strong>
<code>xml
     &lt;?xml version='1.0'?&gt;
     &lt;sdf version='1.4'&gt;
       &lt;model name="my_robot"&gt;
         &lt;static&gt;true&lt;/static&gt;
         &lt;link name='chassis'&gt;
           &lt;pose&gt;0 0 .1 0 0 0&lt;/pose&gt;
           &lt;collision name='collision'&gt;
             &lt;geometry&gt;
               &lt;box&gt;
                 &lt;size&gt;.4 .2 .1&lt;/size&gt;
               &lt;/box&gt;
             &lt;/geometry&gt;
           &lt;/collision&gt;
           &lt;visual name='visual'&gt;
             &lt;geometry&gt;
               &lt;box&gt;
                 &lt;size&gt;.4 .2 .1&lt;/size&gt;
               &lt;/box&gt;
             &lt;/geometry&gt;
           &lt;/visual&gt;
           &lt;collision name='caster_collision'&gt;
             &lt;pose&gt;-0.15 0 -0.05 0 0 0&lt;/pose&gt;
             &lt;geometry&gt;
               &lt;sphere&gt;
               &lt;radius&gt;.05&lt;/radius&gt;
             &lt;/sphere&gt;
           &lt;/geometry&gt;
           &lt;surface&gt;
             &lt;friction&gt;
               &lt;ode&gt;
                 &lt;mu&gt;0&lt;/mu&gt;
                 &lt;mu2&gt;0&lt;/mu2&gt;
                 &lt;slip1&gt;1.0&lt;/slip1&gt;
                 &lt;slip2&gt;1.0&lt;/slip2&gt;
               &lt;/ode&gt;
             &lt;/friction&gt;
           &lt;/surface&gt;
         &lt;/collision&gt;
         &lt;visual name='caster_visual'&gt;
           &lt;pose&gt;-0.15 0 -0.05 0 0 0&lt;/pose&gt;
           &lt;geometry&gt;
             &lt;sphere&gt;
               &lt;radius&gt;.05&lt;/radius&gt;
             &lt;/sphere&gt;
           &lt;/geometry&gt;
         &lt;/visual&gt;
       &lt;/link&gt;
       &lt;link name="left_wheel"&gt;
         &lt;pose&gt;0.1 0.13 0.1 0 1.5707 1.5707&lt;/pose&gt;
         &lt;collision name="collision"&gt;
           &lt;geometry&gt;
             &lt;cylinder&gt;
               &lt;radius&gt;.1&lt;/radius&gt;
               &lt;length&gt;.05&lt;/length&gt;
             &lt;/cylinder&gt;
           &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
           &lt;geometry&gt;
             &lt;cylinder&gt;
               &lt;radius&gt;.1&lt;/radius&gt;
               &lt;length&gt;.05&lt;/length&gt;
             &lt;/cylinder&gt;
           &lt;/geometry&gt;
         &lt;/visual&gt;
       &lt;/link&gt;
       &lt;link name="right_wheel"&gt;
         &lt;pose&gt;0.1 -0.13 0.1 0 1.5707 1.5707&lt;/pose&gt;
         &lt;collision name="collision"&gt;
           &lt;geometry&gt;
             &lt;cylinder&gt;
               &lt;radius&gt;.1&lt;/radius&gt;
               &lt;length&gt;.05&lt;/length&gt;
             &lt;/cylinder&gt;
           &lt;/geometry&gt;
         &lt;/collision&gt;
         &lt;visual name="visual"&gt;
           &lt;geometry&gt;
             &lt;cylinder&gt;
               &lt;radius&gt;.1&lt;/radius&gt;
               &lt;length&gt;.05&lt;/length&gt;
             &lt;/cylinder&gt;
           &lt;/geometry&gt;
         &lt;/visual&gt;
       &lt;/link&gt;
       &lt;/model&gt;
     &lt;/sdf&gt;
</code>
これで、２つの車輪を持った台車を作ることが出来ました。先ほどと同じように、Gazeboで確認してみましょう。以下のようになっているはずです。
<img src="/images/2015-01-31-gazebo-make-a-mobile-robot/My_robot_caster_wheels.png" alt="My_robot_caster_wheels" /></p></li>
<li><p><code>&lt;static&gt;</code>を<code>false</code>にし、左右のタイヤのヒンジを追加しましょう。以下のように<code>model.sdf</code> を編集してください。
<strong>コピーはしないでください。手書きで追加していくことが、今回のチュートリアルです。</strong>
<code>xml
 &lt;?xml version='1.0'?&gt;
 &lt;sdf version='1.4'&gt;
   &lt;model name="my_robot"&gt;
     &lt;static&gt;false&lt;/static&gt;
     &lt;link name='chassis'&gt;
       &lt;pose&gt;0 0 .1 0 0 0&lt;/pose&gt;
       &lt;collision name='collision'&gt;
         &lt;geometry&gt;
           &lt;box&gt;
             &lt;size&gt;.4 .2 .1&lt;/size&gt;
           &lt;/box&gt;
         &lt;/geometry&gt;
       &lt;/collision&gt;
       &lt;visual name='visual'&gt;
         &lt;geometry&gt;
           &lt;box&gt;
             &lt;size&gt;.4 .2 .1&lt;/size&gt;
           &lt;/box&gt;
         &lt;/geometry&gt;
       &lt;/visual&gt;
       &lt;collision name='caster_collision'&gt;
         &lt;pose&gt;-0.15 0 -0.05 0 0 0&lt;/pose&gt;
         &lt;geometry&gt;
           &lt;sphere&gt;
           &lt;radius&gt;.05&lt;/radius&gt;
         &lt;/sphere&gt;
       &lt;/geometry&gt;
       &lt;surface&gt;
         &lt;friction&gt;
           &lt;ode&gt;
             &lt;mu&gt;0&lt;/mu&gt;
             &lt;mu2&gt;0&lt;/mu2&gt;
             &lt;slip1&gt;1.0&lt;/slip1&gt;
             &lt;slip2&gt;1.0&lt;/slip2&gt;
           &lt;/ode&gt;
         &lt;/friction&gt;
       &lt;/surface&gt;
     &lt;/collision&gt;
     &lt;visual name='caster_visual'&gt;
       &lt;pose&gt;-0.15 0 -0.05 0 0 0&lt;/pose&gt;
       &lt;geometry&gt;
         &lt;sphere&gt;
           &lt;radius&gt;.05&lt;/radius&gt;
         &lt;/sphere&gt;
       &lt;/geometry&gt;
     &lt;/visual&gt;
   &lt;/link&gt;
   &lt;link name="left_wheel"&gt;
     &lt;pose&gt;0.1 0.13 0.1 0 1.5707 1.5707&lt;/pose&gt;
     &lt;collision name="collision"&gt;
       &lt;geometry&gt;
         &lt;cylinder&gt;
           &lt;radius&gt;.1&lt;/radius&gt;
           &lt;length&gt;.05&lt;/length&gt;
         &lt;/cylinder&gt;
       &lt;/geometry&gt;
     &lt;/collision&gt;
     &lt;visual name="visual"&gt;
       &lt;geometry&gt;
         &lt;cylinder&gt;
           &lt;radius&gt;.1&lt;/radius&gt;
           &lt;length&gt;.05&lt;/length&gt;
         &lt;/cylinder&gt;
       &lt;/geometry&gt;
     &lt;/visual&gt;
   &lt;/link&gt;
   &lt;link name="right_wheel"&gt;
     &lt;pose&gt;0.1 -0.13 0.1 0 1.5707 1.5707&lt;/pose&gt;
     &lt;collision name="collision"&gt;
       &lt;geometry&gt;
         &lt;cylinder&gt;
           &lt;radius&gt;.1&lt;/radius&gt;
           &lt;length&gt;.05&lt;/length&gt;
         &lt;/cylinder&gt;
       &lt;/geometry&gt;
     &lt;/collision&gt;
     &lt;visual name="visual"&gt;
       &lt;geometry&gt;
         &lt;cylinder&gt;
           &lt;radius&gt;.1&lt;/radius&gt;
           &lt;length&gt;.05&lt;/length&gt;
         &lt;/cylinder&gt;
       &lt;/geometry&gt;
     &lt;/visual&gt;
   &lt;/link&gt;
   &lt;joint type="revolute" name="left_wheel_hinge"&gt;
     &lt;pose&gt;0 0 -0.03 0 0 0&lt;/pose&gt;
     &lt;child&gt;left_wheel&lt;/child&gt;
     &lt;parent&gt;chassis&lt;/parent&gt;
     &lt;axis&gt;
       &lt;xyz&gt;0 1 0&lt;/xyz&gt;
     &lt;/axis&gt;
   &lt;/joint&gt;
   &lt;joint type="revolute" name="right_wheel_hinge"&gt;
     &lt;pose&gt;0 0 0.03 0 0 0&lt;/pose&gt;
     &lt;child&gt;right_wheel&lt;/child&gt;
     &lt;parent&gt;chassis&lt;/parent&gt;
     &lt;axis&gt;
       &lt;xyz&gt;0 1 0&lt;/xyz&gt;
     &lt;/axis&gt;
   &lt;/joint&gt;
   &lt;/model&gt;
 &lt;/sdf&gt;
</code>
２つのジョイントを<code>y</code>方向<code>&lt;xyz&gt;0 1 0&lt;/xyz&gt;</code>に回るようにし、台車に接続します。</p></li>
<li><p>Gazeboを起動し、今作成したモデルを挿入してください。画面右側に写っている白い長方形（カラム）をクリックし、左側にドラッグしてください。</p></li>
<li><p>すると、それぞれのジョイントの様々なコントロールを含むウィンドウが出現するでしょう。(コントロールしたいモデルが選択されていることを確認してください。)</p></li>
<li><p><strong>Force</strong>タブの下にあるコントロールから、それぞれのジョイントの力を<code>約0.1[N・m]</code>に増加させてください。すると、ロボットが動き始めるはずです。(下動画を参考にしてください)</p></li>
</ol>


<div class="youtube-container">
<iframe width="420" height="315" src="https://www.youtube.com/embed/ilkfZQrWuW0" frameborder="0" allowfullscreen></iframe>
</div>


<ol>
<li>おめでとうございまぁす！これで基本的なロボットモデルが作れました!</li>
</ol>


<h2>自分で試してみましょう</h2>

<p>新しいロボットをどんどん作りましょう !</p>

<ul>
<li><p><strong>アイデア : </strong>円柱形の脚の生えた四足の動物なんかどうでしょう。脚は半時計回りのジョイントで胴体にくっつけるなどすると良いでしょう。</p></li>
<li><p><strong>アイデア : </strong>前にシャベルがついた6輪の移動体なんかもどうでしょう。</p></li>
</ul>


<h4>Next >> <a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-attach-meshes/">メッシュを取り付ける</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう ! (モデルをつくる 編) No.2.3]]></title>
    <link href="http://cir-kit.github.io/blog/2015/01/31/gazebo-make-a-model/"/>
    <updated>2015-01-31T19:22:14+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/01/31/gazebo-make-a-model</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>01/25/2015 (Sun)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「Make a model」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<h2>はじめに</h2>

<p>このチュートリアルでは、SDFモデルオブジェクトについて説明します。<br/>
SDFモデルは複雑なロボットの形状を整理して記述することができます。これには、<code>&lt;model&gt;</code><a href="http://gazebosim.org/sdf.html">SDF</a>タグが必要です。また、リンク、ジョイント、物体の衝突情報、外観、プラグインなどの要素が必要です。必要なモデルのが複雑な依存関係にあるとき、modelファイルを作るのは困難になります。このページでは自身のモデルをどうやってビルドするのかについて、いくつかの方法を説明します。</p>

<h2>SDFモデルの構成</h2>

<ul>
<li><p><strong>Links : </strong>リンクにはモデル本体の物理的な情報が記述されています。例えば、タイヤ出会ったりジョイントチェーンのリンクであったりします。それぞれのリンクには多くの衝突判定や外観要素が含まれています。パフォーマンスや安定性を向上させるためには、モデルのリンクの数を減らしてみてください。例えば、テーブルのモデルには、5つのリンク(４つは脚で、１つは天板)がジョイントで結合されています。しかし、これはとても複雑です。特にジョイントが決して動かない場合などです。なので、テーブルを1つのリンクと5つの衝突要素で生成します。</p>

<ul>
<li><p><strong>Collision : </strong>衝突要素は衝突判定に使用される幾何学にカプセル化されています。これは単純な形状（そのほうが好ましい）、もしくは、三角形のメッシュ（こちらの方がよりリソースを必要とします）です。リンクはたくさんの衝突要素が含まれています。</p></li>
<li><p><strong>Visual : </strong>外観要素はリンクの外観部分に使われます。リンクには０もしくはそれ以上の外観要素が含まれています。</p></li>
<li><p><strong>Inertial : </strong>慣性要素は質量や回転慣性行列などのリンクの物理的特性を記述します。</p></li>
<li><p><strong>Sensor : </strong>センサはプラグインの中で使用するための環境データを取得します。リンクには0もしくはそれ以上のセンサが含まれています。</p></li>
</ul>
</li>
<li><p><strong>Joints : </strong>ジョイントは２つのリンクを接続します。回転のやじる地とジョイントの限界のように、親子関係が他の親との間に生成されます。</p></li>
<li><p><strong>Plugins : </strong>プラグインはモデルを制御するためのサードパーティーによって作られた共有ライブラリです。</p></li>
</ul>


<h2>モデルを作る</h2>

<h3>ステップ 1 : メッシュを集める</h3>

<p>モデルを作成する際に必要な３Dメッシュファイルのすべて集めることを意味します。Gazeboは簡単な形状のセット（：箱、球、円柱）を提供しています。もし、あなたのモデルがもう少し複雑であるなら、このまま読み進めてください。<br/>
メッシュはいろいろな方法で生成できます。<a href="http://sketchup.google.com/3dwarehouse/">Google&rsquo;s 3D wharehouse</a>は良い３Dモデルのレポジトリです。あるいは、必要なファイルをすでに持っているかもしれない。いずれにせよ、最終的には、<a href="http://blender.org/">Blender</a>や<a href="http://sketchup.google.com/">Sketchup</a>などの3Dモデラーを使って独自のメッシュを作ることができます。<br/>
GazeboではメッシュファイルはSTLもしくはColladaフォーマットでなければなりません。Colladaフォーマットの方が好ましいです。</p>

<ul>
<li><p><strong>コツ : </strong>原点が中心となるように、３Dモデリングソフトウェアを使ってメッシュを動かしておきましょう。これを行っておけばGazeboの中で、メッシュを動かすのがとtも簡単になります。</p></li>
<li><p><strong>コツ : </strong>Colladaファイルフォーマットでは、マテリアルにメッシュを貼り付けることができます。作成したメッシュの外見の体裁を良くするためにこの仕組みを使いましょう。</p></li>
<li><p><strong>コツ : </strong>メッシュはシンプルにしてください。これは、特に、メッシュを衝突要素として使用する場合に重要です。衝突要素には単純なポリゴンメッシュを使用し、見た目には複雑なポリゴンメッシュを使用するというのが一般的です．すでに提供されている形状（箱、球、円柱）を衝突要素として使用するのも、良い方法です。</p></li>
</ul>


<h3>ステップ 2 : モデルのSDFファイルを作る</h3>

<p>極端に簡単なモデルファイルを作る、もしくはすでにあるモデルファイルをコピーしてくるところから始めてください。機能がすでにわかっているもしくは、デバッグがとても簡単なものからスタートするのが鍵です。<br/>
とても単純な最小単位のボックスモデルファイルを衝突、幾何形状のユニットボックスとして、更に慣性ボックスユニット、外観ユニットとする。：<br/>
モデルファイル<code>box.sdf</code> を生成する。
<code>bash
gedit box.sdf
</code>
以下を<a href="http://bitbucket.org/osrf/gazebo_tutorials/raw/default/build_model/files/box.sdf">box.sdf</a>にコピーしてください。
<code>xml
&lt;?xml version='1.0'?&gt;
&lt;sdf version="1.4"&gt;
&lt;model name="my_model"&gt;
  &lt;pose&gt;0 0 0.5 0 0 0&lt;/pose&gt;
  &lt;static&gt;true&lt;/static&gt;
    &lt;link name="link"&gt;
      &lt;inertial&gt;
        &lt;mass&gt;1.0&lt;/mass&gt;
        &lt;inertia&gt; &lt;!-- interias are tricky to compute --&gt;
          &lt;!-- http://answers.gazebosim.org/question/4372/the-inertia-matrix-explained/ --&gt;
          &lt;ixx&gt;0.083&lt;/ixx&gt;       &lt;!-- for a box: ixx = 0.083 * mass * (y*y + z*z) --&gt;
          &lt;ixy&gt;0.0&lt;/ixy&gt;         &lt;!-- for a box: ixy = 0 --&gt;
          &lt;ixz&gt;0.0&lt;/ixz&gt;         &lt;!-- for a box: ixz = 0 --&gt;
          &lt;iyy&gt;0.083&lt;/iyy&gt;       &lt;!-- for a box: iyy = 0.083 * mass * (x*x + z*z) --&gt;
          &lt;iyz&gt;0.0&lt;/iyz&gt;         &lt;!-- for a box: iyz = 0 --&gt;
          &lt;izz&gt;0.083&lt;/izz&gt;       &lt;!-- for a box: izz = 0.083 * mass * (x*x + y*y) --&gt;
        &lt;/inertia&gt;
      &lt;/inertial&gt;
      &lt;collision name="collision"&gt;
        &lt;geometry&gt;
          &lt;box&gt;
            &lt;size&gt;1 1 1&lt;/size&gt;
          &lt;/box&gt;
        &lt;/geometry&gt;
      &lt;/collision&gt;
      &lt;visual name="visual"&gt;
        &lt;geometry&gt;
          &lt;box&gt;
            &lt;size&gt;1 1 1&lt;/size&gt;
          &lt;/box&gt;
        &lt;/geometry&gt;
      &lt;/visual&gt;
    &lt;/link&gt;
  &lt;/model&gt;
&lt;/sdf&gt;
</code>
Box-geometryの原点はboxの幾何学的中心に置くことに留意してください、なので、地面の水平面と共に更新されるboxの底面を生成するために、地面の水平面の上へboxを引き上げるように、<code>&lt;pose&gt;0 0 0.5 0 0 0&lt;/pose&gt;</code>の原点を加えます。</p>

<ul>
<li><strong>コツ : </strong>上記の例だとシンプルなboxモデルを静的に設置しました。モデルを作る際に有効なのが特徴です。一回でもモデルを生成し、モデルを動かせるようにしたいなら、<code>&lt;static</code>タグを<code>false</code>にしてください。</li>
</ul>


<h3>ステップ 3 : モデルをSDFファイルに加える</h3>

<p>起動中の<code>.sdf</code>ファイルと共に、慎重にモデルを加えていき、少しずつ複雑にしていきましょう。それぞれの要素を加えていく際に、モデルがGUIクライアントできちんと動作していることを確認しながら、加えていきましょう。<br/>
以下に、要素を追加していく際に見習ったほうが良い手順を示します。</p>

<ol>
<li><p>リンクを追加</p></li>
<li><p>衝突要素を追加</p></li>
<li><p>外観要素を追加</p></li>
<li><p>慣性情報を追加</p></li>
<li><p>すべてのリンクを追加し終わるまで、1.に戻る</p></li>
<li><p>すべてのジョイントを追加(使うなら)</p></li>
<li><p>すべてのプラグインを追加（使うなら）</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう ! (モデルの作り方 編) No.2.2]]></title>
    <link href="http://cir-kit.github.io/blog/2015/01/31/gazebo-how-to-contribute-a-model/"/>
    <updated>2015-01-31T19:07:55+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/01/31/gazebo-how-to-contribute-a-model</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>01/25/2015 (Sun)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「How to contribute a model」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<hr />

<p>このチュートリアルでは、すでに<a href="https://www.atlassian.com/ja/software/bitbucket/overview">Bitbucket</a>のアカウントと<a href="http://mercurial.selenic.com/">Mercurial</a>のクライアントを取得している前提で進みます。</p>

<h2>osrf/gazebo_modelsレポジトリをForkし、Cloneする</h2>

<p><a href="https://bitbucket.org/osrf/gazebo_models">https://bitbucket.org/osrf/gazebo_models</a>に行き、画面左側のメニューより、<strong>Fork</strong>を選んでください。オプションはデフォルトをおすすめします。レポジトリをForkした後、Cloneしてください。レポジトリの名前をデフォルト名で選択すると、以下のコマンドでcloneできます：
<code>bash
code$ hg clone https://yourname@bitbucket.org/yourname/gazebo_models
</code>
ただし、<code>yourname</code>の部分は、あなたのBitbucketのユーザーネームです。</p>

<h2>モデルを作る</h2>

<p>gazebo_modelsディレクトリの下にあなたのmodelディレクトリを作ってください。このチュートリアルでは、新たに生成するディレクトリの名前を<code>mymodel</code>とします。生成したディレクトリには、必ず、&#8220;model.config&#8220;`必要です。他のファイル(plugins, makefiles, README, etc&hellip;)も必要になってきます。</p>

<h2><strong>model.config</strong>の中身</h2>

<p>ファイル<code>model.config</code>は使用するのに必要なSDFファイル(モデルの著作情報、原文情報)の詳細情報を提供します。<br/>
単純な<code>model.config</code>は以下のようになっています。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;ldquo;</span>1.0<span class="ni">&amp;rdquo;</span>?&gt;
</span><span class='line'><span class="nt">&lt;model&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Wedge juggler<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sdf</span> <span class="na">version=</span><span class="s">&quot;1.5&quot;</span><span class="nt">&gt;</span>model.sdf<span class="nt">&lt;/sdf&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Evan Drumwright<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;email&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#100;&amp;#114;&amp;#x75;&amp;#x6d;&amp;#64;&amp;#x67;&amp;#119;&amp;#117;&amp;#x2e;&amp;#101;&amp;#x64;&amp;#x75;&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;#100;&amp;#114;&amp;#x75;&amp;#x6d;&amp;#64;&amp;#103;&amp;#x77;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;</span><span class="nt">&lt;/a&gt;&lt;/email&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/author&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;description&gt;</span>
</span><span class='line'>    A ball-in-wedge juggler.
</span><span class='line'>  <span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;/model&gt;</span>
</span><span class='line'><span class="nt">&lt;code&gt;</span>
</span><span class='line'>この<span class="nt">&lt;/code&gt;</span>odel.config<span class="nt">&lt;code&gt;</span>ファイルは<span class="nt">&lt;/code&gt;</span>model.sdf<span class="nt">&lt;code&gt;</span>に記述され、[SDF standard 1.5](http://sdformat.org/spec)に準拠したモデルのシミュレート定義(例えば、外観、慣性、キネマティクス、幾何学特性など)を記述しています。様々なバージョンのモデルを定義することが可能であり、異なるバージョンのGazeboで定義したモデルを使用するときに便利です。
</span><span class='line'>例えば、前述のファイルを変更して、異なる３つのバージョンのSDFをサポートするには、以下のように記述します。:
</span><span class='line'><span class="nt">&lt;/code&gt;</span>xml
</span><span class='line'><span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;ldquo;</span>1.0<span class="ni">&amp;rdquo;</span>?&gt;
</span><span class='line'><span class="nt">&lt;model&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Wedge juggler<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sdf</span> <span class="na">version=</span><span class="s">&quot;1.5&quot;</span><span class="nt">&gt;</span>model.sdf<span class="nt">&lt;/sdf&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sdf</span> <span class="na">version=</span><span class="s">&quot;1.4&quot;</span><span class="nt">&gt;</span>model-1.4.sdf<span class="nt">&lt;/sdf&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Evan Drumwright<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;email&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x64;&amp;#x72;&amp;#x75;&amp;#109;&amp;#64;&amp;#x67;&amp;#119;&amp;#117;&amp;#46;&amp;#101;&amp;#x64;&amp;#x75;&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;#x64;&amp;#x72;&amp;#x75;&amp;#109;&amp;#x40;&amp;#x67;&amp;#x77;&amp;#x75;&amp;#46;&amp;#x65;&amp;#100;&amp;#117;</span><span class="nt">&lt;/a&gt;&lt;/email&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/author&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;description&gt;</span>
</span><span class='line'>    A ball-in-wedge juggler.
</span><span class='line'>  <span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;/model&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>レポジトリにディレクトリ（ファイルも）を追加する</h2>

<p>レポジトリにファイルを追加するときは、以下のように入力します。:
<code>bash
gazebo_modules$ hg add mymodel
</code>
または、もしトラックしたくないファイルがある場合は、以下のようにして、ファイルを別々に追加することができます。:
<code>bash
gazebo_models$ hg add mymodel/model.config
gazebo_models$ hg add mymodel/model.sdf
etc...
</code></p>

<h2>CommitとPublish</h2>

<p>Bitbucketに変更をCommitし、Pushするには、以下のように行います。
<code>bash
gazebo_models$ hg commit
gazebo_models$ hg push
</code></p>

<h3>最終ステップ：　Pullリクエストを作る</h3>

<p>あなたのBitbucketレポジトリ<a href="https://bitbucket.org/yourname/gazebo%5C_models">https://bitbucket.org/yourname/gazebo_models</a>(<code>yourname</code>の部分はあなたのBicbucketのユーザーネームとし、forkにはデフォルト設定を使用しているとします。これは、あなたがforkしたレポジトリにあります)がpullリクエストを生成します。ウェブページの左側にある<strong>Create pull request</strong>をクリックしてください。ただし、<strong>osrf/gazebo_models</strong>が矢印の右側に選択されていることを確認してください。他のオプションなども記入し終わったら、<strong>Create pull request</strong>をクリックしてください。OSRFがあなたのリクエストを評価し、モデルデータベースにあなたの変更を適用し始めるはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ロボットを作ってみよう ! (モデルの構成と必要条件 編) No.2.1]]></title>
    <link href="http://cir-kit.github.io/blog/2015/01/31/gazebo-model-structure-and-requirements/"/>
    <updated>2015-01-31T18:54:31+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/01/31/gazebo-model-structure-and-requirements</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>01/31/2015 (Sat)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第二弾「Build a Robot」。<br/>
このチュートリアルではロボットを作ったり、修正したりします。また、センサ、アクチュエータを搭載した車輪型ロボットを作り、モデルを描画するなどの実践例も行います。<br/>
今回はその「Model structure and requirements」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>BEGINNER</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=build_robot">GAZEBO Tutorial-Build a Robot</a></p>

<h2>はじめに</h2>

<p>GazeboはプログラムもしくはGUIを通して直接シミュレーションを読み込むことができます。あなたがダウンロードしたり、創造したりすれば、モデルはあなたのコンピュータ上に生成されます。このチュートリアルでは、Gazeboのモデルディレクトリ構成とモデルディレクトリに必要なファイルを説明します。<br/>
Gazeboのモデルはダイナミック、キネマティック、ビジュアルプロパティなどにより物理的実体を定義します。さらに、モデルは一つ以上のモデルの挙動に影響を及ぼすようなプラグインを持っています。モデルは単純な形状から複雑なロボット（地面もまたモデルです）のような形状までどんなものでも描画することができます。<br/>
Gazeboはシミュレーションに使用するモデルについて記述したり、記録したりするデータベースに依存しています。モデルデータベースはコミュニティーによって供給される資源です。なので、あなたが作ったモデルを是非アップロードしてください。</p>

<h2>モデルデータベースレポジトリ</h2>

<p>モデルデータベースは<a href="https://bitbucket.org/osrf/gazebo_models">ここ</a>のbitbucketレポジトリにあります。<br/>
このレポジトリは以下のコマンドでcloneすることができます。
<code>bash
hg clone https://bitbucket.org/osrf/gazebo_models
</code></p>

<h2>モデルデータベースの構成</h2>

<p>モデルデータベースは特定のディレクトリとファイル構成でなければなりません。各モデルデータベースのルートディレクトリには一つのディレクトリと、モデルについての情報と共にメタデータ<code>database.cmfig</code>ファイルがあります。それぞれのモデルディレクトリはモデルについてのメタデータを含む<code>model.config</code>ファイルもあります。更に、モデルディレクトリには、モデルや物質、メッシュ、そしてプラグインのSDFもあります。<br/>
この構成は以下のようになっています。（この例では、データベースはmodel_1と呼ばれるモデルだけです。）：
<code>
Database
    ├── database.config：データベースについてのメタデータ。CMakeLists.txtから自動的に生成されます。
    └── model_1：model_1のためのディレクトリ
        ├── materials：texturesとscriptsというサブディレクトリのみで構成されるディレクトリ
        │   ├── scripts：OGREマテリアルスクリプトのディレクトリ
        │   └── textures：イメージファイル（jpg, png, etc...）のディレクトリ
        ├── meshes：COLLADAとSTLファイルのディレクトリ
        ├── model.config：model_1のメタデータ
        ├── model.sdf:model_1のSDFディスクリプション
        └── plugins
</code></p>

<h3>pluginsディレクトリ</h3>

<p>モデルのすべてのプラグインを含むオプションディレクトリです。</p>

<h3>meshesディレクトリ</h3>

<p>モデルのCOLLADAたSTLファイルを含むオプションディレクトリです。</p>

<h3>materialsディレクトリ</h3>

<p>モデルのすべてのテクスチャ、イメージそしてOGREスクリプトを含むサブディレクトリです。テクスチャイメージは<code>textures</code>サブディレクトリに、OGREスクリプトファイルは<code>scripts</code>ディレクトリに配置しなければなりません。</p>

<h3>Database Config</h3>

<p>モデルデータベースのルートディレクトリにある<code>database.config</code>です．このファイルには、モデルのライセンス情報、データベースの名前、有効なモデルのリストが書かれています。<br/>
<strong>NOTE : <code>database.config</code>ファイルはオンラインレポジトリを利用するときのみ必要です。ローカル（オフライン）コンピュータにすべてのモデルがアルバイは、<code>database.config</code>は必要ありません。</strong><br/>
ファイル<code>database.config</code> のフォーマットは以下のようになっています。：</p>

<pre><code class="xml">&lt;?xml version='1.0'?&gt;
&lt;database&gt;
  &lt;name&gt;name_of_this_database&lt;/name&gt;
  &lt;license&gt;Creative Commons Attribution 3.0 Unported&lt;/license&gt;
  &lt;models&gt;
    &lt;uri&gt;file://model_directory&lt;/uri&gt;
  &lt;/models&gt;
&lt;/database&gt;
</code></pre>

<ul>
<li><p>name
データベースの名前です。GUIや他のツールで使用されます。</p></li>
<li><p>license
データベースにあるモデルのライセンスです。<a href="http://creativecommons.org/licenses/by/3.0">Creative Commons Attribution 3.0 Unported</a>ライセンスを強く推奨します。</p></li>
<li><p>models
データベースにあるすべてのモデルのURIリストです。</p></li>
<li><p>uri
モデルのURIです。これは、<code>file://model_directory_name</code>のように記述しなければなりません。</p></li>
</ul>


<h3>Model Config</h3>

<p>それぞれのモデルにはメタデータがおいてあるルートディレクトリに<code>model.config</code>ファイルが必ず配置されています。<br/>
また、<code>model.config</code>は以下のようなフォーマットで記述されます。:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;ldquo;</span>1.0<span class="ni">&amp;rdquo;</span>?&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;model&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>My Model Name<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sdf</span> <span class="na">version=</span><span class="s">&#39;1.5&#39;</span><span class="nt">&gt;</span>model.sdf<span class="nt">&lt;/sdf&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>My name<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;email&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6e;&amp;#97;&amp;#x6d;&amp;#x65;&amp;#64;&amp;#101;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#97;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#101;&amp;#x73;&amp;#115;&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;#x6e;&amp;#97;&amp;#109;&amp;#x65;&amp;#64;&amp;#101;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#46;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#114;&amp;#101;&amp;#115;&amp;#115;</span><span class="nt">&lt;/a&gt;&lt;/email&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/author&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;description&gt;</span>
</span><span class='line'>    A description of the model
</span><span class='line'>  <span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;/model&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><p>name(必須)
モデルの名前です。</p></li>
<li><p>version(必須)
モデルのバージョンです。
<strong>Note : これは、モデルが使用しているSDFのバージョンではありません。SDFの情報は、<code>model.sdf</code>ファイルに記述されています。</strong></p></li>
<li><p>sdf(必須)
モデルをのSDFもしくはURDFファイルの名前です。ファイルが使用するSDFのバージョン情報を定義します。ただし、URDFを使用する場合は、必須ではありません。様々なの<code>sdf</code>要素は、様々なSDFバージョンをサポートするために使用されます。</p></li>
<li><p>author(必須)</p>

<ul>
<li><p>name(必須)
モデルの編集者の名前です。</p></li>
<li><p>email（必須）
編集者のEmailアドレスです。</p></li>
</ul>
</li>
<li><p>description(必須)
モデルのdescriptionには以下の要素が必要です。</p>

<ul>
<li><p>モデルが何であるか(例えば、robot、table、cup、etc&hellip;)</p></li>
<li><p>プラグインが何２お売るのか（モデルの機能）</p></li>
</ul>
</li>
<li><p>depend(任意)
モデルのすべての依存関係です。これは他のモデルであることが多いです。</p></li>
<li><p>model(任意)</p>

<ul>
<li><p>uri(必須)
モデルの依存関係のURIです。</p></li>
<li><p>version(必須)
モデルのバージョンです。</p></li>
</ul>
</li>
</ul>


<h3>Model SDF</h3>

<p>すべてのモデルにはモデルのシミュレータを記述するフォーマット情報(Simulator Description Format)が記述されている、<code>model.sdf</code>が必要です。このSDFについてもっと知りたい場合には、<a href="http://sdformat.org/">SDFのウェブサイト</a>を参照してください。</p>
]]></content>
  </entry>
  
</feed>
