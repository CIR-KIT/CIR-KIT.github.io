<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gazebo | 九州工業大学 CIR-KIT Blog]]></title>
  <link href="http://cir-kit.github.io/blog/categories/gazebo/atom.xml" rel="self"/>
  <link href="http://cir-kit.github.io/"/>
  <updated>2015-03-04T05:17:30+09:00</updated>
  <id>http://cir-kit.github.io/</id>
  <author>
    <name><![CDATA[CIR-KIT Members]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[No.6-9:GazeboをROSに繋ぐ (ROS Plugin 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-plugin/"/>
    <updated>2015-03-04T04:45:47+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-plugin</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/22/2015 (Sun)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「ROS Plugin」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : ROSプラグイン</h2>

<p>このチュートリアルでは、とても基本的なROSに関するGazeboのプラグインを作ってゆきます。</p>

<h2>ROSパッケージを作る</h2>

<p>あなたの<code>catkin</code>ワークスペースに新しいROSパッケージを作成してください。:</p>

<pre><code class="bash">cd ~/catkin_ws
catkin_create-pkg gazebo_tutorials gazebo_ros roscpp
</code></pre>

<h2>プラグインを作る</h2>

<p><a href="http://gazebosim.org/tutorials?tut=plugins_hello_world&amp;cat=write_plugin">ここ</a>で説明したような簡単なプラグインを制作し、<code>gazebotutorials/src/simpleworld_plugin.cpp</code>として保存してください。:</p>

<pre><code class="cpp">#include &lt;gazebo/common/Plugin.hh&gt;
#include &lt;ros/ros.h&gt;

namespace gazebo
{
class WorldPluginTutorial : public WorldPlugin
{
public:
  WorldPluginTutorial() : WorldPlugin()
  {
  }

  void Load(physics::WorldPtr _world, sdf::ElementPtr _sdf)
  {
    // Make sure the ROS node for Gazebo has already been initialized                                                                                    
    if (!ros::isInitialized())
    {
      ROS_FATAL_STREAM("A ROS node for Gazebo has not been initialized, unable to load plugin. "
        &lt;&lt; "Load the Gazebo system plugin 'libgazebo_ros_api_plugin.so' in the gazebo_ros package)");
      return;
    }

    ROS_INFO("Hello World!");
  }

};
GZ_REGISTER_WORLD_PLUGIN(WorldPluginTutorial)
}
</code></pre>

<h2><code>CMakeLists.txt</code>をアップデートする</h2>

<p><code>gazebo_tutorials/CMakeLists.txt</code>を開き、以下のようにしてください。:</p>

<pre><code class="cmake">cmake_minimum_required(VERSION 2.8.3)
project(gazebo_tutorials)

# Load catkin and all dependencies required for this package
find_package(catkin REQUIRED COMPONENTS 
  roscpp 
  gazebo_ros 
)

# Depend on system install of Gazebo
find_package(gazebo REQUIRED)

link_directories(${GAZEBO_LIBRARY_DIRS})
include_directories(${Boost_INCLUDE_DIR} ${catkin_INCLUDE_DIRS} ${GAZEBO_INCLUDE_DIRS})

add_library(${PROJECT_NAME} src/simple_world_plugin.cpp)
target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES} ${GAZEBO_LIBRARIES})

catkin_package(
  DEPENDS 
    roscpp 
    gazebo_ros 
)
</code></pre>

<h2><code>package.xml</code>をアップデートする</h2>

<p>以下の行をタグの中に追加し(タグがなければ、タグも追加)、<code>gazebo_tutorials/package.xml</code>をアップデートしてください。</p>

<pre><code class="xml">  &lt;gazebo_ros plugin_path="${prefix}/lib" gazebo_media_path="${prefix}" /&gt;
</code></pre>

<h2>プラグインをコンパイルする</h2>

<p>catkinをあなたのワークスペースで実行して、プラグインをビルドしてください。</p>

<pre><code class="bash">cd ~/catkin_ws
catkin_make
</code></pre>

<h2>Worldファイルを作る</h2>

<p>以下のファイルを<code>gazebo_tutorials/worlds/hello.World</code>として保存してください。:</p>

<pre><code class="xml">&lt;?xml version="1.0" ?&gt;
&lt;sdf version="1.4"&gt;
  &lt;world name="default"&gt;
    &lt;include&gt;
      &lt;uri&gt;model://ground_plane&lt;/uri&gt;
    &lt;/include&gt;

    &lt;include&gt;
      &lt;uri&gt;model://sun&lt;/uri&gt;
    &lt;/include&gt;

    &lt;!-- reference to your plugin --&gt;
    &lt;plugin name="gazebo_tutorials" filename="libgazebo_tutorials.so"/&gt;
  &lt;/world&gt;
&lt;/sdf&gt;
</code></pre>

<h2>Launchファイルを作る</h2>

<p>以下のファイルを<code>gazebo_tutorials/launch/hello.launch</code>として作成してください。:</p>

<pre><code class="xml">&lt;launch&gt;
  &lt;!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --&gt;
  &lt;include file="$(find gazebo_ros)/launch/empty_world.launch"&gt;
    &lt;arg name="world_name" value="$(find gazebo_tutorials)/worlds/hello.world"/&gt;
    &lt;!-- more default parameters can be changed here --&gt;
  &lt;/include&gt;
&lt;/launch&gt;
</code></pre>

<h2>プラグインを実行する</h2>

<pre><code class="bash">roslaunch gazebo_tutorials hello.launch
</code></pre>

<p>空のGazeboが開き、ターミナルには以下のような文字列が表示されるはずです。:</p>

<pre><code class="bash"> INFO ros.gazebo_tutorials: Hello World!
</code></pre>

<h2>テンプレートから始める</h2>

<p>GazeboとROSのプラグインについて手っ取り早く理解するには、テンプレートが有効です。:</p>

<p><a href="https://github.com/ros-simulation/gazebo_ros_pkgs/blob/hydro-devel/gazebo_plugins/src/gazebo_ros_template.cpp">gazeborostemplate.cpp</a></p>

<h2>機能性を追加する</h2>

<p>GazeboとROSで有用な効果を果たすプラグインを作るために、<a href="http://gazebosim.org/tutorials/?cat=write_plugin">プラグインについて</a>のチュートリアルを読むことをおすすめします。</p>

<h2>ROSのノードの注意点</h2>

<p>もし、ROSノードが<code>Load()</code>関数によって初期化されているなら、すべての<code>gazebo-ros</code>プラグインは、チェックするべきです。これについては、<a href="http://answers.gazebosim.org/question/1493/rosinit-needed-for-ros-gazebo-plugin/">issues</a>でも議論されています。ROSノードの初期化は、実行した時に自動的に初期化されます。</p>

<pre><code class="bash">rosrun gazeboros gazebo
</code></pre>

<p>もしくは、<code>empty.world</code>のlaunchファイルを使用してください。<br/>
<code>gazeboros/src/gazeborosapi_plugin.cpp</code>は<code>ros::init()</code>をコールするGazeboの中にのみあるべきです。</p>

<h2>次のステップ</h2>

<p>様々な、Gazebo-ROS間の仕組みについては、<a href="">発展的なROSの統合</a>をご覧ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-8:GazeboをROSに繋ぐ (ROS Communication 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/02/gazebo-ros-communication/"/>
    <updated>2015-03-02T21:11:56+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/02/gazebo-ros-communication</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/22/2015 (Sun)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「ROS Communication」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : ROS Communication</h2>

<p>Gazeboはユーザにシミュレートされたworldの様々な角度を取得したり修正したりできるROSのAPIを提供しています。以下のセクションでは、シミュレーションのworldと物体を操るための効果について説明します。GazeboのためのROSメッセージとサービスの完全なリストはこのチュートリアルに書いてあります。</p>

<h2>必要条件</h2>

<p>これから説明する例を実行していきたいなら、RRBotのセットアップは、<a href="http://cir-kit.github.io/blog/2015/02/17/gazebo-urdf-in-gazebo/">GazeboにおけるURDF</a>のチュートリアルで述べているということを念頭に置いてください。このチュートリアルでは、いろいろな方法を使ってコーラの缶を<strong>蹴ります</strong>。<br/>
また、Gazeboが以下のコマンドですでにlaunchされていると仮定して話を進めます。:</p>

<pre><code class="bash">roscore &amp;
rosrun gazebo_ros gazebo
</code></pre>

<p>ただし、これから紹介するコマンドを打った後に、Gazeboを再起動する必要があるかもしれません。</p>

<h2><code>gazeborosapi_plugin</code>について</h2>

<p><code>gazeboros</code>パッケージと共に配置されている<code>gazeborosapi_plugin</code>は、<code>gazebo</code>と呼ばれるROSのノードを初期化します。これは、これから説明する様なROSのインターフェースを供給するために、ROSコールバックスケジュラー(<code>message passing</code>)とGazeboのインターナショナルスケジュラーを統合しています。このROSのAPIはユーザーがROSを超えたシミュレーション環境の詳細を扱うのと同じように、環境のモデルの姿勢の内観とスポーンを行うことを可能にします。<br/>
また、このプラグインは<code>gzserver</code>によってのみ読み込まれます。</p>

<h2><code>gazeborospaths_plugin</code>について</h2>

<p>２つ目の<code>gazeborospath_plugin</code>という名前のプラグインはGazeboがROSリソースを探す(例えば、ROSパッケージのパス名を解決する)ことを可能にする<code>gazebo ros</code>パッケージの中で利用可能です。<br/>
このプラグインは<code>gzserver</code>と<code>gzclient</code>の両方によって読み込まれます。</p>

<h2>Gazeboのpublishしたパラメータ</h2>

<p>Parameters</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> /usesimtime </td>
<td style="text-align:center;"> Bool </td>
<td style="text-align:center;"> ROSがpublishされたROS timeのための<code>/clock</code>トピックを使うかどうか定義します </td>
</tr>
</tbody>
</table>


<p>Gazeboは、もしシミュレーション時間が<code>/usertime</code>パラメータに使用されるべきなら、他のアプリケーション(とりわけRviz)を定義するためにROSパラメータサーバーを使用します。これは、あなたが<code>gazebo_ros</code>を起動した時に、Gazeboが自動で設定すべきことです。<br/>
もし、ROSシステムをシミュレーション同期時間と共に提供するために、<code>gazebo_ros</code>がROSの<code>/clock</code>トピックをpublishしているなら、<code>usesimtime</code>は<code>true</code>です。シミュレーション時間については<a href="http://www.ros.org/wiki/roscpp/Overview/Time">ROS C++ Time</a>をご覧ください。</p>

<h3>値をクリックする</h3>

<p>パラメータに何が設定されているか見るためには、以下のコマンドを実行してください。:</p>

<pre><code class="bash">rosparam get /use_sim_time 
</code></pre>

<h2>Gazeboが購読するトピック</h2>

<p>Topics</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/setlinkstate </td>
<td style="text-align:center;">gazebomsgs/LinkState </td>
<td style="text-align:center;"> リンクの姿勢(<code>pose/twist</code>)を設定します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/setmodelstate </td>
<td style="text-align:center;">gazebomsgs/ModelState </td>
<td style="text-align:center;"> モデルの姿勢(<code>pose/twist</code>)を設定します。</td>
</tr>
</tbody>
</table>


<h3>トピックを通じたシミュレーションにおけるモデルのPoseとTwist</h3>

<p><a href="http://www.ros.org/wiki/Topics">Topics</a>は<code>pose</code>の設定動作が完了するのを待つことなく、迅速にモデルの<code>pose</code>と<code>twist</code>を設定するのに使うことができます。そのようにするために、求められる<a href="http://www.ros.org/doc/api/gazebo/html/msg/ModelState.html">model state message</a>を<code>/gazebo/setmodelstate</code>トピックにpublishします。例えば、<code>topics</code>を通じて<code>pose</code>の設定をテストするために、オンラインデータベースからモデルをスポーンさせてコーラの缶をシミュレーションに追加します。:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -database coke_can -gazebo -model coke_can -y 1
</code></pre>

<p>そして<code>/gazebo/setmodelstate</code>トピックにpublishすることで、コーラの缶の姿勢を設定します。:</p>

<pre><code class="bash">rostopic pub -r 20 /gazebo/set_model_state gazebo_msgs/ModelState '{model_name: coke_can, pose: { position: { x: 1, y: 0, z: 2 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: { x: 0, y: 0, z: 0 }, angular: { x: 0, y: 0, z: 0}  }, reference_frame: world }'
</code></pre>

<p>すると以下のように、蹴ってくれと言わんばかりに(まあ、今から蹴るんですが)RRBotの前にコーラの缶が浮いているのを確認できるはずです。<br/>
ただし、以下のように、RRBotを追加するため、これまでに説明したroslaunchを使っています。:</p>

<pre><code class="bash">roslaunch rrbot_gazebo rrbot_world.launch
</code></pre>

<p><img src="/images/2015-03-02-gazebo-ros-communication/rrbot-test-1.png" alt="rrbot-test-1" /></p>

<h2>Gazeboがpuvlishするトピック</h2>

<p>Topics</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> /clock </td>
<td style="text-align:center;">rosgraphmsgs/Clock </td>
<td style="text-align:center;"> シミュレーション時間を<code>/usertime</code>パラメータと共にpublishします。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/linkstates </td>
<td style="text-align:center;">gazebomsgs/LinkStates </td>
<td style="text-align:center;"> シミュレーション中のすべてのリンクの状態をpublishします。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/modelstates </td>
<td style="text-align:center;">gazebo_msgs/ModelStates </td>
<td style="text-align:center;"> シミュレーション中のすべてのモデルの状態をpublishします。</td>
</tr>
</tbody>
</table>


<h3>Topicを使ってモデルとリンクの姿勢を訂正する</h3>

<p>Gazeboはworld座標系に関するシミュレーション中の物体のposeとtwistの情報を含む、<code>/gazebo/linkstates</code>と<code>/gazebo/modelstates</code>トピックをpublishしています。これらの挙動は、以下のコマンドを実行することで確認できます。</p>

<pre><code class="bash">rostopic echo -n 1 /gazebo/model_states
</code></pre>

<p>もしくは</p>

<pre><code class="bash">rostopic echo -n 1 /gazebo/link_states
</code></pre>

<p>繰り返すには、<code>link</code>が慣性、外観、衝突プロパティの定義された剛体として定義される必要があります。一方、<code>model</code>はリンクとジョイントの衝突要素として定義されます。<code>model</code>の状態は標準的な<code>link</code>の状態であります。URDFが木構造で与えられており、モデルのカノニカルリンクは自身のルートリンクによって定義されます。</p>

<h2>サービス : シミュレーション中のモデルの削除と作成</h2>

<p>以下のサービスでは、シミュレーション中のモデルを削除したり作成したりできます。:</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/spawnurdfmodel </td>
<td style="text-align:center;">gazebomsgs/SpawnModel </td>
<td style="text-align:center;"> Universal Robotic Description Format (URDF)をスポーンするために、このサービスを使います。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/spawnsdfmodel </td>
<td style="text-align:center;">gazebomsgs/SpawnModel </td>
<td style="text-align:center;"> Gazeboに記述されるSimulmulation Description Format (SDF)モデルをスポーンするために、このサービスを使います。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/deletemodel </td>
<td style="text-align:center;">gazebomsgs/DeleteModel </td>
<td style="text-align:center;"> シミュレーションからモデルを削除することができます。</td>
</tr>
</tbody>
</table>


<h3>モデルをスポーンする</h3>

<p><code>spawnmodel</code>と呼ばれるスクリプトはモデルの<code>gazeboros</code>によって呼び出されるスポーンサービスをコールするために提供されています。モデルをサービスコールを使ってスポーンするための最も実践的な方法は<code>roslaunch</code>ファイルを使うことです。詳細は、<a href="http://cir-kit.github.io/blog/2015/02/15/gazebo-using-roslaunch/">roslaunchを使う</a>というチュートリアルに書いてあります。URDFやSDFをGazeboに追加するために<code>spawn_model</code>を使う方法はたくさんあります。以下はそのうちのいくつかの例です。:<br/>
URDFをファイルからスポーンする - まず最初に<code>.Xacro</code>ファイルを<code>.xml</code>ファイルに変換し、スポーンします。:</p>

<pre><code class="bash">rosrun xacro xacro `rospack find rrbot_description`/urdf/rrbot.xacro &gt;&gt; `rospack find rrbot_description`/urdf/rrbot.xml
rosrun gazebo_ros spawn_model -file `rospack find rrbot_description`/urdf/rrbot.xml -urdf -y 1 -model rrbot1 -robot_namespace rrbot1
</code></pre>

<p><code>roslaunch</code>と<code>xacro</code>を使ったパラメータサーバーからのURDF: <a href="http://cir-kit.github.io/blog/2015/02/15/gazebo-using-roslaunch/">roslaunchを使う</a>をご覧ください。<br/>
ローカルモデルデータベースからのSDF:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -file `echo $GAZEBO_MODEL_PATH`/coke_can/model.sdf -sdf -model coke_can1 -y 0.2 -x -0.3
</code></pre>

<p>オンラインモデルデータベースからのSDF:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -database coke_can -sdf -model coke_can3 -y 2.2 -x -0.3
</code></pre>

<p>名前空間、<code>trimesh</code>プロパティ、ジョイントポジション、RPYオリエンテーションを含む<code>spawn_model</code>のための利用可能な引数をすべて見るには、以下を実行してください。:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -h
</code></pre>

<h3>モデルを削除する</h3>

<p>すでにGazeboの中にあるモデルの削除は、物体に与えたモデルの名前を覚えている限りは簡単です。もし、RRBotを前のセクションで記述したように、<code>rrbot1</code>と名付けているなら、以下のコマンドでそれを削除できます。:</p>

<pre><code class="bash">rosservice call gazebo/delete_model '{model_name: rrbot1}'
</code></pre>

<h2>サービス : 状態とプロパティのセッティング</h2>

<p>以下のサービスでは、シミュレーション中の物体やシミュレーションについての状態やプロパティの情報を設定することができます。:</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/setlinkproperties </td>
<td style="text-align:center;">gazebomsgs/SetLinkProperties</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setphysicsproperties </td>
<td style="text-align:center;">gazebomsgs/SetPhysicsProperties</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setmodelstate </td>
<td style="text-align:center;">gazebomsgs/SetModelState</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setmodelconfiguration </td>
<td style="text-align:center;">gazebomsgs/SetModelConfiguration </td>
<td style="text-align:center;"> モデルのジョイントポジションをダイナミクスなしで設定できるようになります。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/setjointproperties </td>
<td style="text-align:center;">gazebomsgs/SetJointProperties</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setlinkstate </td>
<td style="text-align:center;">gazebomsgs/SetLinkState</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setlinkstate </td>
<td style="text-align:center;">gazebomsgs/LinkState</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setmodelstate </td>
<td style="text-align:center;">gazebomsgs/ModelState</td>
<td></td>
</tr>
</tbody>
</table>


<h3>モデルの姿勢を設定する例</h3>

<p><code>/gazebo/setmodelstate</code>サービスを使い、RRBotでコーラの缶を蹴ってみましょう !<br/>
もし、まだシミュレーションにコーラの缶を追加していないのなら、以下のコマンドを実行してください。:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -database coke_can -gazebo -model coke_can -y 1
</code></pre>

<p>これは、Gazeboもしくはオンラインモデルデータベース(インターネット接続が必要です)を通じて利用可能になるようパッケージされていなければなりません。尚、コーラの缶がどこにあっても問題はありません。<br/>
続いて、コーラの缶をRRBotのポジションに動かすためのサービスリクエストをコールしましょう。:</p>

<pre><code class="bash">rosservice call /gazebo/set_model_state '{model_state: { model_name: coke_can, pose: { position: { x: 0.3, y: 0.2 ,z: 0 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }'
</code></pre>

<p>すると、以下のようになるはずです。</p>

<p><img src="/images/2015-03-02-gazebo-ros-communication/rrbot-test-2.png" alt="rrobt-test-2" /></p>

<p>続いて、RRBotを以下のコマンドを使って動かしてみましょう。</p>

<pre><code class="bash">rosservice call /gazebo/set_model_state '{model_state: { model_name: rrbot, pose: { position: { x: 1, y: 1 ,z: 10 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }'
</code></pre>

<p>うまく行けば、コーラの缶がどこかに飛んでゆくでしょう。(゜Д゜)ノ&#8221;<br/>
うまいう行かなかったら、やり直してみましょう。これはチュートリアルなんですから。<br/>
ちなみに、以下の動画みたいになります。以下の動画では、缶が転がってます。私も何回かやりましたが、缶が気持ちよく飛んでゆくこともありましたw</p>

<p>&lt; div class=&ldquo;youtube-container&rdquo;></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/A8tGFOlgRdg" frameborder="0" allowfullscreen></iframe>


<p></div></p>

<h2>サービス : 状態とプロパティの取得</h2>

<p>以下のサービスでは、シミュレーション中の物体やシミュレーションについての状態やプロパティの情報を取得することができます。:</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/getmodelproperties </td>
<td style="text-align:center;">gazebomsgs/GetModelProperties</td>
<td style="text-align:center;"> シミュレーション中のモデルのプロパティを返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getmodelstate </td>
<td style="text-align:center;">gazebomsgs/GetModelState </td>
<td style="text-align:center;"> シミュレーション中のモデルの状態を返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getworldproperties </td>
<td style="text-align:center;">gazebomsgs/GetWorldProperties </td>
<td style="text-align:center;"> シミュレーションworldのプロパティを返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getjointproperties </td>
<td style="text-align:center;">gazebomsgs/GetJointProperties </td>
<td style="text-align:center;"> シミュレーション中のジョイントのプロパティを返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getlinkproperties </td>
<td style="text-align:center;">gazebomsgs/GetLinkProperties </td>
<td style="text-align:center;"> シミュレーション中のリンクのプロパティを返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getlinkstate </td>
<td style="text-align:center;">gazebomsgs/GetLinkState </td>
<td style="text-align:center;"> シミュレーション中のリンクの状態を返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getphysicsproperties </td>
<td style="text-align:center;">gazebomsgs/GetPhysicsProperties </td>
<td style="text-align:center;"> シミュレーション中で使用される物理エンジンのプロパティを返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/linkstates </td>
<td style="text-align:center;">gazebomsgs/LinkStates </td>
<td style="text-align:center;"> world座標の完全なリンクの状態をpublishします。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/modelstates </td>
<td style="text-align:center;">gazebo_msgs/ModelStates </td>
<td style="text-align:center;"> world座標の完全なモデルの状態をpublishします。</td>
</tr>
</tbody>
</table>


<h2>注意</h2>

<p>Gazebo中のリンクの名前は<code>modelname::body_name</code>の名前表記にスコープされます。</p>

<h3>モデルの状態を取得する例</h3>

<p>さて、すでにコーラの缶を<strong>蹴った</strong>ことでしょう。今度は、それがどのくらい飛んだのか知りたいですね。これまでの例を使い(同じシミュレーションを実行して)、以下のサービスコールを使ってコーラの缶の<code>pose</code>と<code>twist</code>を取得しましょう。:</p>

<pre><code class="bash">rosservice call gazebo/get_model_state '{model_name: coke_can}'
</code></pre>

<p>この結果は、ロボットの蹴った具合によって変わりますが、以下のような感じになるはずです。:</p>

<pre><code class="bash">pose: 
  position: 
    x: -33.4741996929
    y: 1.72965811349
    z: 0.0715116701823
  orientation: 
    x: 0.52144600413
    y: 0.478438115917
    z: -0.471063379854
    w: -0.526583636448
twist: 
  linear: 
    x: 5.74579911953e-07
    y: 0.000217124920081
    z: 9.67915822705e-06
  angular: 
    x: -0.0029562892652
    y: 7.77750570372e-06
    z: 4.16767016512e-05
success: True
</code></pre>

<p>私のロボットは 33 [m]飛ばしました。あなたのはどうでしたか ?</p>

<h3>シミュレーションworldとオブジェクトプロパティを取得する</h3>

<p>以下のコマンドで、worldの中のモデルのリスト(<code>ground_plane</code>, <code>coke cane</code>, <code>rrbot</code>)を取得することができます。:</p>

<pre><code class="bash">rosservice call gazebo/get_world_properties
</code></pre>

<p>すると、以下のような結果が得られるはずです。</p>

<pre><code class="bash">sim_time: 59.62
model_names: ['ground_plane', 'rrbot', 'coke_can']
rendering_enabled: True
success: True
status_message: GetWorldProperties: got properties
</code></pre>

<p>また、以下のコマンドで特定のモデルの詳細を取得できます。</p>

<pre><code class="bash">rosservice call gazebo/get_model_properties '{model_name: rrbot}'
</code></pre>

<p>すると、以下の様な結果が得られるはずです。</p>

<pre><code class="bash">parent_model_name: ''
canonical_body_name: ''
body_names: ['link1', 'link2', 'link3']
geom_names: ['link1_collision', 'link2_collision', 'link3_collision', 'link3_collision_camera_link', 'link3_collision_hokuyo_link']
joint_names: ['fixed', 'joint1', 'joint2']
child_model_names: []
is_static: False
success: True
status_message: GetModelProperties: got properties
</code></pre>

<h2>サービス : 力のコントロール</h2>

<p>以下のサービスでは、シミュレーション中のボディやジョイントへの力とねじりを適用することができます。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/applybodywrench </td>
<td style="text-align:center;">gazebomsgs/ApplyBodyWrench </td>
<td style="text-align:center;"> シミュレーション中のボディにねじりを適用します。同じボディに適用されるすべてのアクティブなねじりは累積します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/applyjointeffort </td>
<td style="text-align:center;">gazebomsgs/ApplyJointEffort </td>
<td style="text-align:center;"> シミュレーション中のジョイントへの力を適用します。同じジョイントに適用されるすべてのアクティブな力は累積します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/clearjointforces </td>
<td style="text-align:center;">gazebomsgs/ClearJointForces </td>
<td style="text-align:center;"> ジョイントへ適用されている力をクリアします。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/clearbodywrenches </td>
<td style="text-align:center;">gazebomsgs/ClearBodyWrenches </td>
<td style="text-align:center;"> ボディへ適用されているねじりをクリアします。</td>
</tr>
</tbody>
</table>


<h3>ねじりをリンクに適用する</h3>

<p>Gazeboのボディへのねじりの適用を説明するために、重力をなくして物体をスポーンさせてみましょう。すでにコーラの缶が追加されていることを確認してください。:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -database coke_can -gazebo -model coke_can -y 1
</code></pre>

<p>続いて、<code>/gazebo/setphysicsproperties</code>サービスコールを送り、すべての軸の重力をなくしましょう。:</p>

<p>Then to turn off gravity send a service call to /gazebo/setphysicsproperties with no gravity in any of the axis:</p>

<pre><code class="bash">rosservice call /gazebo/set_physics_properties "
time_step: 0.001
max_update_rate: 1000.0
gravity: 
  x: 0.0
  y: 0.0
  z: 0.0
ode_config: 
  auto_disable_bodies: False
  sor_pgs_precon_iters: 0
  sor_pgs_iters: 50
  sor_pgs_w: 1.3
  sor_pgs_rms_error_tol: 0.0
  contact_surface_layer: 0.001
  contact_max_correcting_vel: 100.0
  cfm: 0.0
  erp: 0.2
  max_contacts: 20"
</code></pre>

<p><code>/gazebo/applybodywerch</code>サービスを呼び、コーラの缶の原点に１秒間、0.01 [Nm]のトルクを適用しましょう。すると、コーラの缶が、X軸に対して正の方向にスピンするのが確認できるはずです。:</p>

<pre><code class="bash">rosservice call /gazebo/apply_body_wrench '{body_name: "coke_can::link" , wrench: { torque: { x: 0.01, y: 0 , z: 0 } }, start_time: 10000000000, duration: 1000000000 }'
</code></pre>

<p>今度は、コーラの缶の原点に1秒間、-0.01 [Nm]のトルクを適用し、缶の回転を止めましょう。:</p>

<pre><code class="bash">rosservice call /gazebo/apply_body_wrench '{body_name: "coke_can::link" , wrench: { torque: { x: -0.01, y: 0 , z: 0 } }, start_time: 10000000000, duration: 1000000000 }'
</code></pre>

<p>通常、負のトルクは、曖昧な定義であることが多いです。すべてのアクティブなねじりをボディに適用するには、以下のようなコマンドを実行してください。:</p>

<pre><code class="bash">rosservice call /gazebo/clear_body_wrenches '{body_name: "coke_can::link"}'
</code></pre>

<h3>シミュレーション中のジョイントに力を適用する</h3>

<p>ジョイントにトルクを適用するために、<code>/gazebo/applyjointeffort</code>をコールしてください。:</p>

<pre><code class="bash">rosservice call /gazebo/apply_joint_effort "joint_name: 'joint2'
effort: 10.0
start_time:
  secs: 0
  nsecs: 0
duration:
  secs: 10
  nsecs: 0"
</code></pre>

<p>するとリンクが回り始めるはずです。<br/>
特定のジョイントの力をクリアするためには、以下のコマンドをコールしてください。:</p>

<pre><code class="bash">rosservice call /gazebo/clear_joint_forces '{joint_name: joint2}'
</code></pre>

<h2>サービス : シミュレーションコントロール</h2>

<p>以下のサービスでは、シミュレーション中の物理エンジンを一時停止したり解除したリアできます。:</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/pausephysics </td>
<td style="text-align:center;">stdsrvs/Empty </td>
<td style="text-align:center;"> 物理エンジンのアップデートを一時停止します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/unpausephysics </td>
<td style="text-align:center;">stdsrvs/Empty </td>
<td style="text-align:center;"> 物理エンジンのアップデートを再開します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/resetsimulation </td>
<td style="text-align:center;">stdsrvs/Empty </td>
<td style="text-align:center;"> モデルのポーズをリセットします。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/resetworld </td>
<td style="text-align:center;">stdsrvs/Empty </td>
<td style="text-align:center;"> 時間を含むすべてのシミュレーションをリセットします。</td>
</tr>
</tbody>
</table>


<h3>物理エンジンのアップデートを一時停止する</h3>

<p>飛んでゆくコーラの缶のナイスなスクリーンショットを撮りたいとしましょう。いや、そうだと言ってください。そんな時には、以下のコマンドをコールすることで、物理エンジンを一時停止することができます。:</p>

<pre><code class="bash">rosservice call gazebo/pause_physics
</code></pre>

<p>シミュレーションが一時停止するとき、シミュレーション時間が停止し、物体も静的になります。しかし、Gazeboの内部アップデートループ(カスタムのダイナミクスプラグインアップデートなど)は依然として動いており、シミュレーション時間は変わっていません。これは、シミュレーションタイムをアップデートしないことで抑制されているのです。シミュレーションを再開するために、以下のコマンドをコールして物理エンジンを再開してください。:</p>

<pre><code class="bash">rosservice call gazebo/unpause_physics
</code></pre>

<h2>次のステップ</h2>

<p>Gazeboのための独自のROSプラグインの作り方について学んでください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-7:GazeboをROSに繋ぐ (ROS Control 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/22/gazebo-ros-control/"/>
    <updated>2015-02-22T03:55:56+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/22/gazebo-ros-control</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/22/2015 (Sun)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「ROS control」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : ROS Control</h2>

<p>このチュートリアルでは、あなたのロボットのジョイントを動かすために、シミュレートされたコントローラを設定してゆきます。これにより、<a href="http://moveit.ros.org/">MoveIt!</a>のようなプランナーのための正しいROSのインターフェースを提供することができるようになります。また、ROSの新しいスタンダードコントローラインターフェースである<a href="http://ros.org/wiki/ros_control"><code>ros_control</code></a>パッケージを使用してゆきます。</p>

<h3><code>ros_control</code>について</h3>

<p>次に進む前に、<a href="http://ros.org/wiki/ros_control"><code>ros_control</code></a>ドキュメントの概要を読んでおくことをおすすめします。
About ros_control</p>

<h3>Gazeboと<code>ros_control</code>のデータフロー</h3>

<p>Gazeboでロボットのコントローラをシミュレートすることで、<code>ros_control</code>の使い方とシンプルなGazeboのプラグインアダプタの使い方を習得することができます。シミュレーション、ハードウェア、コントローラとトランスミッションの間の関係の概要は以下のようになっています。尚、以下の画像は公式サイトのものです。:
<img src="/images/2015-02-21-gazebo-ros-control/Gazebo_ros_transmission.png" alt="Gazebo_ros_transmission" /></p>

<h2>必要条件</h2>

<p>このチュートリアルでは、これまでのチュートリアルで紹介したコンセプトの多くを再編してゆきます。プラグイン構成のための例として、<a href="http://cir-kit.github.io/blog/2015/02/17/gazebo-urdf-in-gazebo/">GazeboにおけるURDF</a>のチュートリアルの中で設定したRRBotを再び使用してゆきます。<br/>
すでに<code>ros_control</code>と<code>ros_controllers</code>をインストールしていることを確認してください。また、それらの依存関係は、<a href="http://cir-kit.github.io/blog/2015/02/14/gazebo-installing-gazebo-ros-pkgs/">Gazebo_ros_packageをインストールする</a>で説明しています。</p>

<h2>使い方</h2>

<h3>URDFに<code>transmission</code>要素を追加する</h3>

<p>あなたのロボットで<code>ros_control</code>を使用するには、URDFにいくつかの追加要素が必要です。<code>&lt;transmission&gt;</code>要素はリンクアクチュエータやジョイントで使用されます。正確なXMLフォーマットのためには、<a href="http://ros.org/wiki/urdf/XML/Transmission"><code>&lt;transmission&gt;</code>の仕様</a>をご覧ください。<br/>
実行途中の<code>gazebo_ros_control</code>の目的のために、<code>transmission</code>タグの中で唯一重要な情報は以下のとおりである。:</p>

<ul>
<li><code>&lt;joint name=""&gt;</code> : URDFにあるジョイントの名前と一致していなければなりません。</li>
<li><code>&lt;type&gt;</code> ; <code>transmission</code>のタイプです。現在では、<code>transmission_interface/SimpleTransmission</code>のみが実行されます。(遠慮無く追加してください)</li>
<li><code>&lt;hardwareInterface&gt;</code> : <code>&lt;actuator&gt;</code>タグでは、<code>gazebo_ros_control</code>プラグインに姿勢、速度、実行インターフェースなどをロードするためのハードウェアインターフェースを知らせます。現在では、実行インターフェースのみが実行されます。(遠慮無く追加してください)</li>
</ul>


<p>残りの名前と要素は現在は、無視されています。</p>

<h3><code>gazebo_ros_control</code>プラグインを追加する</h3>

<p><code>transmission</code>タグへの追加では、正確に<code>transmission</code>タグを記述し、適用するハードウェアインターフェースとコントローラマネージャを読み込む、URDFにGazeboのプラグインを追加する必要があります。デフォルトの<code>gazebo_ros_control</code>プラグインはシンプルですが、<code>ros_control</code>とGazeboの間のカスタムのロボットハードウェアインターフェースを使えるようにするために、追加のプラグインを展開することができます。<br/>
デフォルトプラグインXMLをあなたのURDFに追加する必要があります。</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so"&gt;
    &lt;robotNamespace&gt;/MYROBOT&lt;/robotNamespace&gt;
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<p><code>gazebo_ros_control</code>の<code>&lt;plugin&gt;</code>タグには以下の子要素もあります。:</p>

<ul>
<li><code>&lt;robotNamespace&gt;</code> : プラグインの初期化に使用される名前空間です。デフォルトでは、URDF/SDFのロボット名となります。</li>
<li><code>&lt;controlPeriod&gt;</code> : コントローラアップデートの周期です。デフォルトでは、Gazeboの手記です。</li>
<li><code>&lt;robotParam&gt;</code> : パラメータサーバーの<code>robot_description</code>(URDF)のロケーションです。デフォルトでは、<code>/robot_description</code>です。</li>
<li><code>&lt;robotSimType&gt;</code> : 使用されるカスタムのロボットシミュレーションインターフェースの<code>pluginlib</code>の名前です(詳しくは、続きをご覧ください)。デフォルトでは、<code>DefaultRobotHWSim</code>となります。</li>
</ul>


<h4>デフォルトの<code>gazebo_ros_control</code>の挙動</h4>

<p>デフォルトで、<code>&lt;robotSimType&gt;</code>タグなしだと、<code>gazebo_ros_control</code>はURDF
外の<code>ros_control-based</code>コントローラと通信するのに必要なすべての情報を手に入れようとします。これは、ほとんどの場合十分なことで、少なくとも、始めの内は良いことです。<br/>
デフォルトの挙動では、以下の<code>ros_control</code>インターフェースを提供しています。:</p>

<ul>
<li>hardware_interface::JointStateInterface</li>
<li>hardware_interface::EffortJointInterface</li>
<li>hardware_interface::VelocityJointInterface - not fully implemented</li>
</ul>


<h4>発展 : カスタムの<code>gazebo_ros_control</code>シミュレーションプラグイン</h4>

<p><code>gazebo_ros_control</code>のGazeboプラグインは、より複雑なメカニズム(非線形バネ、リンクゲージ、etc&hellip;)のための<code>ros_control</code>とGazebo間のカスタムインターフェースを実行するため、<code>pluginlib-based</code>のインターフェースも提供しています。<br/>
そういったプラグインでは、シミュレートされている<code>ros_control hardware_interface::RobotHW</code>を動かす<code>gazebo_ros_control::RobotHWSim</code>を継承していなければなりません。<code>RobotHWSim</code>では、Gazeboシミュレータの中で、ジョイントプロパティを読み、命令するためのAPIレベルのアクセスを提供します。<br/>
それぞれの<code>RobotHWSim</code>のサブクラスはURDFモデルで定義されており、ロボットモデルが読み込まれた時に読み込まれます。例えば、以下のXMLはデフォルトプラグインを読み込みます。(<code>&lt;robotSimType&gt;</code>タグを使っていない時と同じ挙動です。):</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so"&gt;
    &lt;robotNamespace&gt;/MYROBOT&lt;/robotNamespace&gt;
    &lt;robotSimType&gt;gazebo_ros_control/DefaultRobotHWSim&lt;/robotSimType&gt;
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3>RRBotの例</h3>

<p>Gazeboので動作させたいジョイントのために、以下<code>&lt;transmission&gt;</code>ブロックシミュレータに追加します。<code>rrbot.xacro</code>ファイルを開くと、最後の方に、以下のようなソースコードを確認できるはずです。:</p>

<pre><code class="xml">  &lt;transmission name="tran1"&gt;
    &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt;
    &lt;joint name="joint1"/&gt;
    &lt;actuator name="motor1"&gt;
      &lt;hardwareInterface&gt;EffortJointInterface&lt;/hardwareInterface&gt;
      &lt;mechanicalReduction&gt;1&lt;/mechanicalReduction&gt;
    &lt;/actuator&gt;
  &lt;/transmission&gt;

  &lt;transmission name="tran2"&gt;
    &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt;
    &lt;joint name="joint2"/&gt;
    &lt;actuator name="motor2"&gt;
      &lt;hardwareInterface&gt;EffortJointInterface&lt;/hardwareInterface&gt;
      &lt;mechanicalReduction&gt;1&lt;/mechanicalReduction&gt;
    &lt;/actuator&gt;
  &lt;/transmission&gt;
</code></pre>

<p>すべての<code>&lt;transmission&gt;</code>タグを読む<code>rrbot.gazebo</code>の中に、<code>gazebo_ros_control</code>プラグインも確認できます。:</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so"&gt;
    &lt;robotNamespace&gt;/rrbot&lt;/robotNamespace&gt;
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3><code>ros_controls</code>パッケージを作る</h3>

<p>続いて、Gazeboと通信する<code>ros_contorl</code>コントローラのためのconfigurationファイルとlaunchファイルを作る必要があります。</p>

<h4>新しいパッケージを作る</h4>

<pre><code class="bash">cd ~/catkin_ws
catkin_create_pkg MYROBOT_control ros_control ros_controllers
cd MYROBOT_control
mkdir config
mkdir launch
</code></pre>

<h4><code>.yaml</code>のconfigファイルを作る</h4>

<p>PIDゲインとコントローラ設定はroslaunchファイルを通じてparamサーバによって読み込まれるyamlファイルに保存しなければなりません。あなたの<code>MYROBOT_control</code>パッケージのconfigフォルダで、以下のRRBotの例をあなたのロボットに適用してください。</p>

<pre><code class="yaml">rrbot:
  # Publish all joint states -----------------------------------
  joint_state_controller:
    type: joint_state_controller/JointStateController
    publish_rate: 50  

  # Position Controllers ---------------------------------------
  joint1_position_controller:
    type: effort_controllers/JointPositionController
    joint: joint1
    pid: {p: 100.0, i: 0.01, d: 10.0}
  joint2_position_controller:
    type: effort_controllers/JointPositionController
    joint: joint2
    pid: {p: 100.0, i: 0.01, d: 10.0}
</code></pre>

<p>これらのコントローラについては、次のセクションをご覧ください。</p>

<h4>roslaunchファイルを作る</h4>

<p><code>ros_control</code>コントローラを起動するためのroslaunchファイルを作ってください。launchフォルダで、<code>MYROBOT/_contorol.launch</code>ファイルを作り、以下のRRBotの例をあなたのロボットに適用してください。:</p>

<pre><code class="xml">&lt;launch&gt;

  &lt;!-- Load joint controller configurations from YAML file to parameter server --&gt;
  &lt;rosparam file="$(find rrbot_control)/config/rrbot_control.yaml" command="load"/&gt;

  &lt;!-- load the controllers --&gt;
  &lt;node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="/rrbot" args="joint1_position_controller joint2_position_controller joint_state_controller"/&gt;

  &lt;!-- convert joint states to TF transforms for rviz, etc --&gt;
  &lt;node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen"&gt;
    &lt;remap from="/joint_states" to="/rrbot/joint_states" /&gt;
  &lt;/node&gt;

&lt;/launch&gt;
</code></pre>

<h5>説明</h5>

<p>第一行目の、<code>rosparam</code>では、パラメータサーバーにyamlのconfigurationファイル(次のセクションで説明します)を読み込むことでコントローラ設定を読み込んでいます。<br/>
<code>controller_spawner</code>ノードは、RRBotのための2つのジョイントポジションコントローラを<code>ros_control</code>コントローラマネージャのためのサービスコールを生成するpythonスクリプトを実行することで起動します。サービスコールでは、あなたの望むコントローラのコントローラマネージャを呼び出します。また、<code>hardware_interfaces</code>とすべてのジョイントの姿勢をpublishし、<code>/joint_states</code>トピックを配信する三番目のコントローラも呼び出します。スポナーはroslaunchとの仕様のためのスクリプトを補助しているだけです。<br/>
最後の行は、<code>joint_state_controller</code>からの<code>/joint_states</code>メッセージをlistenする<code>robot_state_publisher</code>ノードを起動し、起動したら、座標変換を<code>/tf</code>へpublishします。これにより、Rvizでシミュレートされるロボットを他のタスクがしているのと同じように観察することができます。</p>

<h3>roslaunchを使ってコントローラを起動する</h3>

<p>以下のコマンドを実行し、<code>ros_control</code>でコントロールされるRRBotをテストしてください。<br/>
RRBotシミュレーションを起動する。:</p>

<pre><code class="bash">roslaunch rrbot_gazebo rrbot_world.launch
</code></pre>

<p>2つ目のlaunchファイルを実行し、2つのジョイントのためのコントローラを読み込んでください。</p>

<pre><code class="bash">roslaunch rrbot_control rrbot_control.launch 
</code></pre>

<p>尚、個々でエラーが出る場合は、<code>ros_control</code>と<code>ros_controller</code>がインストールされていない可能性があります。<em>*Indigo</em>を使用している場合は、以下のようにしてこれらをインストールしましょう。:</p>

<pre><code class="bash">sudo apt-get install ros-indigo-ros-control ros-indigo-ros-controller 
</code></pre>

<h4>サービスコールをマニュアルで使う</h4>

<p><code>rrbot_control.yaml</code>ファイルをパラメータサーバーで読み込んだら、サービスリクエストを通じてコントローラをマニュアルで読み込むことができます。いつものroslaunchと同じように、これらをインクルードします。:<br/>
コントローラを読み込む:</p>

<pre><code class="bash">rosservice call /rrbot/controller_manager/load_controller "name: 'joint1_position_controller'"
rosservice call /rrbot/controller_manager/load_controller "name: 'joint2_position_controller'"
</code></pre>

<p>コントローラを起動する:</p>

<pre><code class="bash">rosservice call /rrbot/controller_manager/switch_controller "{start_controllers: ['joint1_position_controller','joint2_position_controller'], stop_controllers: [], strictness: 2}"
</code></pre>

<p>コントローラを停止する:</p>

<pre><code class="bash">rossevice call /rrbot/controller_manager/switch_controller "{start_controllers: [], stop_controllers: ['joint1_position_controller','joint2_position_controller'], strictness: 2}"
</code></pre>

<p>尚、これらひと通りの手順は、Gazeboとサービスを通じて通信する場合の例です。これを行うには、上記の通り、launchファイルにて<code>rrbot_control.yaml</code>を読み込んでおく必要があります。詳しくは、<a href="http://wiki.ros.org/ja/ROS/Tutorials/UnderstandingServicesParams">ROSのサービスとパラメータを理解する</a>をご覧ください。</p>

<h3>マニュアルでコマンドの例を送る</h3>

<p>ジョイントコマンドをテストとして以下のコマンドで送ります。:</p>

<pre><code class="bash">rostopic pub -1 /rrbot/joint1_position_controller/command std_msgs/Float64 "data: 1.5"
rostopic pub -1 /rrbot/joint2_position_controller/command std_msgs/Float64 "data: 1.0"
</code></pre>

<p>もちろん、上記のコマンドを送る前に、以下のコマンドでシミュレーションとコントローラが起動していることが前提です。:</p>

<pre><code class="bash">roslaunch rrbot_gazebo rrbot_world.launch
roslaunch rrbot_control rrbot_control.launch 
</code></pre>

<p>コマンドを送ると、以下のように、２つのジョイントが一定の場所で静止するはずです。
<img src="/images/2015-02-21-gazebo-ros-control/rostopic-test-1.png" alt="rostopic-test-1" /></p>

<h3>コマンドの送信のためのRQTを使う</h3>

<p>このセクションでは、あなたのコントローラのパフォーマンスを視覚的に表示し、コントローラが持つであろうゲイン(一部にはPIDゲインも)やパラメータを調整するのを助けるツールについて見てゆきます。また、ROSの<code>plugin-based</code>なユーザーインターフェースである<a href="http://www.ros.org/wiki/rqt">RQT</a>を使います。なので、まずはそれがインストールされていることを確認しておいてください。<br/>
シミュレーションと<code>ros_control</code>を起動したまま、RQTを起動してください。:</p>

<pre><code class="bash">rosrun rqt_gui rqt_gui
</code></pre>

<p>すると、以下のような画面が開いたはずです。
<img src="/images/2015-02-21-gazebo-ros-control/rqt_gui-1.png" alt="rqt_gui-1" /></p>

<h4>コマンドpublisherを追加する</h4>

<p>以下キャプチャ画面を参考にして、<code>Publisher</code>プラグインを追加し、あなたがpublishしたいそれぞれのコントローラを命令するドロップダウンボックスからトピックを選択してください。RRBotの場合、下記のコントローラを追加してください。:</p>

<pre><code>/rrbot/joint1_position_controller/command
</code></pre>

<p><img src="/images/2015-02-21-gazebo-ros-control/rqt_gui-2.png" alt="rqt_gui-2" />
<img src="/images/2015-02-21-gazebo-ros-control/rqt_gui-3.png" alt="rqt_gui-3" /></p>

<ul>
<li>完了したら、緑色のプラスの形をしたボタンを押してください。</li>
<li>トピック名の左にあるチェックボックスをクリックし、トピックpublisherを有効にしてください。</li>
<li>できたら、<code>rate</code>の値を100に設定してください。(これはコマンドを送る周波数です。つまり、今回は100 [Hz]ということです)</li>
<li>続いて、データを生の状態で確認するために、トピックを実行してください。生データが再生されている途中で、<code>join1</code>の<code>expression</code>のラジアンの値を変えてみてください。ただし、 RRBotの例ではジョイントは連続であるので、<code>joint limits</code>は存在しませんので、どんな値を入れても動きます。もしこのチュートリアルを行っているなら、RRBotをいろいろな位置に振ることができるようになるはずです。</li>
<li>続いて、同じ状態のボックスの中で、サイン波を使って自動で値を変えます。<code>expression</code>の部分を以下のようにしてみてください。:</li>
</ul>


<pre><code>sin(i/100)
</code></pre>

<p>うまく行くと、以下の動画のようになっているはずです。</p>

<div class="youtube-container">
<iframe width="560" height="315" src="https://www.youtube.com/embed/iaHBCLFAz_w" frameborder="0" allowfullscreen></iframe>
</div>


<p>さらなる応用的なコントロールのために、ロボットの正確な<code>expression</code>にサイン波をpublishするよう構成することができます。:</p>

<pre><code>sin(i/rate*speed)*diff + offset
</code></pre>

<p>ただし、変数については、以下のとおりです。:</p>

<ul>
<li>i : RQTの時間変数</li>
<li>rate : 式が評価される周波数です。これはトピックpublisherの周波数と同じであるべきです。おすすめの値は100です。</li>
<li>speed : ジョイントをどれくらいの早さで動かすのかという指標です。1から始めるとゆっくりと動き始めます。</li>
<li>upper_limit と lower_limits : コントローラによってコントロールされる、ハードウェアの<code>joint limits</code>です。</li>
<li>diff = (upper_limit - lower_limit)/2</li>
<li>offset = upper_limit-diff</li>
</ul>


<h4>コントローラのパフォーマンスを閲覧する</h4>

<p>先ほどと同じ手順で、プロットプラグインをRQTに追加し、上記で選んだトピックpublisherと同じトピックを追加します。:</p>

<pre><code>/rrbot/joint1_position_controller/command/data
</code></pre>

<p>緑色の追加ボタンをクリックしてください。すると、サイン波がスクリーン上にプロットされるのが確認できるはずです。<br/>
スクリーンは以下のようになっているはずです。<br/>
また、他のデータもプロットしてみてください。例として、目標値との偏差をプロットするには、以下のトピックを追加します。:</p>

<pre><code>/rrbot/joint1_position_controller/state/error
</code></pre>

<p>ここまでできたら、以下の様なグラフが表示されるはずです。尚、以下の画像では、プロットの表示範囲を時間軸方向に広げることで、見やすくしています。<br/>
<img src="/images/2015-02-21-gazebo-ros-control/rqt_gui-4.png" alt="rqt_gui-4" /></p>

<p><strong>注意 : </strong>RQTのプロットプラグインは、起動した後、しばらく(>1 min)バグが発生することが確認されています。直線が描かれるだけのバグです。現在の解決方法は、プラグイン画面の右上にある、青いリフレッシュボタンを押すことです。</p>

<h4>PIDゲインを調整する</h4>

<p>最終的に、あなたのロボットに適用可能と考えられる、適切で独創的であり、統合されたPIDコントローラゲインのチューニングを行うために、<a href="http://ros.org/wiki/dynamic_reconfigure">dynamic reconfigure</a>を使います。<br/>
これまでと同じように、以下の様なPIDゲインのコントロールウィンドウを表示するために、<code>Dynamic Reconfigure</code>プラグインをRQTに追加し、サブオプションを見るために、<strong>Expand All</strong>をクリックしてください。コントローラにPIDを使うなら、<strong>pid</strong>オプションを使ってください。以下のように、5段階のスライダをクリックして、コントローラを調節します。コントローラのパフォーマンスが望みのものとなるまで、値を調整してください。</p>

<p><img src="/images/2015-02-21-gazebo-ros-control/rqt_gui-5.png" alt="rqt_gui-5" /></p>

<h4>RQTの図を保存するために、roslaunchを使う</h4>

<p>RRBotのpre-configuredなRQTの図は以下のコマンドで簡単にlaunchすることができます。</p>

<pre><code class="bash">roslaunch rrbot_control rrbot_rqt.launch
</code></pre>

<p>これは、あなたのロボットに対しても、テンプレートとして使うことができます。</p>

<h3>RvizをGazeboシミュレーションにつなぐ</h3>

<p>シミュレーション中のロボットにコマンドを送るために、<code>ros_control</code>を使う時に、Gazeboからのロボットの姿勢を読むために、<code>ros_control</code>ジョイントステートコントローラを使用することもできます。良いシミュレータの前提的なアイデアはシミュレーションの中でするのと同じように、本物のハードウェア上で同じソフトウェアが使えるということです。そのスタートとなるのは、本物のハードウェアでも同じように使用する、Rviz上でシミュレートされるあなたのロボットを可視化することです。<br/>
これまで説明してきたような、<code>joint_state_controller</code>を、<code>rosparam</code>や<code>roslaunch</code>ファイルで起動する準備ができているとするなら、次のステップは、Rvizを起動することです。:</p>

<pre><code class="bash">rosrun rviz rviz
</code></pre>

<p>起こりうるエラーを解決するために、<strong>Global Options</strong>にある<strong>Fixed Frame</strong>を<strong>world</strong>に変更してください。<br/>
次に<strong>RobotModel</strong>ディスプレイタイプをRvizに追加すると、以下のように、GazeboでシミュレートしているロボットがRvizでも見れるはずです！<br/>
尚、以下の例ではカメライメージとレーザースキャンのイメージを追加しています。</p>

<div class="youtube-container">
<iframe width="560" height="315" src="https://www.youtube.com/embed/FOMUt9Gm2NM" frameborder="0" allowfullscreen></iframe>
</div>


<h2>デモコード</h2>

<p>このチュートリアルにあるRRBotで使用されているコードの例は<a href="https://github.com/ros-simulation/gazebo_ros_demos"><code>gazebo_ros_demos</code></a>レポジトリで使用可能です。</p>

<h2>次のステップ</h2>

<p><a href="http://cir-kit.github.io/blog/2015/03/02/gazebo-ros-communication/">ROS Communication</a>というチュートリアルの中でGazeboとともに使うことのできるROSメッセージコールとサービスコールについて学んでください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-6:GazeboをROSに繋ぐ (ROSにおけるGazeboのプラグイン 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/19/gazebo-gazebo-plugins-in-ros/"/>
    <updated>2015-02-19T03:23:21+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/19/gazebo-gazebo-plugins-in-ros</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/19/2015 (Thu)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「Gazebo Plugins in ROS」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : ROSとともにGazeboのプラグインを使う</h2>

<p>Gazeboのプラグインはあなたのrおボットモデルにより良い機能性を提供し、ROSのセンサ出力やモータ入力のためのメッセージやサービスコールと繋ぐことができる。このチュートリアルでは、すでに存在するプラグインをセットアップするやり方と、ROSとともに動作する独自のプラグインを作る方法を説明します。</p>

<h2>前提条件</h2>

<p><a href="https://cir-kit.github.io/blog/2015/02/17/gazebo-urdf-in-gazebo/">前回のURDFに関するチュートリアル</a>で述べた時のRRBotのセットアップを行っていることを確認してください。</p>

<h2>プラグインを追加する</h2>

<p>プラグインをURDFのメイン要素の多くに追加することができます。 - プラグインが注目し、目的としているものに依存している<code>&lt;robot&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;joint&gt;</code>などのことです。プラグインをあなたのURDFの主な要素に追加するには、<code>&lt;gazebo&gt;</code>要素にある<code>&lt;plugin&gt;</code>タグをラップする必要があります。</p>

<h3><code>&lt;robot&gt;</code>要素にプラグインを追加する</h3>

<p>以下に示すのは、URDFにある<code>&lt;robot&gt;</code>要素へのプラグインの例である。:</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="differential_drive_controller" filename="libdiffdrive_plugin.so"&gt;
    ... plugin parameters ...
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<p>上記の例のプラグインは<code>&lt;robot&gt;</code>要素に追加されている。なぜなら他の<code>&lt;gazebo&gt;</code>要素やプロパティをと同じように、もし<code>reference="x"</code>がないということは、<code>&lt;robot&gt;</code>全体を参照していると定義しているのである。<a href="http://gazebosim.org/sdf/">SDF</a>フォーマットでは、<code>&lt;model&gt;</code>を参照すると考えられる。</p>

<h3><code>&lt;link&gt;</code>要素にプラグインを追加する</h3>

<p><code>&lt;robot&gt;</code>要素での<code>&lt;plugin&gt;</code>と同じように、<code>reference"your_link_name"</code>とすることで、<code>&lt;link&gt;</code>に<code>&lt;plugin&gt;</code>要素を追加することが可能です。</p>

<pre><code class="xml">&lt;gazebo reference="your_link_name"&gt;
  &lt;plugin name="your_link_laser_controller" filename="libgazebo_ros_laser.so"&gt;
    ... plugin parameters ...
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3><code>&lt;joint&gt;</code>要素にプラグインを追加する</h3>

<p>これはレファレンスの名前を除く、<code>&lt;link&gt;</code>の項で説明したものと同じで、<code>link</code>の部分を<code>joint</code>とします。</p>

<h2><code>gazebo_plugins</code>で利用可能なプラグイン</h2>

<p>以下のセクションでは、<code>gazebo_plugins</code>で利用可能なすべてのプラグインについて説明します。私達はこれらを閲覧することをおすすめします。というのも、さらなる詳細については最初のプラグインの組み合わせによってわかりづらくなっており、様々なプラグインのドキュメントからいくつかのコンセプトを学ぶことができるからです。<br/>
それぞれのセクションの名前はプラグインのクラスの名前によって決定されています。例えば、<strong>Block Laser</strong>は<code>GazeboRosBlockLaser</code>クラスから来ており、それは<code>gazebo_plugins/src/gazebo_ros_block_laser.cpp</code>の中にあります。<br/>
もしいくつかのセクションの空白があるなら、その筆者がすべてのプラグインを説明するのがめんどくさくなったということであり、そういったプラグインの使い方に関する知識と経験を積むことでそれを埋め合わさなければなりません。</p>

<h3>カメラ</h3>

<p><strong>注意 : </strong><code>CamderaInfo</code>や<code>Image ROS messages</code>を<code>sensormsgs</code>として記述し、publishすることにより、<code>wge100camera</code>のようなカメラをシミュレーションする際には、ROSインターフェースを用意してください。</p>

<h2>RRBotの例</h2>

<p>このセクションでは、RRBotの振り子型の腕の先に付けられた単純なRGBカメラについて検証してゆきます。以下の説明で、<code>rrbot.xacro</code>を見てゆくことができます。このブロックの最初の要素は、特別なリンクと、カメラを表すURDFファイルに追加されているジョイントについてです。カメラを表現するために、ここでは単純な赤い箱を使います。しかし、通常はより良い表現のために、メッシュファイルを使うことができます。</p>

<pre><code class="xml">  &lt;joint name="camera_joint" type="fixed"&gt;
    &lt;axis xyz="0 1 0" /&gt;
    &lt;origin xyz="${camera_link} 0 ${height3 - axel_offset*2}" rpy="0 0 0"/&gt;
    &lt;parent link="link3"/&gt;
    &lt;child link="camera_link"/&gt;
  &lt;/joint&gt;

  &lt;!-- Camera --&gt;
  &lt;link name="camera_link"&gt;
    &lt;collision&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
    &lt;box size="${camera_link} ${camera_link} ${camera_link}"/&gt;
      &lt;/geometry&gt;
    &lt;/collision&gt;

    &lt;visual&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
    &lt;box size="${camera_link} ${camera_link} ${camera_link}"/&gt;
      &lt;/geometry&gt;
      &lt;material name="red"/&gt;
    &lt;/visual&gt;

    &lt;inertial&gt;
      &lt;mass value="1e-5" /&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" /&gt;
    &lt;/inertial&gt;
  &lt;/link&gt;
</code></pre>

<p>Xacroのプロパティもまた以下のように定義されています。:</p>

<pre><code class="xml">  &lt;xacro:property name="camera_link" value="0.05" /&gt; &lt;!-- Size of square 'camera' box --&gt;
</code></pre>

<p>RRBotをlaunchし、アームの先に取り付けられたカメラを確認することができるはずです。</p>

<p>続いて、カメラの機能性を与え、ROSメッセージにイメージをpublishするGazeboのプラグインについて検証して行きます。RRBotでは、<code>rrbot.gazebo</code>ファイルにGazeboの要素を記述するという決まりに従ってきました。:</p>

<pre><code class="xml">  &lt;gazebo reference="camera_link"&gt;
    &lt;sensor type="camera" name="camera1"&gt;
      &lt;update_rate&gt;30.0&lt;/update_rate&gt;
      &lt;camera name="head"&gt;
        &lt;horizontal_fov&gt;1.3962634&lt;/horizontal_fov&gt;
        &lt;image&gt;
          &lt;width&gt;800&lt;/width&gt;
          &lt;height&gt;800&lt;/height&gt;
          &lt;format&gt;R8G8B8&lt;/format&gt;
        &lt;/image&gt;
        &lt;clip&gt;
          &lt;near&gt;0.02&lt;/near&gt;
          &lt;far&gt;300&lt;/far&gt;
        &lt;/clip&gt;
        &lt;noise&gt;
          &lt;type&gt;gaussian&lt;/type&gt;
          &lt;!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. --&gt;
          &lt;mean&gt;0.0&lt;/mean&gt;
          &lt;stddev&gt;0.007&lt;/stddev&gt;
        &lt;/noise&gt;
      &lt;/camera&gt;
      &lt;plugin name="camera_controller" filename="libgazebo_ros_camera.so"&gt;
        &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;
        &lt;updateRate&gt;0.0&lt;/updateRate&gt;
        &lt;cameraName&gt;rrbot/camera1&lt;/cameraName&gt;
        &lt;imageTopicName&gt;image_raw&lt;/imageTopicName&gt;
        &lt;cameraInfoTopicName&gt;camera_info&lt;/cameraInfoTopicName&gt;
        &lt;frameName&gt;camera_link&lt;/frameName&gt;
        &lt;hackBaseline&gt;0.07&lt;/hackBaseline&gt;
        &lt;distortionK1&gt;0.0&lt;/distortionK1&gt;
        &lt;distortionK2&gt;0.0&lt;/distortionK2&gt;
        &lt;distortionK3&gt;0.0&lt;/distortionK3&gt;
        &lt;distortionT1&gt;0.0&lt;/distortionT1&gt;
        &lt;distortionT2&gt;0.0&lt;/distortionT2&gt;
      &lt;/plugin&gt;
    &lt;/sensor&gt;
  &lt;/gazebo&gt;
</code></pre>

<p>このプラグインのいくつかのプラグインについて考えてみましょう&hellip;</p>

<pre><code class="xml">  &lt;gazebo reference="camera_link"&gt;
</code></pre>

<p><strong>&ldquo;camera_link&rdquo;</strong>というリンクの名前はXacroのURDFに追加した名前と一致しなければなりません。</p>

<pre><code class="xml">    &lt;sensor type="camera" name="camera1"&gt;
</code></pre>

<p><strong>&ldquo;camera1&rdquo;</strong>というセンサの名前は他のセンサの名前と一致してはいけません。この名前は、アクセス可能なGazeboプラグインの中にあるものを除き、他のところで使用してはいけません。</p>

<pre><code class="xml">      &lt;update_rate&gt;30.0&lt;/update_rate&gt;
</code></pre>

<p>Gazeboで何秒ごとに新しいカメライメージを取得するのかという値です。これはセンサがシミュレーションの間に行う最大のアップデートレートです。しかし、もし物理シミュレータがセンサジェネレーションの苦心より早ければ、この目標レートには到達しないこともあります。</p>

<pre><code class="xml">        &lt;horizontal_fov&gt;1.3962634&lt;/horizontal_fov&gt;
        &lt;image&gt;
          &lt;width&gt;800&lt;/width&gt;
          &lt;height&gt;800&lt;/height&gt;
          &lt;format&gt;R8G8B8&lt;/format&gt;
        &lt;/image&gt;
        &lt;clip&gt;
          &lt;near&gt;0.02&lt;/near&gt;
          &lt;far&gt;300&lt;/far&gt;
        &lt;/clip&gt;
</code></pre>

<p>あなたの物理的なカメラハードウェアについての製造仕様と一致するように値を代入してください。ただし、ピクセルは正方形と仮定されているということを覚えてください。
加えて、ニアクリップとファークリップは、シミュレーション中でカメラが見ることのできる範囲内の距離のための、物体を上下を定義する<code>simulation-specific</code>パラメータです。これは、カメラのオプトメトリフレームの中で定義されています。</p>

<pre><code class="xml">      &lt;plugin name="camera_controller" filename="libgazebo_ros_camera.so"&gt;
</code></pre>

<p>これは、現在の<code>gazeboros/gazeboros_camera.cpp</code>ファイルにあり、共有物体としてリンク付けされています。</p>

<pre><code class="xml">        &lt;cameraName&gt;rrbot/camera1&lt;/cameraName&gt;
        &lt;imageTopicName&gt;image_raw&lt;/imageTopicName&gt;
        &lt;cameraInfoTopicName&gt;camera_info&lt;/cameraInfoTopicName&gt;
</code></pre>

<p>ここに、カメラが<code>image</code>、<code>topic</code>、<code>camera info topic</code>としてpublishしているrostopicを定義します。とぴくもRRBotでは、以下のようなものをsubscribeできるはずです。:</p>

<pre><code>/rrbot/camera1/image_raw
/rrbot/camera1/camera_info

        &lt;frameName&gt;camera_link&lt;/frameName&gt;
</code></pre>

<p>imageの座標系は、<code>tf</code>ツリーの下でpublishされています。</p>

<h2>RRBotの例を実行する</h2>

<p><code>rrbot.xacro</code>と<code>rrbot.gazebo</code>を保存したあと、RvizとGazeboをそれぞれ異なるターミナルでlaunchできるはずです。:</p>

<pre><code class="bash">roslaunch rrbot_gazebo rrbot_world.launch
roslaunch rrbot_description rrbot_rviz.launch
</code></pre>

<p>Rvizでは、<strong>Camera</strong>ディスプレイを追加し、<strong>image Topic</strong>を<code>/rrbot/camera1/</code>と設定してください。<br/>
前回のチュートリアルからは特に変更せず、上記のコマンドを実行すると、Rvizは以下の動画のようになるはずです。<br/>
尚、コーラのカンはわかりやすさのために設置しました。また、Gazeboでは、前回のチュートリアルと同様の動作が起きています。</p>

<div class="youtube-container">
<iframe width="420" height="315" src="https://www.youtube.com/embed/JlAculkV5Ug" frameborder="0" allowfullscreen></iframe>
</div>


<h3>マルチカメラ</h3>

<p><strong>説明 : </strong> マルチカメラは、イメージを当時にpublishするように、同時にシャッターを切ります。典型的には、ステレオカメラで使われており、普通の<code>Camera</code>プラグインのインターフェースと同じように使用されています。<br/>
<strong>注意 : </strong>現在は、ステレオカメラのみをサポートしています。<a href="https://github.com/osrf/gazebo_ros_pkgs/issues/13">Github issue</a>をご覧ください。</p>

<h4>Atlasのコードの例</h4>

<p>このコードの例では、左右のカメラがあります。:</p>

<pre><code class="xml">In this code example there is both a left and right camera:

  &lt;gazebo reference="left_camera_frame"&gt;
    &lt;sensor type="multicamera" name="stereo_camera"&gt;
      &lt;update_rate&gt;30.0&lt;/update_rate&gt;
      &lt;camera name="left"&gt;
        &lt;horizontal_fov&gt;1.3962634&lt;/horizontal_fov&gt;
        &lt;image&gt;
          &lt;width&gt;800&lt;/width&gt;
          &lt;height&gt;800&lt;/height&gt;
          &lt;format&gt;R8G8B8&lt;/format&gt;
        &lt;/image&gt;
        &lt;clip&gt;
          &lt;near&gt;0.02&lt;/near&gt;
          &lt;far&gt;300&lt;/far&gt;
        &lt;/clip&gt;
        &lt;noise&gt;
          &lt;type&gt;gaussian&lt;/type&gt;
          &lt;mean&gt;0.0&lt;/mean&gt;
          &lt;stddev&gt;0.007&lt;/stddev&gt;
        &lt;/noise&gt;
      &lt;/camera&gt;
      &lt;camera name="right"&gt;
        &lt;pose&gt;0 -0.07 0 0 0 0&lt;/pose&gt;
        &lt;horizontal_fov&gt;1.3962634&lt;/horizontal_fov&gt;
        &lt;image&gt;
          &lt;width&gt;800&lt;/width&gt;
          &lt;height&gt;800&lt;/height&gt;
          &lt;format&gt;R8G8B8&lt;/format&gt;
        &lt;/image&gt;
        &lt;clip&gt;
          &lt;near&gt;0.02&lt;/near&gt;
          &lt;far&gt;300&lt;/far&gt;
        &lt;/clip&gt;
        &lt;noise&gt;
          &lt;type&gt;gaussian&lt;/type&gt;
          &lt;mean&gt;0.0&lt;/mean&gt;
          &lt;stddev&gt;0.007&lt;/stddev&gt;
        &lt;/noise&gt;
      &lt;/camera&gt;
      &lt;plugin name="stereo_camera_controller" filename="libgazebo_ros_multicamera.so"&gt;
        &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;
        &lt;updateRate&gt;0.0&lt;/updateRate&gt;
        &lt;cameraName&gt;multisense_sl/camera&lt;/cameraName&gt;
        &lt;imageTopicName&gt;image_raw&lt;/imageTopicName&gt;
        &lt;cameraInfoTopicName&gt;camera_info&lt;/cameraInfoTopicName&gt;
        &lt;frameName&gt;left_camera_optical_frame&lt;/frameName&gt;
        &lt;!--&lt;rightFrameName&gt;right_camera_optical_frame&lt;/rightFrameName&gt;--&gt;
        &lt;hackBaseline&gt;0.07&lt;/hackBaseline&gt;
        &lt;distortionK1&gt;0.0&lt;/distortionK1&gt;
        &lt;distortionK2&gt;0.0&lt;/distortionK2&gt;
        &lt;distortionK3&gt;0.0&lt;/distortionK3&gt;
        &lt;distortionT1&gt;0.0&lt;/distortionT1&gt;
        &lt;distortionT2&gt;0.0&lt;/distortionT2&gt;
      &lt;/plugin&gt;
    &lt;/sensor&gt;
  &lt;/gazebo&gt;
</code></pre>

<h3>深度カメラ</h3>

<p><strong>説明 : </strong><code>Kinect</code>のようにセンサをシミュレートします。また、これは<code>Kinect</code>プラグインにもあります。将来的には、統合します。</p>

<h3>Openni Kinect</h3>

<p><strong>説明 : </strong><code>Xbox-Kinect</code>をシミュレートし、<a href="http://www.ros.org/wiki/openni_camera">Fuerteドキュメント</a>で説明されている、<code>Xbox kinect</code>用のROSドライバと一致するようなトピックをpublishします。</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="${link_name}_controller" filename="libgazebo_ros_openni_kinect.so"&gt;
    &lt;baseline&gt;0.2&lt;/baseline&gt;
    &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;
    &lt;updateRate&gt;1.0&lt;/updateRate&gt;
    &lt;cameraName&gt;${camera_name}_ir&lt;/cameraName&gt;
    &lt;imageTopicName&gt;/${camera_name}/depth/image_raw&lt;/imageTopicName&gt;
    &lt;cameraInfoTopicName&gt;/${camera_name}/depth/camera_info&lt;/cameraInfoTopicName&gt;
    &lt;depthImageTopicName&gt;/${camera_name}/depth/image_raw&lt;/depthImageTopicName&gt;
    &lt;depthImageInfoTopicName&gt;/${camera_name}/depth/camera_info&lt;/depthImageInfoTopicName&gt;
    &lt;pointCloudTopicName&gt;/${camera_name}/depth/points&lt;/pointCloudTopicName&gt;
    &lt;frameName&gt;${frame_name}&lt;/frameName&gt;
    &lt;pointCloudCutoff&gt;0.5&lt;/pointCloudCutoff&gt;
    &lt;distortionK1&gt;0.00000001&lt;/distortionK1&gt;
    &lt;distortionK2&gt;0.00000001&lt;/distortionK2&gt;
    &lt;distortionK3&gt;0.00000001&lt;/distortionK3&gt;
    &lt;distortionT1&gt;0.00000001&lt;/distortionT1&gt;
    &lt;distortionT2&gt;0.00000001&lt;/distortionT2&gt;
    &lt;CxPrime&gt;0&lt;/CxPrime&gt;
    &lt;Cx&gt;0&lt;/Cx&gt;
    &lt;Cy&gt;0&lt;/Cy&gt;
    &lt;focalLength&gt;0&lt;/focalLength&gt;
    &lt;hackBaseline&gt;0&lt;/hackBaseline&gt;
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3>GPUレーザー</h3>

<p><strong>説明 : </strong><code>sensor_msgs</code>で記述されている<code>LaserScan</code>メッセージを配信し、レーザーレンジセンサをシミュレートします。<a href="http://ros.org/wiki/hokuyo_node">Hokuyo Laser Scannersレファレンス</a>をご覧ください。<br/>
この例を試す前に、カメラをRRBotに追加した例をご覧ください。カメラを追加するのと同じように、新しいリンクとジョイントをRRBotのXacro URDFに追加することができます。今回は、外観モデルをカメラの時のように直方体だけで表現せず、メッシュを使います。:</p>

<pre><code class="xml">  &lt;joint name="hokuyo_joint" type="fixed"&gt;
    &lt;axis xyz="0 1 0" /&gt;
    &lt;origin xyz="0 0 ${height3 - axel_offset/2}" rpy="0 0 0"/&gt;
    &lt;parent link="link3"/&gt;
    &lt;child link="hokuyo_link"/&gt;
  &lt;/joint&gt;

  &lt;!-- Hokuyo Laser --&gt;
  &lt;link name="hokuyo_link"&gt;
    &lt;collision&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
    &lt;box size="0.1 0.1 0.1"/&gt;
      &lt;/geometry&gt;
    &lt;/collision&gt;

    &lt;visual&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
        &lt;mesh filename="package://rrbot_description/meshes/hokuyo.dae"/&gt;
      &lt;/geometry&gt;
    &lt;/visual&gt;

    &lt;inertial&gt;
      &lt;mass value="1e-5" /&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" /&gt;
    &lt;/inertial&gt;
  &lt;/link&gt;
</code></pre>

<p>続いて、カメラの例の時と同様に、<code>rrbot.gazebo</code>にプラグインの情報を追加します。</p>

<pre><code class="xml">  &lt;!-- hokuyo --&gt;
  &lt;gazebo reference="hokuyo_link"&gt;
    &lt;sensor type="gpu_ray" name="head_hokuyo_sensor"&gt;
      &lt;pose&gt;0 0 0 0 0 0&lt;/pose&gt;
      &lt;visualize&gt;false&lt;/visualize&gt;
      &lt;update_rate&gt;40&lt;/update_rate&gt;
      &lt;ray&gt;
        &lt;scan&gt;
          &lt;horizontal&gt;
            &lt;samples&gt;720&lt;/samples&gt;
            &lt;resolution&gt;1&lt;/resolution&gt;
            &lt;min_angle&gt;-1.570796&lt;/min_angle&gt;
            &lt;max_angle&gt;1.570796&lt;/max_angle&gt;
          &lt;/horizontal&gt;
        &lt;/scan&gt;
        &lt;range&gt;
          &lt;min&gt;0.10&lt;/min&gt;
          &lt;max&gt;30.0&lt;/max&gt;
          &lt;resolution&gt;0.01&lt;/resolution&gt;
        &lt;/range&gt;
        &lt;noise&gt;
          &lt;type&gt;gaussian&lt;/type&gt;
          &lt;!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range &lt; 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. --&gt;
          &lt;mean&gt;0.0&lt;/mean&gt;
          &lt;stddev&gt;0.01&lt;/stddev&gt;
        &lt;/noise&gt;
      &lt;/ray&gt;
      &lt;plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so"&gt;
        &lt;topicName&gt;/rrbot/laser/scan&lt;/topicName&gt;
        &lt;frameName&gt;hokuyo_link&lt;/frameName&gt;
      &lt;/plugin&gt;
    &lt;/sensor&gt;
  &lt;/gazebo&gt;
</code></pre>

<p>ほとんどのプロパティは自明ですが、以下のものを検証したいと思います。:</p>

<pre><code class="xml">      &lt;visualize&gt;false&lt;/visualize&gt;
</code></pre>

<p>これが<code>true</code>の時は、GPUレーザのスキャンしている範囲内で半透明のレーザーレイが表示されます。これは視覚的に有効かもしれませんし、邪魔になるかもしれません。<br/>
この要素についてのより詳しい説明は、<a href="http://gazebosim.org/sdf/dev.html#sensor225">SDFドキュメント</a>に載っています。</p>

<pre><code class="xml">&lt;topicName&gt;/rrbot/laser/scan&lt;/topicName&gt;
&lt;frameName&gt;hokuyo_link&lt;/frameName&gt;
</code></pre>

<p>publishしたいレーザースキャンのROSのトピック名を設定し、TFで使用した座標系の名前も設定します。</p>

<h2>RRBotの例を実行する</h2>

<p><code>rrbot.xacro</code>と<code>rrbot.gazebo</code>を保存した後、RvizとGazeboをそれぞれ異なるターミナルでlaunchできるはずです。:</p>

<pre><code class="xml">roslaunch rrbot_gazebo rrbot.launch
roslaunch rrbot_description rrbot_rviz.launch
</code></pre>

<p>Rvizでは、<strong>LaserScan</strong>ディスプレイを追加し、<strong>Topic</strong>を<code>/rrbot/camera1/image_raw</code>としてください。<br/>
レーザースキャンラインがGazeboの環境下で確認できるはずです。振り子が揺れている間、レーザースキャンも揺れているのを確認することができます。もし、スキャンが薄すぎるなら、レーザースキャンの大きさをRvizにある<strong>LaserScan</strong>ディスプレイのプロパティから変更できます。大きさは、1[m]とするのが見やすいです。<br/>
この動作は、基本的に先ほど、カメラを追加した例と同じなので、動作の様子は省略します。<br/>
因みに、公式チュートリアルでは、家のモデルなど、大きめのモデルを設置し、動作確認をしています。いろいろ置いてみて、確かめてみましょう。</p>

<h3>レーザー</h3>

<p><strong>説明 : </strong>GPUレーザーの非GPU型のレーザーですが、基本的には同じコードを使用しています。GPUレーザーの説明をご覧ください。<br/>
RRBotで動かすためには、<code>rrbot.gazebo</code>を開き、以下の二行を変更してください。</p>

<pre><code class="xml"> &lt;sensor type="gpu_ray" name="head_hokuyo_sensor"&gt;
 &lt;/sensor&gt;
</code></pre>

<p>を</p>

<pre><code class="xml">&lt;sensor type="ray" name="head_hokuyo_sensor"&gt;
&lt;/sensor&gt;
</code></pre>

<p>に変更するのと、</p>

<pre><code class="xml">&lt;plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so"&gt;
&lt;/plugin&gt;
</code></pre>

<p>を</p>

<pre><code class="xml">&lt;plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so"&gt;
&lt;/plugin&gt;
</code></pre>

<p>に変更してください。
できたら保存し、GPUレーザーの時と同じlaunchファイルでlaunchしてください。</p>

<h3>ブロックレーザー</h3>

<p><strong>説明 : </strong>グリッドスタイルのレーザレンジスキャナのシミュレーションを提供します。(例 : ヴェロダインセンサ)</p>

<h3>F3D (Force Feedback Ground Truth)</h3>

<p><strong>説明 : </strong>シミュレーションの中で<code>geometry_msgs</code>で記述されている<code>WrenchStampd</code>メッセージ上書きして、ボディへの外力を配信します。<a href="http://www.science.aster.ersdac.jspacesystems.or.jp/jp/glossary/jp/ku/ground_truth.html">Ground Truthとは&hellip;</a>
Description: broadcasts external forces on a body in simulation over WrenchStamped message as described in geometry_msgs.</p>

<h3>Force</h3>

<p><strong>説明 : </strong>シミュレーション中のボディに<code>Wrench</code>(<code>geometry_msgs</code>)を適用するためのROSのインターフェースです。</p>

<h3>IMU</h3>

<p><strong>説明 : </strong><a href="http://ros.org/wiki/microstrain_3dmgx2_imu">imu_node</a>をシミュレートします。</p>

<h3>Joint Pose Trajectory</h3>

<p><strong>説明 : </strong><code>jointtrajectoryaction</code>をlistenし、ジョイントの姿勢の設定をプレイバックします。シミュレートされている物理量や力を考慮することなく、ジョイントの設定を正しい位置に設定します。</p>

<h3>P3D (3D Position Interface for Ground Truth)</h3>

<p><strong>説明 : </strong>シミュレーション中のすべてのボディの慣性データを<code>nav_msg</code>に記述されているオドメトリメッセージのROSトピックへ配信します。</p>

<h3>プロジェクタ</h3>

<p><strong>説明 : </strong>ソースから静的テクスチャを表示します。これは、RP2のオリジナルヘッドカメラセンサなどで使用されています。詳しくは、<a href="http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1rendering_1_1Projector.html">APIドキュメント</a>をご覧ください。</p>

<h3>Prosilicaカメラ</h3>

<p><strong>説明 : </strong><a href="http://www.ros.org/wiki/prosilica_camera">ROSのProsilicaカメラ</a>によって配信されるインターフェースをシミュレートします。<a href="https://bitbucket.org/hsu/nasa_r2_simulator/src/5ee1de067038749dcc133ed7cf87b45715cc4457/r2_gazebo/urdf/sensors/grasshopper2.gazebo.xacro?at=hsu">URDF Xacroマクロの例</a>はここです。</p>

<h3>バンパー</h3>

<p><strong>説明 : </strong><a href="http://ros.org/doc/api/gazebo_plugins/html/msg/ContactsState.html"><code>ContactsState</code>メッセージ</a>へコンタクトフィードバックを提供します。</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="${name}_gazebo_ros_bumper_controller" filename="libgazebo_ros_bumper.so"&gt;
    &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;
    &lt;updateRate&gt;${update_rate}&lt;/updateRate&gt;
    &lt;bumperTopicName&gt;${name}_bumper&lt;/bumperTopicName&gt;
    &lt;frameName&gt;world&lt;/frameName&gt;
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3>Differential Drive</h3>

<p><strong>説明 : </strong>Gazeboでのデファレンシャルドライブロボットの基本的なコントローラを提供するモデルプラグインです。このプラグインを使用するには、ディファレンシャルドライブのロボットが必要です。</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so"&gt;
    &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;
    &lt;updateRate&gt;${update_rate}&lt;/updateRate&gt;
    &lt;leftJoint&gt;base_link_right_wheel_joint&lt;/leftJoint&gt;
    &lt;rightJoint&gt;base_link_left_wheel_joint&lt;/rightJoint&gt;
    &lt;wheelSeparation&gt;0.5380&lt;/wheelSeparation&gt;
    &lt;wheelDiameter&gt;0.2410&lt;/wheelDiameter&gt;
    &lt;torque&gt;20&lt;/torque&gt;
    &lt;commandTopic&gt;cmd_vel&lt;/commandTopic&gt;
    &lt;odometryTopic&gt;odom&lt;/odometryTopic&gt;
    &lt;odometryFrame&gt;odom&lt;/odometryFrame&gt;
    &lt;robotBaseFrame&gt;base_footprint&lt;/robotBaseFrame&gt;
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3>Skid Steering Drive</h3>

<p><strong>説明 : </strong>Gazeboでのスキッドステアリングドライブロボットの基本的なコントローラを提供するモデルプラグインです。(例 : Pioneer 3AT)</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so"&gt;
    &lt;updateRate&gt;100.0&lt;/updateRate&gt;
    &lt;robotNamespace&gt;/&lt;/robotNamespace&gt;
    &lt;leftFrontJoint&gt;front_left_wheel_joint&lt;/leftFrontJoint&gt;
    &lt;rightFrontJoint&gt;front_right_wheel_joint&lt;/rightFrontJoint&gt;
    &lt;leftRearJoint&gt;back_left_wheel_joint&lt;/leftRearJoint&gt;
    &lt;rightRearJoint&gt;back_right_wheel_joint&lt;/rightRearJoint&gt;
    &lt;wheelSeparation&gt;0.4&lt;/wheelSeparation&gt;
    &lt;wheelDiameter&gt;0.215&lt;/wheelDiameter&gt;
    &lt;robotBaseFrame&gt;base_link&lt;/robotBaseFrame&gt;
    &lt;torque&gt;20&lt;/torque&gt;
    &lt;topicName&gt;cmd_vel&lt;/topicName&gt;
    &lt;broadcastTF&gt;false&lt;/broadcastTF&gt;
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3>ビデオプラグイン</h3>

<p><strong>説明 : </strong>Gazeboの中のOGREテクスチャ上のROSのイメージストリームを表示するビジュアルプラグインです。このプラグインは存在するリンク表面の一つのテクスチャを修正するだけでなく、新しいテクスチャを作ります。このテクスチャはXY平面に作られ、+Zの方向からなら見ることができます。このプラグインはテクスチャを変換するピクセルサイズが必要です。また、サイズが異なれば、ROSイメージメッセージに一致するようリサイズします。</p>

<pre><code class="xml">&lt;gazebo reference="display_screen_link"&gt;
  &lt;visual&gt;
    &lt;plugin name="display_video_controller" filename="libgazebo_ros_video.so"&gt;
      &lt;topicName&gt;image&lt;/topicName&gt;
      &lt;height&gt;120&lt;/height&gt;
      &lt;width&gt;160&lt;/width&gt;
    &lt;/plugin&gt;
  &lt;/visual&gt;
&lt;/gazebo&gt;
</code></pre>

<h3>Planar Move Plugin</h3>

<p><strong>説明 : </strong><code>geometry_msgs/Twist</code>を使って水平面上を動かすために、任意の物体(簡単な例 : 箱、球、円柱)に適用可能なモデルプラグインです。このプラグインは、並進速度(XY)と角速度(Z)をすべてのサイクルで物体に入力することで動きます。<br/>
ここに完全なURDFの例を示します。このURDFではこのプラグインを使ったGazebo中の浮いている箱のコントロール方法を、異なる外観、衝突要素を使って示しています。<br/>
<strong>注意 : </strong>この物体にはありえない動きを避けるため、十分な慣性が必要です。この、ありえない動きとは与えられた速度と反転するなどの形で発生し得ます。慣性の値を大きくしてゆくことにより、望み通りに物体を動かすことができるようになります。また、重心を地面に近づけるというのも良い方法です。</p>

<pre><code class="xml">&lt;robot name="test_model"&gt;

  &lt;!-- root link, on the ground just below the model origin --&gt;
  &lt;link name="base_footprint"&gt;
   &lt;visual&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0" /&gt;
      &lt;geometry&gt;
        &lt;box size="0.001 0.001 0.001" /&gt;
      &lt;/geometry&gt;
    &lt;/visual&gt;
  &lt;/link&gt;

  &lt;joint name="base_link_joint" type="fixed"&gt;
    &lt;origin xyz="0.0 0 1.25" rpy="0 0 0" /&gt;
    &lt;parent link="base_footprint"/&gt;
    &lt;child link="base_link" /&gt;
  &lt;/joint&gt;

  &lt;!-- the model --&gt;
  &lt;link name="base_link"&gt;
    &lt;inertial&gt;
      &lt;mass value="50" /&gt;
      &lt;origin xyz="0 0 -1.25" /&gt;
      &lt;inertia ixx="50.0" ixy="0.0" ixz="0.0"
        iyy="50.0" iyz="0.0"
        izz="50.0" /&gt;
    &lt;/inertial&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;box size="0.5 0.5 1.0" /&gt; &lt;!-- does not need to match collision --&gt;
      &lt;/geometry&gt;
    &lt;/visual&gt;
    &lt;collision&gt;
      &lt;origin xyz="0 0 -1.0" /&gt;
      &lt;geometry&gt;
        &lt;cylinder length="0.5" radius="0.25" /&gt;
      &lt;/geometry&gt;
    &lt;/collision&gt;
  &lt;/link&gt;

  &lt;gazebo&gt;
    &lt;plugin name="object_controller" filename="libgazebo_ros_planar_move.so"&gt;
      &lt;commandTopic&gt;cmd_vel&lt;/commandTopic&gt;
      &lt;odometryTopic&gt;odom&lt;/odometryTopic&gt;
      &lt;odometryFrame&gt;odom&lt;/odometryFrame&gt;
      &lt;odometryRate&gt;20.0&lt;/odometryRate&gt;
      &lt;robotBaseFrame&gt;base_footprint&lt;/robotBaseFrame&gt;
    &lt;/plugin&gt;
  &lt;/gazebo&gt;

&lt;/robot&gt;
</code></pre>

<h3>テンプレート</h3>

<p><strong>説明 : </strong>自身のプラグインを書きたいと思っている方用のC++のプラグインテンプレートの例です。</p>

<h2>次のステップ</h2>

<p>次は、<code>controller/actuator/simulator</code>と<a href="http://gazebosim.org/tutorials/?tut=ros_control">Actuators, controllers, <code>ros_control</code></a>のタイトな統合のためにGazeboと統合された<code>ros_control</code>パッケージについて検証します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-5:GazeboをROSに繋ぐ (GazeboにおけるURDF 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/17/gazebo-urdf-in-gazebo/"/>
    <updated>2015-02-17T17:03:28+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/17/gazebo-urdf-in-gazebo</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/17/2015 (Tue)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「URDF in Gazebo」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : GazeboでURDFを使う</h2>

<p><a href="http://www.ros.org/wiki/urdf">Universal Robotic Description Format (URDF)</a>は、ロボットのすべての要素を記述するために、Gazeboでも使われている、XMLフォーマットを使用しています。URDFファイルをGazeboで使用し、Gazeboで適切に動作させるには、いくつかの追加シミュレーション定義のタグがにつようです。このチュートリアルでは、GazeboであなたのURDFベースのロボットを確実に動作させ、<code>sctatch</code>や二重定義フォーマットによる、分割SDFファイルを作るのを避けるために、必要な過程を説明します。プログラム内部では、Gazeboは自動で、URDFをSDFファイルに変換しています。</p>

<h2>背景</h2>

<p>URDFは使いやすく、ROSでも一般化されているフォーマットですが、多くの定義について欠陥があり、ロボティクスの発展的な内容を記述するには至っていません。URDFは、独立した、ひとつのロボットの、幾何学的要素と運動要素しか定義できません。また、URDFはロボットのいるシミュレータ上のロボットの姿勢を定義できません。さらに、ジョイントループ(平行なリンク機構)を定義できないだけでなく、摩擦などの要素を記述できないので、標準的なフォーマットではないのです。さらに加えて述べると、ロボットでない、証明や標高地図などを定義することはできません。<br/>
実際に使うという面では、URDFの文法は処理するのに重く、完全なフォーマットを行わず、XMLフォーマットを使用しています。これにより、URDFはより柔軟になっています。また、後方互換性ももちません。<br/>
こういった問題に対処し、URDFの欠陥を解決するために、Gazeboでは、<a href="http://gazebosim.org/sdf.html">Simulator Description Format (SDF</a>と呼ばれる新しいフォーマットが作られました。SDFは、worldレベル(シミュレーション環境を記述するレベル)からロボットレベル（ロボットを記述するレベル）に至るまで、全てにおいて、完全な記述です。
SDFは規模を自由に決定でき、修正要素を追加するのも簡単です。SDFフォーマット自体は、古いバージョンから新しいバージョンへ変換するために、シンプルなアップグレードツールを簡単に使用できるような、XMLを使って記述しています。<br/>
URDFをできるだけ完全なドキュメントとし、Gazeboでサポートしようとすることは、筆者の意図するところですが、読者にとっては、なぜ２つのフォーマットが存在し、それぞれに欠陥があるのか疑問に思うのは至極当然なことです。URDFをロボティクスにおkるニーズに完全に対応させることができれば、それは素晴らしいことです。</p>

<h2>Gazeboへの実装の概要</h2>

<p>URDFのロボットをGazeboで完全に動作させるにはたくさんのステップがあります。以下に示すのは、このチュートリアルの残りで述べる、詳細なステップの概要です。:</p>

<h3>必須条件</h3>

<ul>
<li><code>&lt;link&gt;</code>要素にある、<code>&lt;internal&gt;</code>要素は完全にかつ詳細に定義され、構成されている必要があります。</li>
</ul>


<h3>任意条件</h3>

<ul>
<li><code>&lt;gazebo&gt;</code>要素をすべての<code>&lt;link&gt;</code>に追加する

<ul>
<li>Gazeboのフォーマットに外観色を変換する</li>
<li>stlファイルをより良いテクスチャによってdaeファイルに変換する</li>
<li>センサプラグインを追加する</li>
</ul>
</li>
<li><code>&lt;gazebo&gt;</code>要素をすべての<code>&lt;link&gt;</code>に追加する

<ul>
<li>適切な同ダンパを定義する</li>
<li>アクチュエータの制御プラグインを追加する</li>
</ul>
</li>
<li><code>&lt;gazebo&gt;</code>要素をすべての<code>&lt;robot&gt;</code>要素に追加する</li>
<li>もし、ロボットが正確に<code>world/base_link</code>へ接続されるべきなら、<code>&lt;link name="world"/&gt;</code>を追加する</li>
</ul>


<h2>前提条件</h2>

<p>あなたのロボットをGazeboで起動させるために必要な最初のステップは、<a href="http://www.ros.org/wiki/urdf/Tutorials">ROS URDFチュートリアル</a>から、動作するURDFファイルを用意ことです。Gazeboであなたのロボットを動作させる前に、<a href="http://www.ros.org/wiki/rviz">Rviz</a>で表示して検証してください。このチュートリアルでは、<code>RRBot</code>というシンプルなデモ用ロボットを使います。このロボットを使っても自身のものを使ってもどちらでも構いません。</p>

<h3>RRBotを手に入れる</h3>

<p><code>RRBot</code>(Revolute-Revolute Manipulator Robot)は簡単な3つのリンク機構、2つのジョイントアームを持つロボットで、GazeboとURDFの様々な特徴を検証するのに使います。これは、基本的に<a href="http://en.wikipedia.org/wiki/Double_inverted_pendulum">２つの倒立振り子</a>であり、シミュレータでは、いくつかの面白い制御構想を検証します。<br/>
<code>RRBot</code>を手に入れるには、もし、<code>catkin</code>ワークスペースがあるなら、その<code>src</code>フォルダに、GitHubのレポジトリより<code>clone</code>し、ワークスペースをリビルドしてください。</p>

<pre><code class="bash">cd ~/catkin_ws/src/
git clone https://github.com/ros-simulation/gazebo_ros_demos.git
cd ..
catkin_make
</code></pre>

<p>もし、何を言っているのかよくわからなけれが、先に、<a href="http://gazebosim.org/tutorials?tut=ros_overview">ROS Overview Tutorials</a>を読んでください。</p>

<h3>Rvizで見てみる</h3>

<p>すべてうまく行っているか確かめるために、<code>RRBot</code>をRvizでlaunchしてください。:</p>

<pre><code class="bash">roslaunch rrbot_description rrbot_rviz.launch
</code></pre>

<p>すると、以下のようになるはずです。
<img src="/images/2015-02-17-gazebo-urdf-in-gazebo/rrbot-rviz-1.png" alt="rrbot-rviz-1" />
もし、こうならなければ、<code>killall roscore</code>コマンドで起動中のすべての<code>roscore</code>プロセスを終了し、再びRVizをlaunchしてください。<br/>
また、２つのジョイントを動かすために、<code>Joint State Publisher</code>ウィンドウで<code>slider bars</code>を実行することもできるはずです。<br/>
Gazeboであなたのロボットが動くように変換するあいだ、Rvizや他のROSアプリケーションを終了させないということが重要です。なので、たまにRVizのロボットがすべてきちんと動いているか確かめるのは良いことです。</p>

<p><a href="http://cir-kit.github.io/blog/2015/02/14/gazebo-ros-overview/">ROSの概要</a>チュートリアルでは、Gazeboから直接<code>/jointstates</code>をpublishして、あなたのロボットの状態を表示するための、Rvizの使い方は飛ばしました。この例では、RVizのRRBotは、ダミーの<code>jointstate</code>パブリッシャーノード（スライドバー月のウィンドウ）からの<code>/jointstates</code>を取得(subscribe)しています。</p>

<h3>urdfのRRBotを試してみる</h3>

<p>このチュートリアルの残りでは、RRBotのURDFのいろいろな面を見てゆきます。早速ファイルを見てみましょう。:</p>

<pre><code class="bash">rosed rrbot_description rrbot.xacro
</code></pre>

<p>いくつかのリンクやジョイントの計算を簡単にするために、<a href="http://ros.org/wiki/xacro">Xacro</a>を使用していることに注意してください。また、２つの追加ファイルもインクルードしています。
- rrbot.gazebo : ほとんどすべてのGazebo定義XML要素をタグに含むGazeboの定義ファイルです。
- materials.xacro : 文字列のRGBA値のための簡単なRVizのカラーファイルであり、必須のものではありませんが、あったほうが良い定義です。</p>

<h3>Gazeboで見てみる</h3>

<p>GazeboでもRRBotをlaunchできるはずです。:</p>

<pre><code class="bash">roslaunch rrbot_gazebo rrbot_world.launch
</code></pre>

<p>launchされたGazeboのウィンドウで、直立した状態のロボットを確認できるはずです。デフォルトには物理シミュレータに恣意的な障害物が無いにも関わらず、数値エラーが始まりと当時に起こり、２つの倒立振子が数秒後に落ちます。以下に示すのは、RRBotが動いている（倒立振子が落ちている）途中の様子です。:
<img src="/images/2015-02-17-gazebo-urdf-in-gazebo/rrbot-gazebo-1.png" alt="rrbot-gazebo-1" />
最終的には、アームは完全に停止します。以下のチュートリアル間、URDFのロボットのシミュレーションについて学ぶのを手助けするために、URDFのいろんな面を引っ張ってテストしてみることをおすすめします。</p>

<h2>URDFファイルのヘッダ</h2>

<p>GazeboにはAPIの変更がたくさんあり、URDFフォーマットが必要とされてきており、その中でも、Gazeboの<code>xml-schema</code>という名前空間はすでに必要とされなくなりました。もし、あなたのURDFが以下のようであるなら、:</p>

<pre><code class="xml">&lt;robot xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
       xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
       xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
       xmlns:xacro="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
       name="pr2" &gt;
</code></pre>

<p>これらは削除して構いません。もし以下のものを使っているなら、ロボットのエレメントタグに必要なものはロボットの名前とxacroの任意のxmlの名前空間です。:</p>

<pre><code class="xml">&lt;robot name="rrbot" xmlns:xacro="http://www.ros.org/wiki/xacro"&gt;
</code></pre>

<h3>タグの<code>&lt;gazebo&gt;</code>要素</h3>

<p>もし、<code>&lt;gazebo&gt;</code>要素が<code>reference==""</code>という記述無しで使用してあるなら、<code>&lt;gazebo&gt;</code>要素はすべてのロボットモデルのものと仮定されます。<code>&lt;gazebo&gt;</code>タグにある<code>&lt;robot&gt;</code>要素は以下の表のようになっています。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> タイプ </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">static </td>
<td style="text-align:center;">   bool   </td>
<td style="text-align:center;">    もし<code>true</code>にすると、モデルは動かなくなります。しかしながら、モデルは物理エンジンの中でシミュレーションされます。 </td>
</tr>
</tbody>
</table>


<p>先ほどの表には無くて、<code>&lt;gazebo&gt;</code>タグにある要素は、生成されるSDFファイルの<code>&lt;model&gt;</code>タグに直接挿入されます。<br/>
これは、<a href="http://gazebosim.org/tutorials?tut=ros_gzplugins">ROS Motor and Sensor Plugins</a>チュートリアルについて議論するときに、特にプラグインにおいて有用です。</p>

<h2>モデルをworldに正しく変換する</h2>

<p>もしあなたのURDFモデルをworldフレーム(<code>the ground plane</code>)に永久に設置された状態にしたいのなら、モデルのベースとなるように変換された、<code>world</code>リンクとジョイントを作らなければなりません。RRBotでは以下のようにすれば、それが可能です。</p>

<pre><code class="xml">  &lt;!-- Used for fixing robot to Gazebo 'base_link' --&gt;
  &lt;link name="world"/&gt;

  &lt;joint name="fixed" type="fixed"&gt;
    &lt;parent link="world"/&gt;
    &lt;child link="link1"/&gt;
  &lt;/joint&gt;
</code></pre>

<p>しかし、もしあなたがモバイルベースなどの動くロボットを持っているなら、このリンクやジョイントは必要ありません。</p>

<h2>Links</h2>

<p>URDFの<code>link</code>要素に詳しくなりましょう。<br/>
以下の例はRRBotの<code>link</code>です。</p>

<pre><code class="xml">  &lt;!-- Base Link --&gt;
  &lt;link name="link1"&gt;
    &lt;collision&gt;
      &lt;origin xyz="0 0 ${height1/2}" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
        &lt;box size="${width} ${width} ${height1}"/&gt;
      &lt;/geometry&gt;
    &lt;/collision&gt;

    &lt;visual&gt;
      &lt;origin xyz="0 0 ${height1/2}" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
        &lt;box size="${width} ${width} ${height1}"/&gt;
      &lt;/geometry&gt;
      &lt;material name="orange"/&gt;
    &lt;/visual&gt;

    &lt;inertial&gt;
      &lt;origin xyz="0 0 1" rpy="0 0 0"/&gt;
      &lt;mass value="1"/&gt;
      &lt;inertia
        ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0"/&gt;
    &lt;/inertial&gt;
  &lt;/link&gt;
</code></pre>

<h3>単位における注意</h3>

<p><a href="http://www.ros.org/reps/rep-0103.html">ROS REP 103: Standard Units of measure and Coordinate Conventions</a>にあるように、Gazeboの単位はメートルとキログラムで定義されねばなりません。もし、重力のような定数を主導で変更するときには、Gazeboではできるだけヤード・ポンド法を使えるようにしています。しかし、デフォルトの重力は9.8[m/s<sup>2</sup>]です。質量を定義する際にはキログラム単位を使ってください。</p>

<h3><code>&lt;collision&gt;</code>と<code>&lt;visual&gt;</code>要素</h3>

<p>これらのタグの働きはGazeboでもRVizでも基本的に同じです。両方を定義することは重要ですが、いくつかのROSアプリケーションでは異なるので、Gazeboでは、もし定義されていなければ、あなたの<code>&lt;cisual&gt;</code>要素を<code>&lt;collision&gt;</code>要素と同じようには使いません。その代わり、Gazeboではあなたの<code>link</code>をレーザスキャナからも衝突要素としても&#8221;見えない&#8221;ものとして扱います。</p>

<h4>collisionモデルの簡単化</h4>

<p><code>collision</code>と<code>visual</code>要素のどちらにも同じように幾何要素やメッシュを使うことができます。しかし、PCの性能工場のために、衝突幾何要素の<code>model/meshes</code>は簡略化することを強くおすすめします。メッシュを簡単化するおすすめのツールは<a href="http://blender.jp/">Blender</a>です。BlenderにはMayaや3DX Maxなど、たくさんの<code>closed-source</code>があり、メッシュを簡単化することもできます。</p>

<h4>物質 : 適切な色とテクスチャを使う</h4>

<p>通常のURDFでは、以下のようなRRBotにもあるタグを使って色を定義することができます。</p>

<pre><code class="xml">&lt;material name="orange"/&gt;
</code></pre>

<p>これは、<code>materials.xacro</code>などのファイルの中に、分割して<code>orange</code>という色と一緒に以下のように定義してあります。:</p>

<pre><code class="xml">  &lt;material name="orange"&gt;
    &lt;color rgba="${255/255} ${108/255} ${10/255} 1.0"/&gt;
  &lt;/material&gt;
</code></pre>

<p>しかし残念なことに、この定義方法では、<code>link</code>の色はGazeboでは反映されません。というのも、<code>link</code>に色をつけたり、テクスチャを貼ったりするのにOこの物質スクリプトが採用されているのです。その代わり、Gazeboの物質タグは、以下のように、それぞれのリンクに定義してやる必要があります。</p>

<pre><code class="xml">  &lt;gazebo reference="link1"&gt;
    &lt;material&gt;Gazebo/Orange&lt;/material&gt;
  &lt;/gazebo&gt;
</code></pre>

<p>簡単に言うと、選択したRRBotの例では、すべてのGazeboの定義タグを<code>`rrbot.gazebo</code>と呼ばれるセカンドファイルからインクルードしていました。<br/>
なので、要素を探すことができたのです。<br/>
Gazeboでデフォルトで使用可能な物質は<code>gazebo/media/materials/scripts/gazebo/scripts/gazebo.material</code>にあるGazeboのソースコードより見つけることができます。<br/>
より進んだもしくは独自の物質のために、オリジナルのオレンジ色もしくはテクスチャを作ることができます。それについては、以下をご覧ください。
- <a href="http://gazebosim.org/sdf/dev.html#material179">The SDF documentation</a>
- <a href="http://www.ogre3d.org/tikiwiki/Materials">OGRE materials documentation</a></p>

<h4>STLやColladaファイル</h4>

<p>Rvizのように、Gazeboでも<a href="http://en.wikipedia.org/wiki/STL_(file_format">STL</a>)や<a href="http://en.wikipedia.org/wiki/Collada">Collada</a>ファイルを使用することができます。通常は、Collada(<code>.dae</code>)ファイルを使うことをおすすめします。なぜなら、このフォーマット形式は、色とテクスチャをサポートしているからです。STLファイルだと、個体の色の<code>link</code>しか作ることができません。</p>

<h3><code>&lt;inertial&gt;</code>要素</h3>

<p>Gazeboで物理エンジンを適切にうごかすためには、<a href="http://www.ros.org/wiki/urdf/XML/link">URDF element page</a>にある、<code>&lt;inertial&gt;</code>要素が必ず必要です。Gazeboで<code>link</code>が無視されないために、それらの質量は0より大きくなければなりません。更に、0の慣性モーメント(ixx, iyy, izz)は、どんな有限なトルクに対しても、無限大の加速度を出力することになります。<br/>
それぞれの<code>link</code>に正しい値を決定するには、Gazeboで物理近似を行わなければなりません。これは、たくさんのロボットパーツの計測もしくは、そういった近似のための機能付きの<a href="http://www.solidworks.co.jp/">Solidworks</a>のようなCADソフトを使うことにより決定されます。初心者は、値を少しずつ変えることでも決定できます。<br/>
以下は、RRBotの一つ目の<code>link</code>の慣性要素の例です。:</p>

<pre><code class="xml">    &lt;inertial&gt;
      &lt;origin xyz="0 0 ${height1/2}" rpy="0 0 0"/&gt;
      &lt;mass value="1"/&gt;
      &lt;inertia
        ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0"/&gt;
    &lt;/inertial&gt;
</code></pre>

<p><code>origin</code>タグはこの<code>link</code>の重心を表しています。RRBotの長方形のリンクの半分の長さのところを重心と決定することにより、質量を中心に持ってきます。Gazeboの<strong>View</strong>メニューをクリックし<strong>Wireframe</strong>と<strong>Center of Mass</strong>を選択すれば、GazeboであなたのURDFの重心を目視で確認することができます。<br/>
このロボットの例では、ロボットは現実世界の写しではないので、質量も慣性行列も作り上げられた（実際は存在しない）ものになっています。</p>

<h3>リンクにおける<code>&lt;gazebo&gt;</code>要素</h3>

<p>それぞれの要素は以下のようになっています。:</p>

<table>
<thead>
<tr>
<th style="text-align:center;">名前     </th>
<th style="text-align:center;">タイプ    </th>
<th style="text-align:center;">説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">material   </td>
<td style="text-align:center;">value  </td>
<td style="text-align:center;">外観要素の物質</td>
</tr>
<tr>
<td style="text-align:center;">gravity    </td>
<td style="text-align:center;">bool   </td>
<td style="text-align:center;">重力を使う</td>
</tr>
<tr>
<td style="text-align:center;">dampingFactor  </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">リンク速度の指数関数的減衰。- (一つの減衰係数)により決定される一つ前のリンク速度と現在の速度を掛けあわせます。</td>
</tr>
<tr>
<td style="text-align:center;">maxVel     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">最大値コンタクト補正速度の最大値トラクション</td>
</tr>
<tr>
<td style="text-align:center;">minDepth   </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">コンタクト補正インパルスが発生する前の深さの最小値</td>
</tr>
<tr>
<td style="text-align:center;">mu1&amp;mu2    </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;"><a href="http://www.ros.org/wiki/opende">ODE</a>で定義される接地面に沿った接地摩擦係数 μ</td>
</tr>
<tr>
<td style="text-align:center;">fdir1  </td>
<td style="text-align:center;">string     </td>
<td style="text-align:center;">3組のローカルの衝突検証座標mu1の定義される方向</td>
</tr>
<tr>
<td style="text-align:center;">kp     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;"><a href="http://opende.sourceforge.net/">ODE</a>で定義される、剛体面の接触剛性 k_p (ODEではcfmを使用)</td>
</tr>
<tr>
<td style="text-align:center;">kd     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;"><a href="http://opende.sourceforge.net/">ODE</a>で定義される、剛体面の摩擦減衰 k_d (ODEではerpを使用)</td>
</tr>
<tr>
<td style="text-align:center;">selfCollide    </td>
<td style="text-align:center;">bool   </td>
<td style="text-align:center;">もし、<code>true</code>なら、リンクは他のリンクやモデルと衝突します</td>
</tr>
<tr>
<td style="text-align:center;">maxContacts    </td>
<td style="text-align:center;">int    </td>
<td style="text-align:center;">２つの物体間での面の最大値。この値は、物理シミュレートで定義される<code>max_contacts</code>要素をオーバーライドします</td>
</tr>
<tr>
<td style="text-align:center;">laserRetro     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">レーザーセンサのレーザー強度</td>
</tr>
</tbody>
</table>


<p><code>&lt;gazebo&gt;</code>要素は<code>&lt;robot&gt;</code>と似ており、上の表によって定義されていない任意の物体は、SDFファイルの<code>&lt;link&gt;</code>要素と一致するところに挿入されます。これは、<a href="http://gazebosim.org/tutorials?tut=ros_gzplugins">ROS Motor and Sensor Plugins</a>チュートリアルについて議論するときに、特にプラグインにおいて有用です。</p>

<h3>RRBotの要素の例</h3>

<p>RRBotでは、非固定で連結した2つの摩擦係数が定義されています。なのでもし、衝突が起こってもより正確な接触作用がシミュレートされます。以下はリンクの<code>&lt;gazebo&gt;</code>タグの一例です。</p>

<pre><code class="xml">&lt;gazebo reference="link2"&gt;
  &lt;mu1&gt;0.2&lt;/mu1&gt;
  &lt;mu2&gt;0.2&lt;/mu2&gt;
  &lt;material&gt;Gazebo/Black&lt;/material&gt;
&lt;/gazebo&gt;
</code></pre>

<h2>Joints</h2>

<p><a href="http://www.ros.org/wiki/urdf/XML/joint">URDFジョイントドキュメント</a>を熟読しておいてください。しかし、URDFのジョイントのために記述される要素のうべ手がGazeboで利用可能なわけではありません。</p>

<ul>
<li><code>&lt;origin&gt;</code>、<code>&lt;parent&gt;</code>そして<code>&lt;child&gt;</code>が必要です。</li>
<li><code>&lt;calibration&gt;</code>と<code>&lt;safety_controller&gt;</code>は無視されます。</li>
<li><code>&lt;dynamics&gt;</code>タグでは、ダンパ(減衰)プロパティのみが使用されます。</li>
<li><code>&lt;limit&gt;</code>タグ内のすべてのプロパティは任意です。</li>
</ul>


<h3>RRBotの例</h3>

<p>以下は、RRBotで使用されているジョイントです。</p>

<pre><code class="xml">&lt;joint name="joint2" type="continuous"&gt;
  &lt;parent link="link2"/&gt;
  &lt;child link="link3"/&gt;
  &lt;origin xyz="0 ${width} ${height2 - axel_offset*2}" rpy="0 0 0"/&gt;
  &lt;axis xyz="0 1 0"/&gt;
  &lt;dynamics damping="0.7"/&gt;
&lt;/joint&gt;
</code></pre>

<p>0.7 [Nms/rad]の線形粘性係数についての運動要素に注目してください。減衰はただ単に，ジョイントを止めるような<strong>ゆっくりとした</strong>ジョイント速度に力を発生させるものの合計です（この場合は [トルク/角速度] です）。</p>

<p>0.7 [Nms/rad]という値はいろいろないかに<strong>自然に</strong>振り子が触れるかを観察し、減衰させることによって決定されます。この値を増やしたり減らしたりしてこの要素がいかに物理エンジンに影響を当たるか検証することをおすすめします。</p>

<h3>Jointにおける<code>&lt;gazebo&gt;</code>要素</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">名前</th>
<th style="text-align:center;">タイプ   </th>
<th style="text-align:center;">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">kp     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;"><a href="http://opende.sourceforge.net/">ODE</a>で定義される、剛体面の接触剛性 k_p (ODEではcfmを使用)</td>
</tr>
<tr>
<td style="text-align:center;">kd     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;"><a href="http://opende.sourceforge.net/">ODE</a>で定義される、剛体面の摩擦減衰 k_d (ODEではerpを使用)</td>
</tr>
<tr>
<td style="text-align:center;">stopCfm    </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">停止していない時に混合で使用される一定の力</td>
</tr>
<tr>
<td style="text-align:center;">stopErp    </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">ジョイントの停止に使用されるエラーパラメータ</td>
</tr>
<tr>
<td style="text-align:center;">provideFeedback    </td>
<td style="text-align:center;">bool   </td>
<td style="text-align:center;">Gazeboのプラグインへ常にねじりデータ(トルク)をpublishしている</td>
</tr>
<tr>
<td style="text-align:center;">cfmDamping     </td>
<td style="text-align:center;">bool   </td>
<td style="text-align:center;">もし、<code>cgm dumping</code>が<code>true</code>なら、減衰のシミュレートにODEはCFMを使用し、無限の減衰を容認する。また、追加の強制要素(前もってジョイントの制限に使用されている) が常に有効になります。デフォルトの<code>damping</code>タグよりもたくさんのスッキリとした数字で表された減衰の方法です。</td>
</tr>
<tr>
<td style="text-align:center;">fudgeFactor    </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">ジョイントの制限にあるジョイントモータの行き過ぎ量を計測します。また、0から1の値を取るはずです</td>
</tr>
</tbody>
</table>


<p>これもまた<code>&lt;robot&gt;</code>や<code>&lt;link&gt;</code>における<code>&lt;gazebo&gt;</code>要素と似ており、上の表によって定義されていない任意の物体は、SDFファイルの<code>&lt;joint&gt;</code>要素と一致するところに挿入されます。これは、<a href="http://gazebosim.org/tutorials?tut=ros_gzplugins">ROS Motor and Sensor Plugins</a>チュートリアルについて議論するときに、特にプラグインにおいて有用です。</p>

<h2>Gazeboモデルの機能を修正する</h2>

<p>Gazeboをインストールすると、あなたのURDFが正しくSDFに変換できるか確かめる簡単なツールも一緒にインストールされています。以下のコマンドを実行してください。:</p>

<pre><code class="bash">  # gazebo2 and below
  gzsdf print MODEL.urdf
  # gazebo3 and above
  gz sdf -p MODEL.urdf
</code></pre>

<p>これにより、入力されたURDFから、SDFに変換するために必要な情報の欠陥に関する警告と共に、生成されたSDFを確認できます。
<strong>Note : </strong>バージョン1.9のGazeboとそれ以上のバージョンではデバッグ情報の一部がログファイルに記録され、以下のようにして、それを確認することができます。</p>

<pre><code class="bash">  cat ~/.gazebo/gzsdf.log
</code></pre>

<h2>URDFをGazeboで見る</h2>

<p>GazeboでRRBotを見ること、このチュートリアルの最初の方ですでに完了しています。あなた独自のロボットでは、そのURDFが<code>/urdf</code>というサブフォルダにある、<code>MYROBOT_description</code>という名前のROSパッケージの中で有効であるとします。ROSを使ってGazeboの中にこのロケーションからURDFを開く方法は前のチュートリアル(<a href="https://cir-kit.github.io/blog/2015/02/15/gazebo-using-roslaunch/">モデルをスポーンさせるのにroslaunchファイルを使う</a>)で述べています。もしまだそのチュートリアルをやっていないなら、すぐにやってみてください。
そのチュートリアルでは、あなたのオリジナルロボットのための、２つのROSパッケージ(<code>MYROBOTdescription</code>と<code>MYROBOTgazebo</code>)を制作するはずです。ロボットを確認し、Gazeboで試すには、以下のコマンドが実行できるはずです。</p>

<pre><code class="bash">roslaunch MYROBOT_gazebo MYROBOT.launch
</code></pre>

<p>これにより、GazeboサーバーとGUIクライアントの両方を、あなたのロボットを自動でスポーンさせるようlaunchしているはずです。</p>

<h2>あなたのモデルを引っ張る</h2>

<p>もしあなたのロボットモデルがGazeboで思い通りに動かなければ、あなたのURDFの調整が必要なので、Gazeboで正確にその物理特性を表現するべきだと言えます。Gazeboで利用可能であり、URDFにある<code>&lt;gazebo&gt;</code>タグでも利用可能な様々なプロパティについての情報は<a href="http://gazebosim.org/sdf.html">SDFのユーザーガイド</a>をご覧ください。</p>

<h2>あなたのロボットを世界と共有する</h2>

<p>もしあなたが他の人がGazeboで使いたいと思っているであろう独自のロボットを持っているなら、<a href="http://gazebosim.org/user_guide/started__models__database.html">Gazeboのモデルデータベース</a>にあなたのURDFを追加することをおすすめします。これは、インターネットからモデルをダウンロードする際にGazeboが接続するオンラインサーバーです。このよく変更のあるレポジトリは<a href="https://bitbucket.org/osrf/gazebo_models">Bitbucket</a>に設置されてます。あなたのロボットをデータベースに追加するには、どうやってpullリクエストを投稿すればよいかなど、<a href="http://gazebosim.org/user_guide/started__models__database.html">Gazeboのモデルデータベース</a>ドキュメントをご覧ください。</p>

<h2>次のステップ</h2>

<p>これでURDFを含むROSパッケージをGazeboと一緒に使用する方法を学びました。また、あなた独自のURDFをGazeboで動作するように変換する方法も学びました。あなたのURDFのロボットにぷrグインを追加する方法を学ぶ準備が出来ました。なので、あなたのロボットやシミュレートされる環境の他の面をコントロールできます。<a href="http://gazebosim.org/tutorials?tut=ros_gzplugins">ROS Motor and Sensor Plugins</a>をご覧ください。</p>
]]></content>
  </entry>
  
</feed>
