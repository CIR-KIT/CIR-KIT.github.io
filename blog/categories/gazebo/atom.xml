<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gazebo | 九州工業大学 CIR-KIT Blog]]></title>
  <link href="http://cir-kit.github.io/blog/categories/gazebo/atom.xml" rel="self"/>
  <link href="http://cir-kit.github.io/"/>
  <updated>2015-02-23T12:14:34+09:00</updated>
  <id>http://cir-kit.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[No.6-6:GazeboをROSに繋ぐ (ROSにおけるGazeboのプラグイン 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/19/gazebo-gazebo-plugins-in-ros/"/>
    <updated>2015-02-19T03:23:21+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/19/gazebo-gazebo-plugins-in-ros</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/19/2015 (Thu)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「Gazebo Plugins in ROS」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : ROSとともにGazeboのプラグインを使う</h2>

<p>Gazeboのプラグインはあなたのrおボットモデルにより良い機能性を提供し、ROSのセンサ出力やモータ入力のためのメッセージやサービスコールと繋ぐことができる。このチュートリアルでは、すでに存在するプラグインをセットアップするやり方と、ROSとともに動作する独自のプラグインを作る方法を説明します。</p>

<h2>前提条件</h2>

<p><a href="https://cir-kit.github.io/blog/2015/02/17/gazebo-urdf-in-gazebo/">前回のURDFに関するチュートリアル</a>で述べた時のRRBotのセットアップを行っていることを確認してください。</p>

<h2>プラグインを追加する</h2>

<p>プラグインをURDFのメイン要素の多くに追加することができます。 - プラグインが注目し、目的としているものに依存している<code>&lt;robot&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;joint&gt;</code>などのことです。プラグインをあなたのURDFの主な要素に追加するには、<code>&lt;gazebo&gt;</code>要素にある<code>&lt;plugin&gt;</code>タグをラップする必要があります。</p>

<h3><code>&lt;robot&gt;</code>要素にプラグインを追加する</h3>

<p>以下に示すのは、URDFにある<code>&lt;robot&gt;</code>要素へのプラグインの例である。:</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="differential_drive_controller" filename="libdiffdrive_plugin.so"&gt;
    ... plugin parameters ...
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<p>上記の例のプラグインは<code>&lt;robot&gt;</code>要素に追加されている。なぜなら他の<code>&lt;gazebo&gt;</code>要素やプロパティをと同じように、もし<code>reference="x"</code>がないということは、<code>&lt;robot&gt;</code>全体を参照していると定義しているのである。<a href="http://gazebosim.org/sdf/">SDF</a>フォーマットでは、<code>&lt;model&gt;</code>を参照すると考えられる。</p>

<h3><code>&lt;link&gt;</code>要素にプラグインを追加する</h3>

<p><code>&lt;robot&gt;</code>要素での<code>&lt;plugin&gt;</code>と同じように、<code>reference"your_link_name"</code>とすることで、<code>&lt;link&gt;</code>に<code>&lt;plugin&gt;</code>要素を追加することが可能です。</p>

<pre><code class="xml">&lt;gazebo reference="your_link_name"&gt;
  &lt;plugin name="your_link_laser_controller" filename="libgazebo_ros_laser.so"&gt;
    ... plugin parameters ...
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3><code>&lt;joint&gt;</code>要素にプラグインを追加する</h3>

<p>これはレファレンスの名前を除く、<code>&lt;link&gt;</code>の項で説明したものと同じで、<code>link</code>の部分を<code>joint</code>とします。</p>

<h2><code>gazebo_plugins</code>で利用可能なプラグイン</h2>

<p>以下のセクションでは、<code>gazebo_plugins</code>で利用可能なすべてのプラグインについて説明します。私達はこれらを閲覧することをおすすめします。というのも、さらなる詳細については最初のプラグインの組み合わせによってわかりづらくなっており、様々なプラグインのドキュメントからいくつかのコンセプトを学ぶことができるからです。<br/>
それぞれのセクションの名前はプラグインのクラスの名前によって決定されています。例えば、<strong>Block Laser</strong>は<code>GazeboRosBlockLaser</code>クラスから来ており、それは<code>gazebo_plugins/src/gazebo_ros_block_laser.cpp</code>の中にあります。<br/>
もしいくつかのセクションの空白があるなら、その筆者がすべてのプラグインを説明するのがめんどくさくなったということであり、そういったプラグインの使い方に関する知識と経験を積むことでそれを埋め合わさなければなりません。</p>

<h3>カメラ</h3>

<p><strong>注意 : </strong><code>CamderaInfo</code>や<code>Image ROS messages</code>を<code>sensormsgs</code>として記述し、publishすることにより、<code>wge100camera</code>のようなカメラをシミュレーションする際には、ROSインターフェースを用意してください。</p>

<h2>RRBotの例</h2>

<p>このセクションでは、RRBotの振り子型の腕の先に付けられた単純なRGBカメラについて検証してゆきます。以下の説明で、<code>rrbot.xacro</code>を見てゆくことができます。このブロックの最初の要素は、特別なリンクと、カメラを表すURDFファイルに追加されているジョイントについてです。カメラを表現するために、ここでは単純な赤い箱を使います。しかし、通常はより良い表現のために、メッシュファイルを使うことができます。</p>

<pre><code class="xml">  &lt;joint name="camera_joint" type="fixed"&gt;
    &lt;axis xyz="0 1 0" /&gt;
    &lt;origin xyz="${camera_link} 0 ${height3 - axel_offset*2}" rpy="0 0 0"/&gt;
    &lt;parent link="link3"/&gt;
    &lt;child link="camera_link"/&gt;
  &lt;/joint&gt;

  &lt;!-- Camera --&gt;
  &lt;link name="camera_link"&gt;
    &lt;collision&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
    &lt;box size="${camera_link} ${camera_link} ${camera_link}"/&gt;
      &lt;/geometry&gt;
    &lt;/collision&gt;

    &lt;visual&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
    &lt;box size="${camera_link} ${camera_link} ${camera_link}"/&gt;
      &lt;/geometry&gt;
      &lt;material name="red"/&gt;
    &lt;/visual&gt;

    &lt;inertial&gt;
      &lt;mass value="1e-5" /&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" /&gt;
    &lt;/inertial&gt;
  &lt;/link&gt;
</code></pre>

<p>Xacroのプロパティもまた以下のように定義されています。:</p>

<pre><code class="xml">  &lt;xacro:property name="camera_link" value="0.05" /&gt; &lt;!-- Size of square 'camera' box --&gt;
</code></pre>

<p>RRBotをlaunchし、アームの先に取り付けられたカメラを確認することができるはずです。</p>

<p>続いて、カメラの機能性を与え、ROSメッセージにイメージをpublishするGazeboのプラグインについて検証して行きます。RRBotでは、<code>rrbot.gazebo</code>ファイルにGazeboの要素を記述するという決まりに従ってきました。:</p>

<pre><code class="xml">  &lt;gazebo reference="camera_link"&gt;
    &lt;sensor type="camera" name="camera1"&gt;
      &lt;update_rate&gt;30.0&lt;/update_rate&gt;
      &lt;camera name="head"&gt;
        &lt;horizontal_fov&gt;1.3962634&lt;/horizontal_fov&gt;
        &lt;image&gt;
          &lt;width&gt;800&lt;/width&gt;
          &lt;height&gt;800&lt;/height&gt;
          &lt;format&gt;R8G8B8&lt;/format&gt;
        &lt;/image&gt;
        &lt;clip&gt;
          &lt;near&gt;0.02&lt;/near&gt;
          &lt;far&gt;300&lt;/far&gt;
        &lt;/clip&gt;
        &lt;noise&gt;
          &lt;type&gt;gaussian&lt;/type&gt;
          &lt;!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. --&gt;
          &lt;mean&gt;0.0&lt;/mean&gt;
          &lt;stddev&gt;0.007&lt;/stddev&gt;
        &lt;/noise&gt;
      &lt;/camera&gt;
      &lt;plugin name="camera_controller" filename="libgazebo_ros_camera.so"&gt;
        &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;
        &lt;updateRate&gt;0.0&lt;/updateRate&gt;
        &lt;cameraName&gt;rrbot/camera1&lt;/cameraName&gt;
        &lt;imageTopicName&gt;image_raw&lt;/imageTopicName&gt;
        &lt;cameraInfoTopicName&gt;camera_info&lt;/cameraInfoTopicName&gt;
        &lt;frameName&gt;camera_link&lt;/frameName&gt;
        &lt;hackBaseline&gt;0.07&lt;/hackBaseline&gt;
        &lt;distortionK1&gt;0.0&lt;/distortionK1&gt;
        &lt;distortionK2&gt;0.0&lt;/distortionK2&gt;
        &lt;distortionK3&gt;0.0&lt;/distortionK3&gt;
        &lt;distortionT1&gt;0.0&lt;/distortionT1&gt;
        &lt;distortionT2&gt;0.0&lt;/distortionT2&gt;
      &lt;/plugin&gt;
    &lt;/sensor&gt;
  &lt;/gazebo&gt;
</code></pre>

<p>このプラグインのいくつかのプラグインについて考えてみましょう&hellip;</p>

<pre><code class="xml">  &lt;gazebo reference="camera_link"&gt;
</code></pre>

<p><strong>&ldquo;camera_link&rdquo;</strong>というリンクの名前はXacroのURDFに追加した名前と一致しなければなりません。</p>

<pre><code class="xml">    &lt;sensor type="camera" name="camera1"&gt;
</code></pre>

<p><strong>&ldquo;camera1&rdquo;</strong>というセンサの名前は他のセンサの名前と一致してはいけません。この名前は、アクセス可能なGazeboプラグインの中にあるものを除き、他のところで使用してはいけません。</p>

<pre><code class="xml">      &lt;update_rate&gt;30.0&lt;/update_rate&gt;
</code></pre>

<p>Gazeboで何秒ごとに新しいカメライメージを取得するのかという値です。これはセンサがシミュレーションの間に行う最大のアップデートレートです。しかし、もし物理シミュレータがセンサジェネレーションの苦心より早ければ、この目標レートには到達しないこともあります。</p>

<pre><code class="xml">        &lt;horizontal_fov&gt;1.3962634&lt;/horizontal_fov&gt;
        &lt;image&gt;
          &lt;width&gt;800&lt;/width&gt;
          &lt;height&gt;800&lt;/height&gt;
          &lt;format&gt;R8G8B8&lt;/format&gt;
        &lt;/image&gt;
        &lt;clip&gt;
          &lt;near&gt;0.02&lt;/near&gt;
          &lt;far&gt;300&lt;/far&gt;
        &lt;/clip&gt;
</code></pre>

<p>あなたの物理的なカメラハードウェアについての製造仕様と一致するように値を代入してください。ただし、ピクセルは正方形と仮定されているということを覚えてください。
加えて、ニアクリップとファークリップは、シミュレーション中でカメラが見ることのできる範囲内の距離のための、物体を上下を定義する<code>simulation-specific</code>パラメータです。これは、カメラのオプトメトリフレームの中で定義されています。</p>

<pre><code class="xml">      &lt;plugin name="camera_controller" filename="libgazebo_ros_camera.so"&gt;
</code></pre>

<p>これは、現在の<code>gazeboros/gazeboros_camera.cpp</code>ファイルにあり、共有物体としてリンク付けされています。</p>

<pre><code class="xml">        &lt;cameraName&gt;rrbot/camera1&lt;/cameraName&gt;
        &lt;imageTopicName&gt;image_raw&lt;/imageTopicName&gt;
        &lt;cameraInfoTopicName&gt;camera_info&lt;/cameraInfoTopicName&gt;
</code></pre>

<p>ここに、カメラが<code>image</code>、<code>topic</code>、<code>camera info topic</code>としてpublishしているrostopicを定義します。とぴくもRRBotでは、以下のようなものをsubscribeできるはずです。:</p>

<pre><code>/rrbot/camera1/image_raw
/rrbot/camera1/camera_info

        &lt;frameName&gt;camera_link&lt;/frameName&gt;
</code></pre>

<p>imageの座標系は、<code>tf</code>ツリーの下でpublishされています。</p>

<h2>RRBotの例を実行する</h2>

<p><code>rrbot.xacro</code>と<code>rrbot.gazebo</code>を保存したあと、RvizとGazeboをそれぞれ異なるターミナルでlaunchできるはずです。:</p>

<pre><code class="bash">roslaunch rrbot_gazebo rrbot_world.launch
roslaunch rrbot_description rrbot_rviz.launch
</code></pre>

<p>Rvizでは、<strong>Camera</strong>ディスプレイを追加し、<strong>image Topic</strong>を<code>/rrbot/camera1/</code>と設定してください。<br/>
前回のチュートリアルからは特に変更せず、上記のコマンドを実行すると、Rvizは以下の動画のようになるはずです。<br/>
尚、コーラのカンはわかりやすさのために設置しました。また、Gazeboでは、前回のチュートリアルと同様の動作が起きています。</p>

<div class="youtube-container">
<iframe width="420" height="315" src="https://www.youtube.com/embed/JlAculkV5Ug" frameborder="0" allowfullscreen></iframe>
</div>


<h3>マルチカメラ</h3>

<p><strong>説明 : </strong> マルチカメラは、イメージを当時にpublishするように、同時にシャッターを切ります。典型的には、ステレオカメラで使われており、普通の<code>Camera</code>プラグインのインターフェースと同じように使用されています。<br/>
<strong>注意 : </strong>現在は、ステレオカメラのみをサポートしています。<a href="https://github.com/osrf/gazebo_ros_pkgs/issues/13">Github issue</a>をご覧ください。</p>

<h4>Atlasのコードの例</h4>

<p>このコードの例では、左右のカメラがあります。:</p>

<pre><code class="xml">In this code example there is both a left and right camera:

  &lt;gazebo reference="left_camera_frame"&gt;
    &lt;sensor type="multicamera" name="stereo_camera"&gt;
      &lt;update_rate&gt;30.0&lt;/update_rate&gt;
      &lt;camera name="left"&gt;
        &lt;horizontal_fov&gt;1.3962634&lt;/horizontal_fov&gt;
        &lt;image&gt;
          &lt;width&gt;800&lt;/width&gt;
          &lt;height&gt;800&lt;/height&gt;
          &lt;format&gt;R8G8B8&lt;/format&gt;
        &lt;/image&gt;
        &lt;clip&gt;
          &lt;near&gt;0.02&lt;/near&gt;
          &lt;far&gt;300&lt;/far&gt;
        &lt;/clip&gt;
        &lt;noise&gt;
          &lt;type&gt;gaussian&lt;/type&gt;
          &lt;mean&gt;0.0&lt;/mean&gt;
          &lt;stddev&gt;0.007&lt;/stddev&gt;
        &lt;/noise&gt;
      &lt;/camera&gt;
      &lt;camera name="right"&gt;
        &lt;pose&gt;0 -0.07 0 0 0 0&lt;/pose&gt;
        &lt;horizontal_fov&gt;1.3962634&lt;/horizontal_fov&gt;
        &lt;image&gt;
          &lt;width&gt;800&lt;/width&gt;
          &lt;height&gt;800&lt;/height&gt;
          &lt;format&gt;R8G8B8&lt;/format&gt;
        &lt;/image&gt;
        &lt;clip&gt;
          &lt;near&gt;0.02&lt;/near&gt;
          &lt;far&gt;300&lt;/far&gt;
        &lt;/clip&gt;
        &lt;noise&gt;
          &lt;type&gt;gaussian&lt;/type&gt;
          &lt;mean&gt;0.0&lt;/mean&gt;
          &lt;stddev&gt;0.007&lt;/stddev&gt;
        &lt;/noise&gt;
      &lt;/camera&gt;
      &lt;plugin name="stereo_camera_controller" filename="libgazebo_ros_multicamera.so"&gt;
        &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;
        &lt;updateRate&gt;0.0&lt;/updateRate&gt;
        &lt;cameraName&gt;multisense_sl/camera&lt;/cameraName&gt;
        &lt;imageTopicName&gt;image_raw&lt;/imageTopicName&gt;
        &lt;cameraInfoTopicName&gt;camera_info&lt;/cameraInfoTopicName&gt;
        &lt;frameName&gt;left_camera_optical_frame&lt;/frameName&gt;
        &lt;!--&lt;rightFrameName&gt;right_camera_optical_frame&lt;/rightFrameName&gt;--&gt;
        &lt;hackBaseline&gt;0.07&lt;/hackBaseline&gt;
        &lt;distortionK1&gt;0.0&lt;/distortionK1&gt;
        &lt;distortionK2&gt;0.0&lt;/distortionK2&gt;
        &lt;distortionK3&gt;0.0&lt;/distortionK3&gt;
        &lt;distortionT1&gt;0.0&lt;/distortionT1&gt;
        &lt;distortionT2&gt;0.0&lt;/distortionT2&gt;
      &lt;/plugin&gt;
    &lt;/sensor&gt;
  &lt;/gazebo&gt;
</code></pre>

<h3>深度カメラ</h3>

<p><strong>説明 : </strong><code>Kinect</code>のようにセンサをシミュレートします。また、これは<code>Kinect</code>プラグインにもあります。将来的には、統合します。</p>

<h3>Openni Kinect</h3>

<p><strong>説明 : </strong><code>Xbox-Kinect</code>をシミュレートし、<a href="http://www.ros.org/wiki/openni_camera">Fuerteドキュメント</a>で説明されている、<code>Xbox kinect</code>用のROSドライバと一致するようなトピックをpublishします。</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="${link_name}_controller" filename="libgazebo_ros_openni_kinect.so"&gt;
    &lt;baseline&gt;0.2&lt;/baseline&gt;
    &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;
    &lt;updateRate&gt;1.0&lt;/updateRate&gt;
    &lt;cameraName&gt;${camera_name}_ir&lt;/cameraName&gt;
    &lt;imageTopicName&gt;/${camera_name}/depth/image_raw&lt;/imageTopicName&gt;
    &lt;cameraInfoTopicName&gt;/${camera_name}/depth/camera_info&lt;/cameraInfoTopicName&gt;
    &lt;depthImageTopicName&gt;/${camera_name}/depth/image_raw&lt;/depthImageTopicName&gt;
    &lt;depthImageInfoTopicName&gt;/${camera_name}/depth/camera_info&lt;/depthImageInfoTopicName&gt;
    &lt;pointCloudTopicName&gt;/${camera_name}/depth/points&lt;/pointCloudTopicName&gt;
    &lt;frameName&gt;${frame_name}&lt;/frameName&gt;
    &lt;pointCloudCutoff&gt;0.5&lt;/pointCloudCutoff&gt;
    &lt;distortionK1&gt;0.00000001&lt;/distortionK1&gt;
    &lt;distortionK2&gt;0.00000001&lt;/distortionK2&gt;
    &lt;distortionK3&gt;0.00000001&lt;/distortionK3&gt;
    &lt;distortionT1&gt;0.00000001&lt;/distortionT1&gt;
    &lt;distortionT2&gt;0.00000001&lt;/distortionT2&gt;
    &lt;CxPrime&gt;0&lt;/CxPrime&gt;
    &lt;Cx&gt;0&lt;/Cx&gt;
    &lt;Cy&gt;0&lt;/Cy&gt;
    &lt;focalLength&gt;0&lt;/focalLength&gt;
    &lt;hackBaseline&gt;0&lt;/hackBaseline&gt;
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3>GPUレーザー</h3>

<p><strong>説明 : </strong><code>sensor_msgs</code>で記述されている<code>LaserScan</code>メッセージを配信し、レーザーレンジセンサをシミュレートします。<a href="http://ros.org/wiki/hokuyo_node">Hokuyo Laser Scannersレファレンス</a>をご覧ください。<br/>
この例を試す前に、カメラをRRBotに追加した例をご覧ください。カメラを追加するのと同じように、新しいリンクとジョイントをRRBotのXacro URDFに追加することができます。今回は、外観モデルをカメラの時のように直方体だけで表現せず、メッシュを使います。:</p>

<pre><code class="xml">  &lt;joint name="hokuyo_joint" type="fixed"&gt;
    &lt;axis xyz="0 1 0" /&gt;
    &lt;origin xyz="0 0 ${height3 - axel_offset/2}" rpy="0 0 0"/&gt;
    &lt;parent link="link3"/&gt;
    &lt;child link="hokuyo_link"/&gt;
  &lt;/joint&gt;

  &lt;!-- Hokuyo Laser --&gt;
  &lt;link name="hokuyo_link"&gt;
    &lt;collision&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
    &lt;box size="0.1 0.1 0.1"/&gt;
      &lt;/geometry&gt;
    &lt;/collision&gt;

    &lt;visual&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
        &lt;mesh filename="package://rrbot_description/meshes/hokuyo.dae"/&gt;
      &lt;/geometry&gt;
    &lt;/visual&gt;

    &lt;inertial&gt;
      &lt;mass value="1e-5" /&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" /&gt;
    &lt;/inertial&gt;
  &lt;/link&gt;
</code></pre>

<p>続いて、カメラの例の時と同様に、<code>rrbot.gazebo</code>にプラグインの情報を追加します。</p>

<pre><code class="xml">  &lt;!-- hokuyo --&gt;
  &lt;gazebo reference="hokuyo_link"&gt;
    &lt;sensor type="gpu_ray" name="head_hokuyo_sensor"&gt;
      &lt;pose&gt;0 0 0 0 0 0&lt;/pose&gt;
      &lt;visualize&gt;false&lt;/visualize&gt;
      &lt;update_rate&gt;40&lt;/update_rate&gt;
      &lt;ray&gt;
        &lt;scan&gt;
          &lt;horizontal&gt;
            &lt;samples&gt;720&lt;/samples&gt;
            &lt;resolution&gt;1&lt;/resolution&gt;
            &lt;min_angle&gt;-1.570796&lt;/min_angle&gt;
            &lt;max_angle&gt;1.570796&lt;/max_angle&gt;
          &lt;/horizontal&gt;
        &lt;/scan&gt;
        &lt;range&gt;
          &lt;min&gt;0.10&lt;/min&gt;
          &lt;max&gt;30.0&lt;/max&gt;
          &lt;resolution&gt;0.01&lt;/resolution&gt;
        &lt;/range&gt;
        &lt;noise&gt;
          &lt;type&gt;gaussian&lt;/type&gt;
          &lt;!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range &lt; 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. --&gt;
          &lt;mean&gt;0.0&lt;/mean&gt;
          &lt;stddev&gt;0.01&lt;/stddev&gt;
        &lt;/noise&gt;
      &lt;/ray&gt;
      &lt;plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so"&gt;
        &lt;topicName&gt;/rrbot/laser/scan&lt;/topicName&gt;
        &lt;frameName&gt;hokuyo_link&lt;/frameName&gt;
      &lt;/plugin&gt;
    &lt;/sensor&gt;
  &lt;/gazebo&gt;
</code></pre>

<p>ほとんどのプロパティは自明ですが、以下のものを検証したいと思います。:</p>

<pre><code class="xml">      &lt;visualize&gt;false&lt;/visualize&gt;
</code></pre>

<p>これが<code>true</code>の時は、GPUレーザのスキャンしている範囲内で半透明のレーザーレイが表示されます。これは視覚的に有効かもしれませんし、邪魔になるかもしれません。<br/>
この要素についてのより詳しい説明は、<a href="http://gazebosim.org/sdf/dev.html#sensor225">SDFドキュメント</a>に載っています。</p>

<pre><code class="xml">&lt;topicName&gt;/rrbot/laser/scan&lt;/topicName&gt;
&lt;frameName&gt;hokuyo_link&lt;/frameName&gt;
</code></pre>

<p>publishしたいレーザースキャンのROSのトピック名を設定し、TFで使用した座標系の名前も設定します。</p>

<h2>RRBotの例を実行する</h2>

<p><code>rrbot.xacro</code>と<code>rrbot.gazebo</code>を保存した後、RvizとGazeboをそれぞれ異なるターミナルでlaunchできるはずです。:</p>

<pre><code class="xml">roslaunch rrbot_gazebo rrbot.launch
roslaunch rrbot_description rrbot_rviz.launch
</code></pre>

<p>Rvizでは、<strong>LaserScan</strong>ディスプレイを追加し、<strong>Topic</strong>を<code>/rrbot/camera1/image_raw</code>としてください。<br/>
レーザースキャンラインがGazeboの環境下で確認できるはずです。振り子が揺れている間、レーザースキャンも揺れているのを確認することができます。もし、スキャンが薄すぎるなら、レーザースキャンの大きさをRvizにある<strong>LaserScan</strong>ディスプレイのプロパティから変更できます。大きさは、1[m]とするのが見やすいです。<br/>
この動作は、基本的に先ほど、カメラを追加した例と同じなので、動作の様子は省略します。<br/>
因みに、公式チュートリアルでは、家のモデルなど、大きめのモデルを設置し、動作確認をしています。いろいろ置いてみて、確かめてみましょう。</p>

<h3>レーザー</h3>

<p><strong>説明 : </strong>GPUレーザーの非GPU型のレーザーですが、基本的には同じコードを使用しています。GPUレーザーの説明をご覧ください。<br/>
RRBotで動かすためには、<code>rrbot.gazebo</code>を開き、以下の二行を変更してください。</p>

<pre><code class="xml"> &lt;sensor type="gpu_ray" name="head_hokuyo_sensor"&gt;
 &lt;/sensor&gt;
</code></pre>

<p>を</p>

<pre><code class="xml">&lt;sensor type="ray" name="head_hokuyo_sensor"&gt;
&lt;/sensor&gt;
</code></pre>

<p>に変更するのと、</p>

<pre><code class="xml">&lt;plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so"&gt;
&lt;/plugin&gt;
</code></pre>

<p>を</p>

<pre><code class="xml">&lt;plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so"&gt;
&lt;/plugin&gt;
</code></pre>

<p>に変更してください。
できたら保存し、GPUレーザーの時と同じlaunchファイルでlaunchしてください。</p>

<h3>ブロックレーザー</h3>

<p><strong>説明 : </strong>グリッドスタイルのレーザレンジスキャナのシミュレーションを提供します。(例 : ヴェロダインセンサ)</p>

<h3>F3D (Force Feedback Ground Truth)</h3>

<p><strong>説明 : </strong>シミュレーションの中で<code>geometry_msgs</code>で記述されている<code>WrenchStampd</code>メッセージ上書きして、ボディへの外力を配信します。<a href="http://www.science.aster.ersdac.jspacesystems.or.jp/jp/glossary/jp/ku/ground_truth.html">Ground Truthとは&hellip;</a>
Description: broadcasts external forces on a body in simulation over WrenchStamped message as described in geometry_msgs.</p>

<h3>Force</h3>

<p><strong>説明 : </strong>シミュレーション中のボディに<code>Wrench</code>(<code>geometry_msgs</code>)を適用するためのROSのインターフェースです。</p>

<h3>IMU</h3>

<p><strong>説明 : </strong><a href="http://ros.org/wiki/microstrain_3dmgx2_imu">imu_node</a>をシミュレートします。</p>

<h3>Joint Pose Trajectory</h3>

<p><strong>説明 : </strong><code>jointtrajectoryaction</code>をlistenし、ジョイントの姿勢の設定をプレイバックします。シミュレートされている物理量や力を考慮することなく、ジョイントの設定を正しい位置に設定します。</p>

<h3>P3D (3D Position Interface for Ground Truth)</h3>

<p><strong>説明 : </strong>シミュレーション中のすべてのボディの慣性データを<code>nav_msg</code>に記述されているオドメトリメッセージのROSトピックへ配信します。</p>

<h3>プロジェクタ</h3>

<p><strong>説明 : </strong>ソースから静的テクスチャを表示します。これは、RP2のオリジナルヘッドカメラセンサなどで使用されています。詳しくは、<a href="http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1rendering_1_1Projector.html">APIドキュメント</a>をご覧ください。</p>

<h3>Prosilicaカメラ</h3>

<p><strong>説明 : </strong><a href="http://www.ros.org/wiki/prosilica_camera">ROSのProsilicaカメラ</a>によって配信されるインターフェースをシミュレートします。<a href="https://bitbucket.org/hsu/nasa_r2_simulator/src/5ee1de067038749dcc133ed7cf87b45715cc4457/r2_gazebo/urdf/sensors/grasshopper2.gazebo.xacro?at=hsu">URDF Xacroマクロの例</a>はここです。</p>

<h3>バンパー</h3>

<p><strong>説明 : </strong><a href="http://ros.org/doc/api/gazebo_plugins/html/msg/ContactsState.html"><code>ContactsState</code>メッセージ</a>へコンタクトフィードバックを提供します。</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="${name}_gazebo_ros_bumper_controller" filename="libgazebo_ros_bumper.so"&gt;
    &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;
    &lt;updateRate&gt;${update_rate}&lt;/updateRate&gt;
    &lt;bumperTopicName&gt;${name}_bumper&lt;/bumperTopicName&gt;
    &lt;frameName&gt;world&lt;/frameName&gt;
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3>Differential Drive</h3>

<p><strong>説明 : </strong>Gazeboでのデファレンシャルドライブロボットの基本的なコントローラを提供するモデルプラグインです。このプラグインを使用するには、ディファレンシャルドライブのロボットが必要です。</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so"&gt;
    &lt;alwaysOn&gt;true&lt;/alwaysOn&gt;
    &lt;updateRate&gt;${update_rate}&lt;/updateRate&gt;
    &lt;leftJoint&gt;base_link_right_wheel_joint&lt;/leftJoint&gt;
    &lt;rightJoint&gt;base_link_left_wheel_joint&lt;/rightJoint&gt;
    &lt;wheelSeparation&gt;0.5380&lt;/wheelSeparation&gt;
    &lt;wheelDiameter&gt;0.2410&lt;/wheelDiameter&gt;
    &lt;torque&gt;20&lt;/torque&gt;
    &lt;commandTopic&gt;cmd_vel&lt;/commandTopic&gt;
    &lt;odometryTopic&gt;odom&lt;/odometryTopic&gt;
    &lt;odometryFrame&gt;odom&lt;/odometryFrame&gt;
    &lt;robotBaseFrame&gt;base_footprint&lt;/robotBaseFrame&gt;
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3>Skid Steering Drive</h3>

<p><strong>説明 : </strong>Gazeboでのスキッドステアリングドライブロボットの基本的なコントローラを提供するモデルプラグインです。(例 : Pioneer 3AT)</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so"&gt;
    &lt;updateRate&gt;100.0&lt;/updateRate&gt;
    &lt;robotNamespace&gt;/&lt;/robotNamespace&gt;
    &lt;leftFrontJoint&gt;front_left_wheel_joint&lt;/leftFrontJoint&gt;
    &lt;rightFrontJoint&gt;front_right_wheel_joint&lt;/rightFrontJoint&gt;
    &lt;leftRearJoint&gt;back_left_wheel_joint&lt;/leftRearJoint&gt;
    &lt;rightRearJoint&gt;back_right_wheel_joint&lt;/rightRearJoint&gt;
    &lt;wheelSeparation&gt;0.4&lt;/wheelSeparation&gt;
    &lt;wheelDiameter&gt;0.215&lt;/wheelDiameter&gt;
    &lt;robotBaseFrame&gt;base_link&lt;/robotBaseFrame&gt;
    &lt;torque&gt;20&lt;/torque&gt;
    &lt;topicName&gt;cmd_vel&lt;/topicName&gt;
    &lt;broadcastTF&gt;false&lt;/broadcastTF&gt;
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<h3>ビデオプラグイン</h3>

<p><strong>説明 : </strong>Gazeboの中のOGREテクスチャ上のROSのイメージストリームを表示するビジュアルプラグインです。このプラグインは存在するリンク表面の一つのテクスチャを修正するだけでなく、新しいテクスチャを作ります。このテクスチャはXY平面に作られ、+Zの方向からなら見ることができます。このプラグインはテクスチャを変換するピクセルサイズが必要です。また、サイズが異なれば、ROSイメージメッセージに一致するようリサイズします。</p>

<pre><code class="xml">&lt;gazebo reference="display_screen_link"&gt;
  &lt;visual&gt;
    &lt;plugin name="display_video_controller" filename="libgazebo_ros_video.so"&gt;
      &lt;topicName&gt;image&lt;/topicName&gt;
      &lt;height&gt;120&lt;/height&gt;
      &lt;width&gt;160&lt;/width&gt;
    &lt;/plugin&gt;
  &lt;/visual&gt;
&lt;/gazebo&gt;
</code></pre>

<h3>Planar Move Plugin</h3>

<p><strong>説明 : </strong><code>geometry_msgs/Twist</code>を使って水平面上を動かすために、任意の物体(簡単な例 : 箱、球、円柱)に適用可能なモデルプラグインです。このプラグインは、並進速度(XY)と角速度(Z)をすべてのサイクルで物体に入力することで動きます。<br/>
ここに完全なURDFの例を示します。このURDFではこのプラグインを使ったGazebo中の浮いている箱のコントロール方法を、異なる外観、衝突要素を使って示しています。<br/>
<strong>注意 : </strong>この物体にはありえない動きを避けるため、十分な慣性が必要です。この、ありえない動きとは与えられた速度と反転するなどの形で発生し得ます。慣性の値を大きくしてゆくことにより、望み通りに物体を動かすことができるようになります。また、重心を地面に近づけるというのも良い方法です。</p>

<pre><code class="xml">&lt;robot name="test_model"&gt;

  &lt;!-- root link, on the ground just below the model origin --&gt;
  &lt;link name="base_footprint"&gt;
   &lt;visual&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0" /&gt;
      &lt;geometry&gt;
        &lt;box size="0.001 0.001 0.001" /&gt;
      &lt;/geometry&gt;
    &lt;/visual&gt;
  &lt;/link&gt;

  &lt;joint name="base_link_joint" type="fixed"&gt;
    &lt;origin xyz="0.0 0 1.25" rpy="0 0 0" /&gt;
    &lt;parent link="base_footprint"/&gt;
    &lt;child link="base_link" /&gt;
  &lt;/joint&gt;

  &lt;!-- the model --&gt;
  &lt;link name="base_link"&gt;
    &lt;inertial&gt;
      &lt;mass value="50" /&gt;
      &lt;origin xyz="0 0 -1.25" /&gt;
      &lt;inertia ixx="50.0" ixy="0.0" ixz="0.0"
        iyy="50.0" iyz="0.0"
        izz="50.0" /&gt;
    &lt;/inertial&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;box size="0.5 0.5 1.0" /&gt; &lt;!-- does not need to match collision --&gt;
      &lt;/geometry&gt;
    &lt;/visual&gt;
    &lt;collision&gt;
      &lt;origin xyz="0 0 -1.0" /&gt;
      &lt;geometry&gt;
        &lt;cylinder length="0.5" radius="0.25" /&gt;
      &lt;/geometry&gt;
    &lt;/collision&gt;
  &lt;/link&gt;

  &lt;gazebo&gt;
    &lt;plugin name="object_controller" filename="libgazebo_ros_planar_move.so"&gt;
      &lt;commandTopic&gt;cmd_vel&lt;/commandTopic&gt;
      &lt;odometryTopic&gt;odom&lt;/odometryTopic&gt;
      &lt;odometryFrame&gt;odom&lt;/odometryFrame&gt;
      &lt;odometryRate&gt;20.0&lt;/odometryRate&gt;
      &lt;robotBaseFrame&gt;base_footprint&lt;/robotBaseFrame&gt;
    &lt;/plugin&gt;
  &lt;/gazebo&gt;

&lt;/robot&gt;
</code></pre>

<h3>テンプレート</h3>

<p><strong>説明 : </strong>自身のプラグインを書きたいと思っている方用のC++のプラグインテンプレートの例です。</p>

<h2>次のステップ</h2>

<p>次は、<code>controller/actuator/simulator</code>と<a href="http://gazebosim.org/tutorials/?tut=ros_control">Actuators, controllers, <code>ros_control</code></a>のタイトな統合のためにGazeboと統合された<code>ros_control</code>パッケージについて検証します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-5:GazeboをROSに繋ぐ (GazeboにおけるURDF 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/17/gazebo-urdf-in-gazebo/"/>
    <updated>2015-02-17T17:03:28+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/17/gazebo-urdf-in-gazebo</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/17/2015 (Tue)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「URDF in Gazebo」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : GazeboでURDFを使う</h2>

<p><a href="http://www.ros.org/wiki/urdf">Universal Robotic Description Format (URDF)</a>は、ロボットのすべての要素を記述するために、Gazeboでも使われている、XMLフォーマットを使用しています。URDFファイルをGazeboで使用し、Gazeboで適切に動作させるには、いくつかの追加シミュレーション定義のタグがにつようです。このチュートリアルでは、GazeboであなたのURDFベースのロボットを確実に動作させ、<code>sctatch</code>や二重定義フォーマットによる、分割SDFファイルを作るのを避けるために、必要な過程を説明します。プログラム内部では、Gazeboは自動で、URDFをSDFファイルに変換しています。</p>

<h2>背景</h2>

<p>URDFは使いやすく、ROSでも一般化されているフォーマットですが、多くの定義について欠陥があり、ロボティクスの発展的な内容を記述するには至っていません。URDFは、独立した、ひとつのロボットの、幾何学的要素と運動要素しか定義できません。また、URDFはロボットのいるシミュレータ上のロボットの姿勢を定義できません。さらに、ジョイントループ(平行なリンク機構)を定義できないだけでなく、摩擦などの要素を記述できないので、標準的なフォーマットではないのです。さらに加えて述べると、ロボットでない、証明や標高地図などを定義することはできません。<br/>
実際に使うという面では、URDFの文法は処理するのに重く、完全なフォーマットを行わず、XMLフォーマットを使用しています。これにより、URDFはより柔軟になっています。また、後方互換性ももちません。<br/>
こういった問題に対処し、URDFの欠陥を解決するために、Gazeboでは、<a href="http://gazebosim.org/sdf.html">Simulator Description Format (SDF</a>と呼ばれる新しいフォーマットが作られました。SDFは、worldレベル(シミュレーション環境を記述するレベル)からロボットレベル（ロボットを記述するレベル）に至るまで、全てにおいて、完全な記述です。
SDFは規模を自由に決定でき、修正要素を追加するのも簡単です。SDFフォーマット自体は、古いバージョンから新しいバージョンへ変換するために、シンプルなアップグレードツールを簡単に使用できるような、XMLを使って記述しています。<br/>
URDFをできるだけ完全なドキュメントとし、Gazeboでサポートしようとすることは、筆者の意図するところですが、読者にとっては、なぜ２つのフォーマットが存在し、それぞれに欠陥があるのか疑問に思うのは至極当然なことです。URDFをロボティクスにおkるニーズに完全に対応させることができれば、それは素晴らしいことです。</p>

<h2>Gazeboへの実装の概要</h2>

<p>URDFのロボットをGazeboで完全に動作させるにはたくさんのステップがあります。以下に示すのは、このチュートリアルの残りで述べる、詳細なステップの概要です。:</p>

<h3>必須条件</h3>

<ul>
<li><code>&lt;link&gt;</code>要素にある、<code>&lt;internal&gt;</code>要素は完全にかつ詳細に定義され、構成されている必要があります。</li>
</ul>


<h3>任意条件</h3>

<ul>
<li><code>&lt;gazebo&gt;</code>要素をすべての<code>&lt;link&gt;</code>に追加する

<ul>
<li>Gazeboのフォーマットに外観色を変換する</li>
<li>stlファイルをより良いテクスチャによってdaeファイルに変換する</li>
<li>センサプラグインを追加する</li>
</ul>
</li>
<li><code>&lt;gazebo&gt;</code>要素をすべての<code>&lt;link&gt;</code>に追加する

<ul>
<li>適切な同ダンパを定義する</li>
<li>アクチュエータの制御プラグインを追加する</li>
</ul>
</li>
<li><code>&lt;gazebo&gt;</code>要素をすべての<code>&lt;robot&gt;</code>要素に追加する</li>
<li>もし、ロボットが正確に<code>world/base_link</code>へ接続されるべきなら、<code>&lt;link name="world"/&gt;</code>を追加する</li>
</ul>


<h2>前提条件</h2>

<p>あなたのロボットをGazeboで起動させるために必要な最初のステップは、<a href="http://www.ros.org/wiki/urdf/Tutorials">ROS URDFチュートリアル</a>から、動作するURDFファイルを用意ことです。Gazeboであなたのロボットを動作させる前に、<a href="http://www.ros.org/wiki/rviz">Rviz</a>で表示して検証してください。このチュートリアルでは、<code>RRBot</code>というシンプルなデモ用ロボットを使います。このロボットを使っても自身のものを使ってもどちらでも構いません。</p>

<h3>RRBotを手に入れる</h3>

<p><code>RRBot</code>(Revolute-Revolute Manipulator Robot)は簡単な3つのリンク機構、2つのジョイントアームを持つロボットで、GazeboとURDFの様々な特徴を検証するのに使います。これは、基本的に<a href="http://en.wikipedia.org/wiki/Double_inverted_pendulum">２つの倒立振り子</a>であり、シミュレータでは、いくつかの面白い制御構想を検証します。<br/>
<code>RRBot</code>を手に入れるには、もし、<code>catkin</code>ワークスペースがあるなら、その<code>src</code>フォルダに、GitHubのレポジトリより<code>clone</code>し、ワークスペースをリビルドしてください。</p>

<pre><code class="bash">cd ~/catkin_ws/src/
git clone https://github.com/ros-simulation/gazebo_ros_demos.git
cd ..
catkin_make
</code></pre>

<p>もし、何を言っているのかよくわからなけれが、先に、<a href="http://gazebosim.org/tutorials?tut=ros_overview">ROS Overview Tutorials</a>を読んでください。</p>

<h3>Rvizで見てみる</h3>

<p>すべてうまく行っているか確かめるために、<code>RRBot</code>をRvizでlaunchしてください。:</p>

<pre><code class="bash">roslaunch rrbot_description rrbot_rviz.launch
</code></pre>

<p>すると、以下のようになるはずです。
<img src="/images/2015-02-17-gazebo-urdf-in-gazebo/rrbot-rviz-1.png" alt="rrbot-rviz-1" />
もし、こうならなければ、<code>killall roscore</code>コマンドで起動中のすべての<code>roscore</code>プロセスを終了し、再びRVizをlaunchしてください。<br/>
また、２つのジョイントを動かすために、<code>Joint State Publisher</code>ウィンドウで<code>slider bars</code>を実行することもできるはずです。<br/>
Gazeboであなたのロボットが動くように変換するあいだ、Rvizや他のROSアプリケーションを終了させないということが重要です。なので、たまにRVizのロボットがすべてきちんと動いているか確かめるのは良いことです。</p>

<p><a href="http://cir-kit.github.io/blog/2015/02/14/gazebo-ros-overview/">ROSの概要</a>チュートリアルでは、Gazeboから直接<code>/jointstates</code>をpublishして、あなたのロボットの状態を表示するための、Rvizの使い方は飛ばしました。この例では、RVizのRRBotは、ダミーの<code>jointstate</code>パブリッシャーノード（スライドバー月のウィンドウ）からの<code>/jointstates</code>を取得(subscribe)しています。</p>

<h3>urdfのRRBotを試してみる</h3>

<p>このチュートリアルの残りでは、RRBotのURDFのいろいろな面を見てゆきます。早速ファイルを見てみましょう。:</p>

<pre><code class="bash">rosed rrbot_description rrbot.xacro
</code></pre>

<p>いくつかのリンクやジョイントの計算を簡単にするために、<a href="http://ros.org/wiki/xacro">Xacro</a>を使用していることに注意してください。また、２つの追加ファイルもインクルードしています。
- rrbot.gazebo : ほとんどすべてのGazebo定義XML要素をタグに含むGazeboの定義ファイルです。
- materials.xacro : 文字列のRGBA値のための簡単なRVizのカラーファイルであり、必須のものではありませんが、あったほうが良い定義です。</p>

<h3>Gazeboで見てみる</h3>

<p>GazeboでもRRBotをlaunchできるはずです。:</p>

<pre><code class="bash">roslaunch rrbot_gazebo rrbot_world.launch
</code></pre>

<p>launchされたGazeboのウィンドウで、直立した状態のロボットを確認できるはずです。デフォルトには物理シミュレータに恣意的な障害物が無いにも関わらず、数値エラーが始まりと当時に起こり、２つの倒立振子が数秒後に落ちます。以下に示すのは、RRBotが動いている（倒立振子が落ちている）途中の様子です。:
<img src="/images/2015-02-17-gazebo-urdf-in-gazebo/rrbot-gazebo-1.png" alt="rrbot-gazebo-1" />
最終的には、アームは完全に停止します。以下のチュートリアル間、URDFのロボットのシミュレーションについて学ぶのを手助けするために、URDFのいろんな面を引っ張ってテストしてみることをおすすめします。</p>

<h2>URDFファイルのヘッダ</h2>

<p>GazeboにはAPIの変更がたくさんあり、URDFフォーマットが必要とされてきており、その中でも、Gazeboの<code>xml-schema</code>という名前空間はすでに必要とされなくなりました。もし、あなたのURDFが以下のようであるなら、:</p>

<pre><code class="xml">&lt;robot xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
       xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
       xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
       xmlns:xacro="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
       name="pr2" &gt;
</code></pre>

<p>これらは削除して構いません。もし以下のものを使っているなら、ロボットのエレメントタグに必要なものはロボットの名前とxacroの任意のxmlの名前空間です。:</p>

<pre><code class="xml">&lt;robot name="rrbot" xmlns:xacro="http://www.ros.org/wiki/xacro"&gt;
</code></pre>

<h3>タグの<code>&lt;gazebo&gt;</code>要素</h3>

<p>もし、<code>&lt;gazebo&gt;</code>要素が<code>reference==""</code>という記述無しで使用してあるなら、<code>&lt;gazebo&gt;</code>要素はすべてのロボットモデルのものと仮定されます。<code>&lt;gazebo&gt;</code>タグにある<code>&lt;robot&gt;</code>要素は以下の表のようになっています。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> タイプ </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">static </td>
<td style="text-align:center;">   bool   </td>
<td style="text-align:center;">    もし<code>true</code>にすると、モデルは動かなくなります。しかしながら、モデルは物理エンジンの中でシミュレーションされます。 </td>
</tr>
</tbody>
</table>


<p>先ほどの表には無くて、<code>&lt;gazebo&gt;</code>タグにある要素は、生成されるSDFファイルの<code>&lt;model&gt;</code>タグに直接挿入されます。<br/>
これは、<a href="http://gazebosim.org/tutorials?tut=ros_gzplugins">ROS Motor and Sensor Plugins</a>チュートリアルについて議論するときに、特にプラグインにおいて有用です。</p>

<h2>モデルをworldに正しく変換する</h2>

<p>もしあなたのURDFモデルをworldフレーム(<code>the ground plane</code>)に永久に設置された状態にしたいのなら、モデルのベースとなるように変換された、<code>world</code>リンクとジョイントを作らなければなりません。RRBotでは以下のようにすれば、それが可能です。</p>

<pre><code class="xml">  &lt;!-- Used for fixing robot to Gazebo 'base_link' --&gt;
  &lt;link name="world"/&gt;

  &lt;joint name="fixed" type="fixed"&gt;
    &lt;parent link="world"/&gt;
    &lt;child link="link1"/&gt;
  &lt;/joint&gt;
</code></pre>

<p>しかし、もしあなたがモバイルベースなどの動くロボットを持っているなら、このリンクやジョイントは必要ありません。</p>

<h2>Links</h2>

<p>URDFの<code>link</code>要素に詳しくなりましょう。<br/>
以下の例はRRBotの<code>link</code>です。</p>

<pre><code class="xml">  &lt;!-- Base Link --&gt;
  &lt;link name="link1"&gt;
    &lt;collision&gt;
      &lt;origin xyz="0 0 ${height1/2}" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
        &lt;box size="${width} ${width} ${height1}"/&gt;
      &lt;/geometry&gt;
    &lt;/collision&gt;

    &lt;visual&gt;
      &lt;origin xyz="0 0 ${height1/2}" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
        &lt;box size="${width} ${width} ${height1}"/&gt;
      &lt;/geometry&gt;
      &lt;material name="orange"/&gt;
    &lt;/visual&gt;

    &lt;inertial&gt;
      &lt;origin xyz="0 0 1" rpy="0 0 0"/&gt;
      &lt;mass value="1"/&gt;
      &lt;inertia
        ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0"/&gt;
    &lt;/inertial&gt;
  &lt;/link&gt;
</code></pre>

<h3>単位における注意</h3>

<p><a href="http://www.ros.org/reps/rep-0103.html">ROS REP 103: Standard Units of measure and Coordinate Conventions</a>にあるように、Gazeboの単位はメートルとキログラムで定義されねばなりません。もし、重力のような定数を主導で変更するときには、Gazeboではできるだけヤード・ポンド法を使えるようにしています。しかし、デフォルトの重力は9.8[m/s<sup>2</sup>]です。質量を定義する際にはキログラム単位を使ってください。</p>

<h3><code>&lt;collision&gt;</code>と<code>&lt;visual&gt;</code>要素</h3>

<p>これらのタグの働きはGazeboでもRVizでも基本的に同じです。両方を定義することは重要ですが、いくつかのROSアプリケーションでは異なるので、Gazeboでは、もし定義されていなければ、あなたの<code>&lt;cisual&gt;</code>要素を<code>&lt;collision&gt;</code>要素と同じようには使いません。その代わり、Gazeboではあなたの<code>link</code>をレーザスキャナからも衝突要素としても&#8221;見えない&#8221;ものとして扱います。</p>

<h4>collisionモデルの簡単化</h4>

<p><code>collision</code>と<code>visual</code>要素のどちらにも同じように幾何要素やメッシュを使うことができます。しかし、PCの性能工場のために、衝突幾何要素の<code>model/meshes</code>は簡略化することを強くおすすめします。メッシュを簡単化するおすすめのツールは<a href="http://blender.jp/">Blender</a>です。BlenderにはMayaや3DX Maxなど、たくさんの<code>closed-source</code>があり、メッシュを簡単化することもできます。</p>

<h4>物質 : 適切な色とテクスチャを使う</h4>

<p>通常のURDFでは、以下のようなRRBotにもあるタグを使って色を定義することができます。</p>

<pre><code class="xml">&lt;material name="orange"/&gt;
</code></pre>

<p>これは、<code>materials.xacro</code>などのファイルの中に、分割して<code>orange</code>という色と一緒に以下のように定義してあります。:</p>

<pre><code class="xml">  &lt;material name="orange"&gt;
    &lt;color rgba="${255/255} ${108/255} ${10/255} 1.0"/&gt;
  &lt;/material&gt;
</code></pre>

<p>しかし残念なことに、この定義方法では、<code>link</code>の色はGazeboでは反映されません。というのも、<code>link</code>に色をつけたり、テクスチャを貼ったりするのにOこの物質スクリプトが採用されているのです。その代わり、Gazeboの物質タグは、以下のように、それぞれのリンクに定義してやる必要があります。</p>

<pre><code class="xml">  &lt;gazebo reference="link1"&gt;
    &lt;material&gt;Gazebo/Orange&lt;/material&gt;
  &lt;/gazebo&gt;
</code></pre>

<p>簡単に言うと、選択したRRBotの例では、すべてのGazeboの定義タグを<code>`rrbot.gazebo</code>と呼ばれるセカンドファイルからインクルードしていました。<br/>
なので、要素を探すことができたのです。<br/>
Gazeboでデフォルトで使用可能な物質は<code>gazebo/media/materials/scripts/gazebo/scripts/gazebo.material</code>にあるGazeboのソースコードより見つけることができます。<br/>
より進んだもしくは独自の物質のために、オリジナルのオレンジ色もしくはテクスチャを作ることができます。それについては、以下をご覧ください。
- <a href="http://gazebosim.org/sdf/dev.html#material179">The SDF documentation</a>
- <a href="http://www.ogre3d.org/tikiwiki/Materials">OGRE materials documentation</a></p>

<h4>STLやColladaファイル</h4>

<p>Rvizのように、Gazeboでも<a href="http://en.wikipedia.org/wiki/STL_(file_format">STL</a>)や<a href="http://en.wikipedia.org/wiki/Collada">Collada</a>ファイルを使用することができます。通常は、Collada(<code>.dae</code>)ファイルを使うことをおすすめします。なぜなら、このフォーマット形式は、色とテクスチャをサポートしているからです。STLファイルだと、個体の色の<code>link</code>しか作ることができません。</p>

<h3><code>&lt;inertial&gt;</code>要素</h3>

<p>Gazeboで物理エンジンを適切にうごかすためには、<a href="http://www.ros.org/wiki/urdf/XML/link">URDF element page</a>にある、<code>&lt;inertial&gt;</code>要素が必ず必要です。Gazeboで<code>link</code>が無視されないために、それらの質量は0より大きくなければなりません。更に、0の慣性モーメント(ixx, iyy, izz)は、どんな有限なトルクに対しても、無限大の加速度を出力することになります。<br/>
それぞれの<code>link</code>に正しい値を決定するには、Gazeboで物理近似を行わなければなりません。これは、たくさんのロボットパーツの計測もしくは、そういった近似のための機能付きの<a href="http://www.solidworks.co.jp/">Solidworks</a>のようなCADソフトを使うことにより決定されます。初心者は、値を少しずつ変えることでも決定できます。<br/>
以下は、RRBotの一つ目の<code>link</code>の慣性要素の例です。:</p>

<pre><code class="xml">    &lt;inertial&gt;
      &lt;origin xyz="0 0 ${height1/2}" rpy="0 0 0"/&gt;
      &lt;mass value="1"/&gt;
      &lt;inertia
        ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0"/&gt;
    &lt;/inertial&gt;
</code></pre>

<p><code>origin</code>タグはこの<code>link</code>の重心を表しています。RRBotの長方形のリンクの半分の長さのところを重心と決定することにより、質量を中心に持ってきます。Gazeboの<strong>View</strong>メニューをクリックし<strong>Wireframe</strong>と<strong>Center of Mass</strong>を選択すれば、GazeboであなたのURDFの重心を目視で確認することができます。<br/>
このロボットの例では、ロボットは現実世界の写しではないので、質量も慣性行列も作り上げられた（実際は存在しない）ものになっています。</p>

<h3>リンクにおける<code>&lt;gazebo&gt;</code>要素</h3>

<p>それぞれの要素は以下のようになっています。:</p>

<table>
<thead>
<tr>
<th style="text-align:center;">名前     </th>
<th style="text-align:center;">タイプ    </th>
<th style="text-align:center;">説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">material   </td>
<td style="text-align:center;">value  </td>
<td style="text-align:center;">外観要素の物質</td>
</tr>
<tr>
<td style="text-align:center;">gravity    </td>
<td style="text-align:center;">bool   </td>
<td style="text-align:center;">重力を使う</td>
</tr>
<tr>
<td style="text-align:center;">dampingFactor  </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">リンク速度の指数関数的減衰。- (一つの減衰係数)により決定される一つ前のリンク速度と現在の速度を掛けあわせます。</td>
</tr>
<tr>
<td style="text-align:center;">maxVel     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">最大値コンタクト補正速度の最大値トラクション</td>
</tr>
<tr>
<td style="text-align:center;">minDepth   </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">コンタクト補正インパルスが発生する前の深さの最小値</td>
</tr>
<tr>
<td style="text-align:center;">mu1&amp;mu2    </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;"><a href="http://www.ros.org/wiki/opende">ODE</a>で定義される接地面に沿った接地摩擦係数 μ</td>
</tr>
<tr>
<td style="text-align:center;">fdir1  </td>
<td style="text-align:center;">string     </td>
<td style="text-align:center;">3組のローカルの衝突検証座標mu1の定義される方向</td>
</tr>
<tr>
<td style="text-align:center;">kp     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;"><a href="http://opende.sourceforge.net/">ODE</a>で定義される、剛体面の接触剛性 k_p (ODEではcfmを使用)</td>
</tr>
<tr>
<td style="text-align:center;">kd     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;"><a href="http://opende.sourceforge.net/">ODE</a>で定義される、剛体面の摩擦減衰 k_d (ODEではerpを使用)</td>
</tr>
<tr>
<td style="text-align:center;">selfCollide    </td>
<td style="text-align:center;">bool   </td>
<td style="text-align:center;">もし、<code>true</code>なら、リンクは他のリンクやモデルと衝突します</td>
</tr>
<tr>
<td style="text-align:center;">maxContacts    </td>
<td style="text-align:center;">int    </td>
<td style="text-align:center;">２つの物体間での面の最大値。この値は、物理シミュレートで定義される<code>max_contacts</code>要素をオーバーライドします</td>
</tr>
<tr>
<td style="text-align:center;">laserRetro     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">レーザーセンサのレーザー強度</td>
</tr>
</tbody>
</table>


<p><code>&lt;gazebo&gt;</code>要素は<code>&lt;robot&gt;</code>と似ており、上の表によって定義されていない任意の物体は、SDFファイルの<code>&lt;link&gt;</code>要素と一致するところに挿入されます。これは、<a href="http://gazebosim.org/tutorials?tut=ros_gzplugins">ROS Motor and Sensor Plugins</a>チュートリアルについて議論するときに、特にプラグインにおいて有用です。</p>

<h3>RRBotの要素の例</h3>

<p>RRBotでは、非固定で連結した2つの摩擦係数が定義されています。なのでもし、衝突が起こってもより正確な接触作用がシミュレートされます。以下はリンクの<code>&lt;gazebo&gt;</code>タグの一例です。</p>

<pre><code class="xml">&lt;gazebo reference="link2"&gt;
  &lt;mu1&gt;0.2&lt;/mu1&gt;
  &lt;mu2&gt;0.2&lt;/mu2&gt;
  &lt;material&gt;Gazebo/Black&lt;/material&gt;
&lt;/gazebo&gt;
</code></pre>

<h2>Joints</h2>

<p><a href="http://www.ros.org/wiki/urdf/XML/joint">URDFジョイントドキュメント</a>を熟読しておいてください。しかし、URDFのジョイントのために記述される要素のうべ手がGazeboで利用可能なわけではありません。</p>

<ul>
<li><code>&lt;origin&gt;</code>、<code>&lt;parent&gt;</code>そして<code>&lt;child&gt;</code>が必要です。</li>
<li><code>&lt;calibration&gt;</code>と<code>&lt;safety_controller&gt;</code>は無視されます。</li>
<li><code>&lt;dynamics&gt;</code>タグでは、ダンパ(減衰)プロパティのみが使用されます。</li>
<li><code>&lt;limit&gt;</code>タグ内のすべてのプロパティは任意です。</li>
</ul>


<h3>RRBotの例</h3>

<p>以下は、RRBotで使用されているジョイントです。</p>

<pre><code class="xml">&lt;joint name="joint2" type="continuous"&gt;
  &lt;parent link="link2"/&gt;
  &lt;child link="link3"/&gt;
  &lt;origin xyz="0 ${width} ${height2 - axel_offset*2}" rpy="0 0 0"/&gt;
  &lt;axis xyz="0 1 0"/&gt;
  &lt;dynamics damping="0.7"/&gt;
&lt;/joint&gt;
</code></pre>

<p>0.7 [Nms/rad]の線形粘性係数についての運動要素に注目してください。減衰はただ単に，ジョイントを止めるような<strong>ゆっくりとした</strong>ジョイント速度に力を発生させるものの合計です（この場合は [トルク/角速度] です）。</p>

<p>0.7 [Nms/rad]という値はいろいろないかに<strong>自然に</strong>振り子が触れるかを観察し、減衰させることによって決定されます。この値を増やしたり減らしたりしてこの要素がいかに物理エンジンに影響を当たるか検証することをおすすめします。</p>

<h3>Jointにおける<code>&lt;gazebo&gt;</code>要素</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">名前</th>
<th style="text-align:center;">タイプ   </th>
<th style="text-align:center;">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">kp     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;"><a href="http://opende.sourceforge.net/">ODE</a>で定義される、剛体面の接触剛性 k_p (ODEではcfmを使用)</td>
</tr>
<tr>
<td style="text-align:center;">kd     </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;"><a href="http://opende.sourceforge.net/">ODE</a>で定義される、剛体面の摩擦減衰 k_d (ODEではerpを使用)</td>
</tr>
<tr>
<td style="text-align:center;">stopCfm    </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">停止していない時に混合で使用される一定の力</td>
</tr>
<tr>
<td style="text-align:center;">stopErp    </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">ジョイントの停止に使用されるエラーパラメータ</td>
</tr>
<tr>
<td style="text-align:center;">provideFeedback    </td>
<td style="text-align:center;">bool   </td>
<td style="text-align:center;">Gazeboのプラグインへ常にねじりデータ(トルク)をpublishしている</td>
</tr>
<tr>
<td style="text-align:center;">cfmDamping     </td>
<td style="text-align:center;">bool   </td>
<td style="text-align:center;">もし、<code>cgm dumping</code>が<code>true</code>なら、減衰のシミュレートにODEはCFMを使用し、無限の減衰を容認する。また、追加の強制要素(前もってジョイントの制限に使用されている) が常に有効になります。デフォルトの<code>damping</code>タグよりもたくさんのスッキリとした数字で表された減衰の方法です。</td>
</tr>
<tr>
<td style="text-align:center;">fudgeFactor    </td>
<td style="text-align:center;">double     </td>
<td style="text-align:center;">ジョイントの制限にあるジョイントモータの行き過ぎ量を計測します。また、0から1の値を取るはずです</td>
</tr>
</tbody>
</table>


<p>これもまた<code>&lt;robot&gt;</code>や<code>&lt;link&gt;</code>における<code>&lt;gazebo&gt;</code>要素と似ており、上の表によって定義されていない任意の物体は、SDFファイルの<code>&lt;joint&gt;</code>要素と一致するところに挿入されます。これは、<a href="http://gazebosim.org/tutorials?tut=ros_gzplugins">ROS Motor and Sensor Plugins</a>チュートリアルについて議論するときに、特にプラグインにおいて有用です。</p>

<h2>Gazeboモデルの機能を修正する</h2>

<p>Gazeboをインストールすると、あなたのURDFが正しくSDFに変換できるか確かめる簡単なツールも一緒にインストールされています。以下のコマンドを実行してください。:</p>

<pre><code class="bash">  # gazebo2 and below
  gzsdf print MODEL.urdf
  # gazebo3 and above
  gz sdf -p MODEL.urdf
</code></pre>

<p>これにより、入力されたURDFから、SDFに変換するために必要な情報の欠陥に関する警告と共に、生成されたSDFを確認できます。
<strong>Note : </strong>バージョン1.9のGazeboとそれ以上のバージョンではデバッグ情報の一部がログファイルに記録され、以下のようにして、それを確認することができます。</p>

<pre><code class="bash">  cat ~/.gazebo/gzsdf.log
</code></pre>

<h2>URDFをGazeboで見る</h2>

<p>GazeboでRRBotを見ること、このチュートリアルの最初の方ですでに完了しています。あなた独自のロボットでは、そのURDFが<code>/urdf</code>というサブフォルダにある、<code>MYROBOT_description</code>という名前のROSパッケージの中で有効であるとします。ROSを使ってGazeboの中にこのロケーションからURDFを開く方法は前のチュートリアル(<a href="https://cir-kit.github.io/blog/2015/02/15/gazebo-using-roslaunch/">モデルをスポーンさせるのにroslaunchファイルを使う</a>)で述べています。もしまだそのチュートリアルをやっていないなら、すぐにやってみてください。
そのチュートリアルでは、あなたのオリジナルロボットのための、２つのROSパッケージ(<code>MYROBOTdescription</code>と<code>MYROBOTgazebo</code>)を制作するはずです。ロボットを確認し、Gazeboで試すには、以下のコマンドが実行できるはずです。</p>

<pre><code class="bash">roslaunch MYROBOT_gazebo MYROBOT.launch
</code></pre>

<p>これにより、GazeboサーバーとGUIクライアントの両方を、あなたのロボットを自動でスポーンさせるようlaunchしているはずです。</p>

<h2>あなたのモデルを引っ張る</h2>

<p>もしあなたのロボットモデルがGazeboで思い通りに動かなければ、あなたのURDFの調整が必要なので、Gazeboで正確にその物理特性を表現するべきだと言えます。Gazeboで利用可能であり、URDFにある<code>&lt;gazebo&gt;</code>タグでも利用可能な様々なプロパティについての情報は<a href="http://gazebosim.org/sdf.html">SDFのユーザーガイド</a>をご覧ください。</p>

<h2>あなたのロボットを世界と共有する</h2>

<p>もしあなたが他の人がGazeboで使いたいと思っているであろう独自のロボットを持っているなら、<a href="http://gazebosim.org/user_guide/started__models__database.html">Gazeboのモデルデータベース</a>にあなたのURDFを追加することをおすすめします。これは、インターネットからモデルをダウンロードする際にGazeboが接続するオンラインサーバーです。このよく変更のあるレポジトリは<a href="https://bitbucket.org/osrf/gazebo_models">Bitbucket</a>に設置されてます。あなたのロボットをデータベースに追加するには、どうやってpullリクエストを投稿すればよいかなど、<a href="http://gazebosim.org/user_guide/started__models__database.html">Gazeboのモデルデータベース</a>ドキュメントをご覧ください。</p>

<h2>次のステップ</h2>

<p>これでURDFを含むROSパッケージをGazeboと一緒に使用する方法を学びました。また、あなた独自のURDFをGazeboで動作するように変換する方法も学びました。あなたのURDFのロボットにぷrグインを追加する方法を学ぶ準備が出来ました。なので、あなたのロボットやシミュレートされる環境の他の面をコントロールできます。<a href="http://gazebosim.org/tutorials?tut=ros_gzplugins">ROS Motor and Sensor Plugins</a>をご覧ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-4:GazeboをROSに繋ぐ (Roslaunchを使う 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/15/gazebo-using-roslaunch/"/>
    <updated>2015-02-15T17:03:28+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/15/gazebo-using-roslaunch</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/15/2015 (Sun)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「Using roslaunch」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : Gazebbo、worldファイル、URDFモデルを起動するためのroslaunchを使う</h2>

<p>Gazeboを起動したり、worldモデルを開いたり、シミュレーション環境にロボットモデルをスポーンさせる方法はたくさんあります。このチュートリアルでは、<code>rosrun</code>と<code>roslaunch</code>を使ったROSを用いてのそれらの方法を説明します。ROSパッケージの中のURDFを保存し、様々なROSワークスペースのリソースパスを保存する方法を含みます。</p>

<h3>worldモデルを開くためにroslaunchを使う</h3>

<p><a href="http://www.ros.org/wiki/roslaunch">roslaunch</a>ツールはROSのノードを起動し、ROSの中でロボットを起動する基本的な方法です。Gazeboの空のworlを起動することは、これまでのチュートリアルで行ってきた<code>rosrun</code>コマンドを使うのと同じです。以下のように、単純に実行してみましょう。</p>

<pre><code class="bash">roslaunch gazebo_ros empty_world.launch
</code></pre>

<h4>roslaunch引数</h4>

<p>Gazeboの挙動を変更するためのlaunchファイルには、以下の引数を追加することができます。:</p>

<h5>pused</h5>

<blockquote><p>Gazeboを一時停止した状態で起動する(default false)</p></blockquote>

<h5>usesimtime</h5>

<blockquote><p>ROSの<code>/clock</code>トピックを通じて配信される、Gazebo-publishedのシミュレーションタイムを取得するために、ROSノードに時間を問い合わせます。(default true)</p></blockquote>

<h5>gio</h5>

<blockquote><p>Gazeboのユーザーインターフェースウィンドウをlaunchします。(default true)</p></blockquote>

<h5>headless</h5>

<blockquote><p>(Ogre)コンポーネントを記録することで、シミュレータが呼び出しているすべての関数を表示します。<code>gui:=true</code>と一緒では起動しません。(default false)</p></blockquote>

<h5>debug</h5>

<blockquote><p>gdbを使用したデバッグモードで<code>gzserver</code>(Gazeboのサーバー)を起動します。(default false)</p></blockquote>

<h3>roslaunchコマンドの例</h3>

<p>通常、引数のデフォルト値はすべて必要であり、以下のように記述します。:</p>

<pre><code class="bash">roslaunch gazebo_ros empty_world.launch paused:=true use_sim_time:=false gui:=true throttled:=false headless:=false debug:=true
</code></pre>

<h3>他のデモworldをlaunchする</h3>

<p><code>gazebo_ros</code>パッケージには、他のデモworldがすでに含まれています。以下がその内容です。:</p>

<pre><code>roslaunch gazebo_ros willowgarage_world.launch
roslaunch gazebo_ros mud_world.launch
roslaunch gazebo_ros shapes_world.launch
roslaunch gazebo_ros rubble_world.launch
</code></pre>

<p><code>mudworld.launch</code>は、シンプルなジョイントメカニズムをlaunchするものであることを知っておいていください。<code>mudworld.launch</code>は以下の内容のlaunchファイルです。</p>

<pre><code class="xml">&lt;launch&gt;
  &lt;!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --&gt;
  &lt;include file="$(find gazebo_ros)/launch/empty_world.launch"&gt;
    &lt;arg name="world_name" value="worlds/mud.world"/&gt; &lt;!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable --&gt;
    &lt;arg name="paused" value="false"/&gt;
    &lt;arg name="use_sim_time" value="true"/&gt;
    &lt;arg name="gui" value="true"/&gt;
    &lt;arg name="headless" value="false"/&gt;
    &lt;arg name="debug" value="false"/&gt;
  &lt;/include&gt;
&lt;/launch&gt;
</code></pre>

<p>このlaunchファイルでは、<code>emptyworld.launch</code>から機能するのに必要不可欠なほとんどすべてを継承しています。<code>mud.World</code>ファイルとともに<code>emptyworld.launch</code>ファイルを用いる代わりに、私達が変更しなければならないパラメータは<code>worldname</code>パラメータだけです。他の引数はデフォルト値を設定しているだけです。</p>

<h3>Worldファイル</h3>

<p><code>mud_world.launch</code>ファイルをよく調べると、<code>mud.world</code>ファイルの構成に注目するでしょう。<code>mud.world</code>の最初のいくつかの構成要素は以下のようになっています。:</p>

<pre><code class="xml">  &lt;sdf version="1.4"&gt;
    &lt;world name="default"&gt;
      &lt;include&gt;
        &lt;uri&gt;model://sun&lt;/uri&gt;
      &lt;/include&gt;
      &lt;include&gt;
        &lt;uri&gt;model://ground_plane&lt;/uri&gt;
      &lt;/include&gt;
      &lt;include&gt;
        &lt;uri&gt;model://double_pendulum_with_base&lt;/uri&gt;
        &lt;name&gt;pendulum_thick_mud&lt;/name&gt;
        &lt;pose&gt;-2.0 0 0 0 0 0&lt;/pose&gt;
      &lt;/include&gt;
      ...
    &lt;/world&gt;
  &lt;/sdf&gt;
</code></pre>

<h4>あなたのコンピュータ上で、フルバージョンのworldファイルを以下のセクションで確認してください。</h4>

<p>このworldファイルでは、３つのモデルが参照されていることをわずかに確認できます。３つのモデルはローカルのGazeboモデルデータベースの中にあります。もし見つからなければ、Gazeboのオンラインデータベースより自動的にダウンロードしてきます。
worldファイルについて詳しく知りたければ、<a href="http://cir-kit.github.io/blog/categories/build-a-world/">環境をつくろう !</a>のチュートリアルをご覧ください。</p>

<h4>worldファイルをコンピュータ上で検索する</h4>

<p>worldファイルは、Gazeboのリソースパス上にある、<code>/worlds</code>ディレクトリの中にあります。このパスはGazeboをどのようにインストールし、どのタイプのシステムを使っているかということに依存します。Gazeboリソースの位置を探すには、以下のコマンドを使用してください。:</p>

<pre><code class="bash">env | grep GAZEBO_RESOURCE_PATH
</code></pre>

<p>典型的なパスだと、<code>/usr/local/share/gazebo-1.9</code>となるでしょう。<code>/worlds</code>に検索したパスを追加すると、<code>mud.world</code>ファイルを含む、Gazeboが使うディレクトリに直接接続できます。</p>

<h2>独自のGazebo ROSパッケージを作る</h2>

<p>Gazeboにロボットをスポーンさせる方法について続ける前に、最新版を使うために、ROSをGazeboと使う際の基本的なファイル構造（ヒエラルキー）についてまずは学びましょう。
ここまでの段階で、あなたの<code>catkin</code>ワークスペースは<code>catkin_ws</code>という名前であると仮定します。もちろん、ワークスペースの名前は好きなものをつけてもらって構いません。例えば、あなたの<code>catkin</code>ワークスペースが以下のような位置にあるとします。:</p>

<pre><code>/home/user/catkin_ws/src
</code></pre>

<p><code>/MYROBOT_description</code>という名前のパッケージの中に、あなたのロボットモデルにつながるすべてのものと、その記述についてがROSの基本的なパラメータとして存在し、Gazeoboとともに使用されるworldファイルとlaunchファイルは<code>/MyROBOT_gazebo</code>という名前のROSパッケージの中に存在します。ただし、<code>MYROBOT</code>の部分はあなたのロボット名です。これらの２つのパッケージにより、ファイル構造は以下のようになります。:</p>

<pre><code>../catkin_ws/src
    /MYROBOT_description
        package.xml
        CMakeLists.txt
        /urdf
            MYROBOT.urdf
        /meshes
            mesh1.dae
            mesh2.dae
            ...
        /materials
        /cad
    /MYROBOT_gazebo
        /launch
            MYROBOT.launch
        /worlds
            MYROBOT.world
        /models
            world_object1.dae
            world_object2.stl
            world_object3.urdf
        /materials
        /plugins
</code></pre>

<p><code>catkin_create_pkg</code>コマンドは、新しいパッケージを作成する際に使用します。しかし、もし必要なら、<code>rosbuilt</code>を使っても簡単にそれを行うことができます。ほとんどすべてのフォルダとファイルは自明でなければなりません。
次のセクションでは、カスタムのworldファイルを使うためのセッティングについて説明してゆきます。</p>

<h3>カスタムのworldファイルを作る</h3>

<p>あなたのパッケージやロボットに特化したあなた独自のROSパッケージの中にカスタムの<code>.world</code>を作成することができます。この短いチュートリアルでは、ground、sun、gas stationのある空のシミュレーション環境を作成します。以下は推奨規約です。<code>MYROBOT</code>の部分はあなたのロボットの名前にするか、ロボットがなければ、<code>test</code>の様な名前に置き換えるということを忘れないでください。尚、以下のチュートリアルでは、<code>catkin</code>ワークスペースが<code>~/catkin_ws/</code>(ホームディレクトリ直下に<code>catkin_ws</code>という名前である)となっていると仮定します。</p>

<ul>
<li><code>MYROBOT_gazebo</code>という名前のROSパッケージを作る</li>
</ul>


<pre><code class="bash">mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/src
catkin_create_pkg MYROBOT_gazebo
cd ~/catkin_ws
catkin_make
source devel/setup.sh
</code></pre>

<ul>
<li>そのパッケージの中で、launchフォルダを作る</li>
</ul>


<pre><code class="bash">roscd MYROBOT_gazebo
mkdir launch
</code></pre>

<ul>
<li>そのlaunchフォルダの中に、<code>MYROBOT.launch</code>ファイルを作る。(デフォルトの引数はありません)</li>
</ul>


<pre><code class="bash">gedit MYROBOT.launch
</code></pre>

<p>尚、<code>MYROBOT.launch</code>は以下の内容のにする。</p>

<pre><code class="xml">&lt;launch&gt;
  &lt;!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --&gt;
  &lt;include file="$(find gazebo_ros)/launch/empty_world.launch"&gt;
    &lt;arg name="world_name" value="$(find MYROBOT_gazebo)/worlds/MYROBOT.world"/&gt;
    &lt;!-- more default parameters can be changed here --&gt;
  &lt;/include&gt;
&lt;/launch&gt;
</code></pre>

<ul>
<li>同じパッケージの中に、<code>worlds</code>フォルダを作り、その中に、<code>MYROBOT.world</code>ファイルを作る。:</li>
</ul>


<pre><code class="bash">roscd MYROBOT_gazebo
mkdir worlds
gedit MYROBOT.world
</code></pre>

<p>尚、<code>MYROBOT.world</code>は以下の内容にする。</p>

<pre><code class="xml">&lt;?xml version="1.0" ?&gt;
&lt;sdf version="1.4"&gt;
  &lt;world name="default"&gt;
    &lt;include&gt;
      &lt;uri&gt;model://ground_plane&lt;/uri&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://sun&lt;/uri&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://gas_station&lt;/uri&gt;
      &lt;name&gt;gas_station&lt;/name&gt;
      &lt;pose&gt;-2.0 7.0 0 0 0 0&lt;/pose&gt;
    &lt;/include&gt;
  &lt;/world&gt;
&lt;/sdf&gt;
</code></pre>

<ul>
<li>ここまで完了した後、以下のコマンドを使えば、Gazeboの中にカスタムのworld(ガソリンスタンド付き)をlaunchすることができるはずです。:</li>
</ul>


<pre><code class="bash">source ~/catkin_ws/devel/setup.bash
roslaunch MYROBOT_gazebo MYROBOT.launch
</code></pre>

<p>うまく行けば、以下のようになります。(マウスを使ってズームアウトしてください)
<img src="/images/2015-02-15-gazebo-using-roslaunch/gasstation.png" alt="gasstation" /></p>

<h6>うまく行かない場合</h6>

<ul>
<li><p>launchファイルまたは、worldファイルに間違いが無いか確認してください。
よくある間違いは、<code>MYROBOT</code>の部分の間違いです。</p></li>
<li><p>ディレクトリ名が正しいか確認してください
私は、<code>worlds</code>としなければならないところを<code>world</code>にしてしまい、つまづいてましたorz</p></li>
<li><p>gzserverがきちんと終了していることを確認してください
これが最も厄介なものですが、前回のチュートリアルで<code>roslaunch gazebo_ros gazebo</code>や<code>rosrun gazebo_ros gazebo</code>により、Gazeboの起動確認をしていた場合、
<code>Cntrl-C</code>で終了しても、<code>gzserver</code>のプロセスが終了していないことがあります。
この場合は、<code>システムモニタ</code>を開き、起動中のプロセス一覧から<code>gzserver</code>を探し、終了させてください。
ちなみに、<code>gzserver</code>ってなんぞ？という方は、<a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-components/">Gazeboのコンポーネント</a>でその概要を簡単に説明しているので、そちらをご覧ください。</p></li>
<li><p>gzclientは立ち上がるが、真っ暗なままですorz
今回のチュートリアルでは、Gazeboのオンラインデータベースにある<code>gass station</code>モデルを使用しますが、これを一度もgzclientで表示したことがない場合、自動でダウンロードを行うことになります。
ただ、このダウンロードは結構な時間がかかります。結構な時間とは、1分〜3分です。なので、気長に待ってみましょう。
そんなの待ってらんないぜ!という方は、gazeboを普通に立ち上げ、<strong>Insert</strong>タブの一番下にある、オンラインのモデル一覧から<code>gass station</code>を選択して、一度良いので使ってみるか、
<a href="https://bitbucket.org/osrf/gazebo_models/src">ここ</a>から直接<code>gass station</code>を探し、<code>~/.gazebo/model/</code>にダウンロードすると良いです。</p></li>
</ul>


<h2>Gazeboの中でworldファイルを編集する</h2>

<p>あなたのロボットのworldファイルに、モデルを追加することができますし、ウィンドウの左上にある<strong>File</strong>-><strong>Save As</strong>をクリックすることで、編集したworldファイルをROSパッケージに出力することができます。</p>

<h3>URDFのロボットをスポーンさせるのにroslaunchを使う</h3>

<p>roslaunchを使って、URDFベースのロボットをGazeboにスポーンさせる方法は２つあります。</p>

<h4>ROS Servise Call Spawn Method</h4>

<blockquote><p>１つ目の方法では、あなたのロボットのROSパッケージをレポジトリのチェックアウトとコンピュータの間でより運用しやすくするようにします。ROSパッケージパスに関連するあなたのロボットの位置を維持することが許されているだけでなく、小規模の(python)スクリプトを使ってROSサービスコールを作ることが必要です。</p></blockquote>

<h4>Model Database Method</h4>

<blockquote><p>２つ目の方法では、あなたのロボットを<code>.world</code>ファイルの中にインクルードすることが許されています。これは、単純で便利に見えるかもしれませんが、あなたのロボットを環境変数を設定し、Gazeboのモデルデータベースに追加する必要があります。</p></blockquote>

<p>これら２つの方法をやってみます。私達が推奨する方法は、<strong>ROS Service Call Spawn Method</strong>です。</p>

<h4>&ldquo;ROS Service Call&rdquo; Robot Spawn Method</h4>

<p>この方法では、GazeboにカスタムのURDFを追加するために、<code>gazebo_ros</code>のROSノード(rostopicの名前空間では単純に<code>gazebo</code>という名前がついています)にサービスコールリクエストを行うため、<code>spawn_model</code>と呼ばれる小規模のpythonスクリプトを使います。<code>spawn_model</code>スクリプトは<code>gazebo_ros</code>パッケージにあります。以下の方法で、このスクリプトを使用することができます。</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -file `rospack find MYROBOT_description`/urdf/MYROBOT.urdf -urdf -x 0 -y 0 -z 1 -model MYROBOT
</code></pre>

<p>名前空間、<code>trimesh</code>プロパティ、ジョイントポジション、そしてRPY初期値を含む、<code>spawn_model</code>のすべての発展的な引数を見るためには、以下のコマンドを実行してください。:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -h
</code></pre>

<h5>Baxterを使ったURDFの例</h5>

<p>もし、まだ例などで、URDFモデルをテストしたことがないなら、Rethink Roboticsの<a href="https://github.com/RethinkRobotics/baxter_common">baxter_commonレポジトリ</a>から<code>baxter_description</code>パッケージをダウンロードできます。以下のようにして、このパッケージを<code>catkin</code>ワークスペースに設置してください。尚、これまでと同様、<code>catkin</code>ワークスペースの配置は<code>~/catkin_ws</code>となっているとします。</p>

<pre><code class="bash">cd ~/catkin_ws/src
git clone https://github.com/RethinkRobotics/baxter_common.git
</code></pre>

<p>上記コマンドを実行すると、<code>baxter.urdf</code>という名前のURDFファイルが<code>baxter_description/urdf/</code>にできるはずです。できたら以下のコマンドが実行できます。</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter
</code></pre>

<p>下図のように、ガソリンスタンドにbaxterのURDFモデルを出現させるには、先ほどまでに作成した、<code>MYROBOT.launch</code>をlaunchし、上記のコマンドを実行する必要があります。</p>

<pre><code class="bash">roslaunch MYROBOT_gazebo MYROBOT.launch
rosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter
</code></pre>

<p><img src="/images/2015-02-15-gazebo-using-roslaunch/baxter_on_the_gass_station.png" alt="baxter on gass station" /></p>

<p>ROSのlaunchファイルに直接これを統合するには、<code>MYROBOT_gazebo/launch/MYROBOT.launch</code>を再び開き、以下のな教を<code>&lt;/launch&gt;</code>タグの前に追加してください。</p>

<p>&#8220;`</p>

<!-- Spawn a robot into Gazebo -->


<p><node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-file $(find baxter_description)/urdf/baxter.urdf -urdf -z 1 -model baxter" />
&#8220;`</p>

<p>このファイルをlaunchすると、先ほど<code>rosrun</code>を使って実行したものと同じ結果が得られるはずです。</p>

<h5>PR2を使ったXACROの例</h5>

<p>もし、あなたのURDFがXMLフォーマットではないが、<a href="http://ros.org/wiki/xacro">XACROフォーマット</a>であったとしても、launchファイルを変更することで、同じようなものが作れます。以下のパッケージをインストールすることにより、PR2の例を実行することができます。</p>

<p><strong>ROS Groovy:</strong> - Note : このdebianパッケージとして公開されている<a href="https://github.com/PR2/pr2_common/pull/222">pullリクエスト</a>だけでは、GroovyのPRは壊れています</p>

<pre><code class="bash">sudo apt-get install ros-groovy-pr2-common
</code></pre>

<p><strong>ROS Hydro:</strong></p>

<pre><code class="bash">sudo apt-get install ros-hydro-pr2-common
</code></pre>

<p><strong>ROS Indigo:</strong></p>

<pre><code class="bash">sudo apt-get install ros-indigo-pr2-common
</code></pre>

<p>インストールが終わったら、以下の内容を<code>MYROBOT.launch</code>に追加しましょう。:</p>

<pre><code class="xml">  &lt;!-- Convert an xacro and put on parameter server --&gt;
  &lt;param name="robot_description" command="$(find xacro)/xacro.py $(find pr2_description)/robots/pr2.urdf.xacro" /&gt;
  &lt;!-- Spawn a robot into Gazebo --&gt;
  &lt;node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model pr2" /&gt;
</code></pre>

<p>このlaunchファイルをlaunchすると、以下のように、PR2がガソリンスタンドにいるのが確認できると思います。
<strong>Note : この記事を書いている時点では、PR2のURDFの挙動をGazeboのAPIに変更する必要があると言ったようなエラーや渓谷がコンソールの出力に大量に出力されます。(公式サイトより)</strong>
<img src="/images/2015-02-15-gazebo-using-roslaunch/pr2_on_the_gass_station.png" alt="pr2 on the gass station" /></p>

<h4>&ldquo;Model Database&#8221;Robot Spawn Method</h4>

<p>Gazeboにロボットをスポーンさせる２つ目の方法は、あなたのロボットを<code>.world</code>ファイルの中にインクルードすることが許されています。これは、単純で便利に見えるかもしれませんが、あなたのロボットを環境変数を設定し、Gazeboのモデルデータベースに追加する必要があります。この環境変数が必要となるのは、GazeboのROS依存関係による分割が原因です。URDFパッケージパスは直接<code>.world</code>ファイルの中に記述することはできません。というのもGazeboはROSパッケージの構造理念とは異なるからです。
この方法を実行するには、一つのロボットだけで構成される新しいモデルデータベースを作らなければなりません。これはGazeboにあなたのURDFを読み込ませるためには単純な方法であるとは言えません。しかしこれは、あなたのコンピュータにあなたのURDFロボットのコピーを２つ作り、維持する必要が内容にするための方法なのです。もし、以下の説明が難しく、混乱してしまうようなら、<a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-model-structure-and-requirements/">モデルの構成と必要条件</a>のチュートリアルへ戻り、なぜそのようなステップが必要なのかをしっかりと学んでください。
あなたのROSワークスペースのファイル小僧は以下ようになっていると仮定します。唯一違う点は、<code>model.config</code>ファイルが<code>MYROBOT_description</code>パッケージに追加されている点です。:</p>

<pre><code>../catkin_ws/src
    /MYROBOT_description
        package.xml
        CMakeLists.txt
        model.config
        /urdf
            MYROBOT.urdf
        /meshes
            mesh1.dae
            mesh2.dae
            ...
        /materials
        /plugins
        /cad
</code></pre>

<p>このファイル構造は、以下のフォルダ/￥とファイルに従った方法で、Gazeboのモデルデータベースを使うために最適化されています。</p>

<ul>
<li>/home/USER/catkin_workspace/src : これはGazeboのモデルデータベースのロケーションとして扱われます</li>
<li>/MYROBOT_description : このディレクトリはGazeboのモデルフォルダと仕手のみ扱われます</li>
<li>model.config : これは、Gazeboがこのモデルをデータベースで探すために必要とするコンフィギュレーションファイルです</li>
<li>MYROBOT.urdf : これはあなたのロボットの構成ファイルです。また<code>Rviz</code>や<code>MOveIt!</code>..etcでも使用されます。</li>
<li>/meshes : worldファイルとともに、レギュラーのURDFとして、<code>.stl</code>や<code>.dae</code>ファイルを個々に置きます。</li>
</ul>


<h5>model.config</h5>

<p>すべてのモデルには、モデルについてのメタデータを含む、モデルのルートディレクトリに<code>model.config</code>ファイルがあります。まずは、この<code>model.config</code>ファイルをコピーし、ファイルネームとともに<code>model.urdf</code>と置き換えてください。:</p>

<pre><code class="xml">  &lt;?xml version="1.0"?&gt;
  &lt;model&gt;
    &lt;name&gt;MYROBOT&lt;/name&gt;
    &lt;version&gt;1.0&lt;/version&gt;
    &lt;sdf&gt;urdf/MYROBOT.urdf&lt;/sdf&gt;
    &lt;author&gt;
      &lt;name&gt;My name&lt;/name&gt;
      &lt;email&gt;name@email.address&lt;/email&gt;
    &lt;/author&gt;
    &lt;description&gt;
      A description of the model
    &lt;/description&gt;
  &lt;/model&gt;
</code></pre>

<p>SDFファイルとは異なり、URDFでこのファイルを利用する際には、バージョンのタグは必要ありません。より詳しい情報は、Gazeboのモデルデータベースドキュメントをご覧ください。</p>

<h5>環境変数</h5>

<p>最後に、Gazeboにモデルデータベースはどこを探せばよいか知らせる、<code>.bashrc</code>ファイルに環境変数を追加する必要があります。好きなエディタで<code>~/.bashrc</code>を編集してください。<code>GAZEBO_MODEL_PATH</code>が定義されているか確かめてください。もし、すでに定義されていれば、セミコロンを使って新しいexportパスを追加してください。<code>catkin</code>ワークスペースが<code>~/catkin_ws/</code>であるとすると、exportする<code>GAZEBO_MODEL_PATH</code>は以下のようになっているはずです。:</p>

<pre><code class="bash">  export GAZEBO_MODEL_PATH=/home/user/catkin_ws/src/
</code></pre>

<h5>Gazeboで確認する - 手動</h5>

<p>もし、Gazeboのモデルデータベースがlaunchする際にすでに適切に定義されているとして、テストしてみましょう。:</p>

<pre><code class="bash">  gazebo
</code></pre>

<p>起動できたら、画面左にある<strong>Insert</strong>タブをクリックしてください。すると、あなたのシステムで利用可能なオンラインデータベースを含む、異なるモデルのデータベースを代表するドロップダウンリストを確認できるでしょう。あなたのロボットと一致するデータベースを探し、ロボットの名前の上で右クリックし、サブメニューを開いたら、ロボットを設置するためにGazeboの中のロケーションを選んでください。</p>

<h5>Gazeboで確認する - モデルデータベースとroslaunch</h5>

<p>モデルデータベースの発展的なメソッドでは、ROSパッケージパスを使うことなく、ロボットを直接worldファイルに加えることができます。worldファイルをつくるというというセクションで作ったものと同じセットアップを使いまが、以下のようにworldファイルを変更します。</p>

<ul>
<li>以前のように、<code>MYROBOT_description/launch</code>フォルダの時とと同じように、<code>MYROBOT.world</code>ファイルを以下の内容にしてください。</li>
</ul>


<pre><code class="xml">&lt;?xml version="1.0" ?&gt;
&lt;sdf version="1.4"&gt;
  &lt;world name="default"&gt;
    &lt;include&gt;
      &lt;uri&gt;model://ground_plane&lt;/uri&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://sun&lt;/uri&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://gas_station&lt;/uri&gt;
      &lt;name&gt;gas_station&lt;/name&gt;
      &lt;pose&gt;-2.0 7.0 0 0 0 0&lt;/pose&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://MYROBOT&lt;/uri&gt;
    &lt;/include&gt;
  &lt;/world&gt;
&lt;/sdf&gt;
</code></pre>

<ul>
<li>以下のコマンドで、カスタムのworldをガソリンスタンドとロボットとともにGazeboでlaunchできるようになっているはずです。:</li>
</ul>


<pre><code class="bash">  roslaunch MYROBOT_gazebo MYROBOT.launch
</code></pre>

<p>この方法の欠点は、あなたの<code>MYROBOT_description</code>パッケージと<code>MYROBOT_gazebo</code>パッケージが簡単運用できないということです。</p>

<ul>
<li>これらのROSパッケージを利用する前に、最初に新規のシステムには、<code>GAZEBO_MODEL_PATH</code>を設定しなければならないのです。</li>
</ul>


<h4>次のステップ</h4>

<p>ここまでで、Gazeboやworldファイル、そしてURDFモデルを起動するroslaunchの作り方を学びました。チュートリアルを通して、<a href="">GazeboでURDFを使う</a>ことで、あなた独自のGazebo-ready URDFモデルを作成する準備が出来ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-3:GazeboをROSに繋ぐ (Gazebo_ros_pkgsをインストールする 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/14/gazebo-installing-gazebo-ros-pkgs/"/>
    <updated>2015-02-14T21:33:12+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/14/gazebo-installing-gazebo-ros-pkgs</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/14/2015 (Sat)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。<br/>
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。<br/>
今回はその「Installing gazebo_ros_pkgs」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>はじめに</h2>

<p>GazeboのインターフェースのためのROSパッケージのセットは、<code>gazebo_ros_pkgs</code>という名前の新しいメタパッケージで構成されています。続きを読む前に、前提情報として、<a href="http://cir-kit.github.io/blog/2015/02/14/gazebo-ros-overview/">ROSの統合についての概要</a>をご覧ください。<br/>
これらの説明は、<a href="http://www.ros.org/wiki/hydro">ROS Hydro</a>と<a href="http://www.ros.org/wiki/indigo">Ros Indigo</a>と完全に統合されたGazeboのバージョンを使用するためのものです。チュートリアルを始める前に、<a href="http://cir-kit.github.io/blog/2015/02/14/gazebo-which-combination-of-ros-and-gazebo-versions-to-use/">どのGazebo/ROSのバージョンの組み合わせを使うか</a>をまず読むことをおすすめします。必要に応じて、それに応えるインストール方法が必要となります。</p>

<h2>必須条件</h2>

<p>ROSのコンセプトについて<a href="http://www.ros.org/wiki/ROS/Tutorials">ROSチュートリアル</a>を通じて理解しておく必要があります。</p>

<h3>ROSをインストールする</h3>

<p>ROSの統合チュートリアルのために、(<code>ros-hydro-desktop-full</code>もしくは<code>ros-indigo-desktop-full</code>)インストールをおすすめします。それにより、必要なパッケージを手に入れることができます。<br/>
詳しくは、<a href="http://www.ros.org/wiki/ROS/Installation">ROSのインストール</a>ページをご覧ください。もちろん、ROSのインストールページの説明に従い、ROSの<code>setup.sh</code>を<code>source</code>コマンドで実行しておいてください。</p>

<h3>Gazeboをインストールする</h3>

<p>ソースコードまたは、プレビルドされたUbuntuのdebianパッケージのどちらを使っても、Gazeboをインストールできます。<br/>
<a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-install/">Gazeboのインストール</a>をご覧ください。ソースコードからインストールする場合には、<code>gazebo_X.Y</code>ブランチ(X.Yはあなたの必要とするバージョンを指します)をすることを忘れないでください。</p>

<h4>スタンドアローンなGazeboの動作チェックをする</h4>

<p><code>gazebo_ros_pkgs</code>のインストールを行う前に、以下のコマンドをターミナルで入力して、スタンドアローンなGazeboの動作チェックを行うことを忘れないでください。:</p>

<pre><code class="bash">  gazebo
</code></pre>

<p>空のシミュレーションと、GUIが開くのが確認できるでしょう。また、画面左側の<strong>Insert</strong>タブをクリックし、モデルを選んで(クリックすると、モデルをシミュレーションのどこに置くか決定できます)、シミュレーションに足してください。</p>

<h4>Gazeboのバージョンが正しいことを確認する</h4>

<p>Gazeboがどこにインストールされているか探し、それが正しい位置にあるか確かめるために、以下のコマンドを実行してください。:</p>

<pre><code class="bash">  which gzserver
  which gzclient
</code></pre>

<p>もし、デフォルトの位置で、ソースコードからインストールしたのなら、結果は以下のようになるはずです。:</p>

<pre><code class="bash">  /usr/local/bin/gzserver
  /usr/local/bin/gzclient
</code></pre>

<p>もし、debianパッケージを使用してインストールしたなら、結果は以下のようになるはずです。:</p>

<pre><code class="bash">  /usr/bin/gzserver
  /usr/bin/gzclient
</code></pre>

<h2>gazebo_ros_pkgsのインストール</h2>

<p>好きな方法を選んでください。早くて簡単な方法はパッケージからインストールすることです。しかし、ソースコードからインストールすることで、デバックとバグパッチの適用をより簡単にできます。(oω&lt;)</p>

<h3>A. プレビルドDebianパッケージをインストールする</h3>

<p><code>gazebo_ros_pkgs</code>パッケージは以下のそれぞれのバージョンで利用可能です。:</p>

<ul>
<li><a href="http://ros.org/wiki/hydro">ROS Hydro</a>:</li>
</ul>


<pre><code class="bash">sudo apt-get install ros-hydro-gazebo-ros-pkgs ros-hydro-gazebo-ros-control
</code></pre>

<ul>
<li><a href="http://ros.org/wiki/indigo">ROS Indigo</a>:</li>
</ul>


<pre><code class="bash">sudo apt-get install ros-indigo-gazebo-ros-pkgs ros-indigo-gazebo-ros-control
</code></pre>

<p>もしこのインストール方法がうまく行ったら、このページの下の<strong>ROSの統合環境を使ってGazeboをテストする</strong>に進んでください。</p>

<h3>B. ソースコードからインストールする(Ubuntu)</h3>

<p>もしあなたが、ROSの最新バージョン(Groovy以上)を使用しているなら、ソースコードから<code>gazebo_ros_pkgs</code>をインストールする必要があります。ソースコードからインストールすることは、新しいプラグインを開発したり、パッチを適用したりするときに便利です。</p>

<h4>Catkinワークスペースをセットアップする</h4>

<p>これらのイントロダクションでは<a href="http://www.ros.org/wiki/catkin">catkinビルドシステム</a>を使うことが必要です。<br/>
もし、まだcatkinワークスペースのセットアップをしていないなら、以下のコマンドを試してみてください。</p>

<pre><code class="bash">mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/src
catkin_init_workspace
cd ~/catkin_ws
catkin_make
</code></pre>

<p>次に、あなたの<code>.bash</code>ファイルにセットアップスクリプトを追加してください。:</p>

<pre><code class="bash">echo "source ~/catkin_ws/devel/setup.bash" &gt;&gt; ~/.bashrc
</code></pre>

<p>もっと詳しい情報は、<a href="http://www.ros.org/wiki/catkin/Tutorials/create_a_workspace">Catkinワークスペースを作る</a>というチュートリアルをご覧ください。</p>

<h4>GitHubレポジトリをCloneする</h4>

<p><code>git</code>があなたのUbuntuマシンにインストールされていることを確認してください。:</p>

<pre><code class="bash">sudo apt-get install git
</code></pre>

<h5>ROS Indigo</h5>

<p>Indigoはgazebo2.xシリーズを使用しておりイます。以下のインストールから始めましょう。:</p>

<pre><code class="bash">sudo apt-get install -y gazebo2
</code></pre>

<p><a href="https://github.com/ros-simulation/gazebo_ros_pkgs"><code>gazebo_ros_pkgs</code>のGitHubレポジトリ</a>からソースコードをダウンロードしましょう。</p>

<pre><code class="bash">cd ~/catkin_ws/src
git clone https://github.com/ros-simulation/gazebo_ros_pkgs.git -b indigo-devel
</code></pre>

<p><code>rosdep</code>コマンドを使って、足りない依存条件を確認しましょう。</p>

<pre><code class="bash">rosdep update
rosdep check --from-paths . --ignore-src --rosdistro indigo
</code></pre>

<p><code>rosdep</code>のdebianインストールを使って、自動的に、不足している依存条件をインストールすることができます。:</p>

<pre><code class="bash">rosdep install --from-paths . --ignore-src --rosdistro indigo -y
</code></pre>

<p>完了したら、<strong>gazebo_ros_pkgsをビルドする</strong>というセクションに移動しましょう。</p>

<h5>ROS Hydro</h5>

<p>Hydroはgazebo1.xシリーズを使用しておりイます。以下のインストールから始めましょう。:</p>

<pre><code class="bash">sudo apt-get install -y gazebo
</code></pre>

<p><a href="https://github.com/ros-simulation/gazebo_ros_pkgs"><code>gazebo_ros_pkgs</code>のGitHubレポジトリ</a>からソースコードをダウンロードしましょう。</p>

<pre><code class="bash">cd ~/catkin_ws/src
git clone https://github.com/ros-simulation/gazebo_ros_pkgs.git -b hydro-devel
</code></pre>

<p><code>rosdep</code>コマンドを使って、足りない依存条件を確認しましょう。</p>

<pre><code class="bash">rosdep update
rosdep check --from-paths . --ignore-src --rosdistro hydro
</code></pre>

<p><code>rosdep</code>のdebianインストールを使って、自動的に、不足している依存条件をインストールすることができます。:</p>

<pre><code class="bash">rosdep install --from-paths . --ignore-src --rosdistro hydro -y
</code></pre>

<p>完了したら、<strong>gazebo_ros_pkgsをビルドする</strong>というセクションに移動しましょう。</p>

<h2>ROSの統合環境を使ってGazeboをテストする</h2>

<p>ROSのセットアップファイルを<code>source</code>コマンドで有効にすることを忘れないでください。Hydroの場合は、以下のコマンドでそれを有効にできます。:</p>

<pre><code class="bash">source /opt/ros/hydro/setup.bash
</code></pre>

<p><code>~/.bashrc</code>に以上のようなコマンドは追加しているでしょう。<br/>
GazeboとROSの環境については、おそらく、セットアップし、ビルドしていることと仮定すると、<code>roscore</code>を起動した後に、<code>rosrun</code>コマンドだけでGazeboを起草できるはずです。:<br/>
もしまだ、<code>.bashrc</code>に以下のコマンドを追加していないなら、catkinの<code>setup.bash</code>を<code>source</code>コマンドで実行してください。</p>

<pre><code class="bash">source ~/catkin_ws/devel/setup.bash
</code></pre>

<p>その後、以下のコマンドを実行してください。</p>

<pre><code class="bash">roscore &amp;
rosrun gazebo_ros gazebo
</code></pre>

<p>すると、ウィンドウの中に何も無いようなGazeboのGUIが立ち上がるでしょう。<br/>
ROSの接続が本当に完了しているか確かめるために、利用可能なROSのトピックを見てみましょう。:</p>

<pre><code class="bash">rostopic list
</code></pre>

<p>すると、トピックの一覧の中に、以下のようなトピックが確認できるはずです。:</p>

<pre><code>/gazebo/link_states
/gazebo/model_states
/gazebo/parameter_descriptions
/gazebo/parameter_updates
/gazebo/set_link_state
/gazebo/set_model_state
</code></pre>

<p>Gazeboのサービスの存在も確認することができます。:</p>

<pre><code class="bash">rosservice list
</code></pre>

<p>すると、サービスの一覧の中に、以下のようなサービスが確認できるはずです。:</p>

<pre><code class="bash">/gazebo/apply_body_wrench
/gazebo/apply_joint_effort
/gazebo/clear_body_wrenches
/gazebo/clear_joint_forces
/gazebo/delete_model
/gazebo/get_joint_properties
/gazebo/get_link_properties
/gazebo/get_link_state
/gazebo/get_loggers
/gazebo/get_model_properties
/gazebo/get_model_state
/gazebo/get_physics_properties
/gazebo/get_world_properties
/gazebo/pause_physics
/gazebo/reset_simulation
/gazebo/reset_world
/gazebo/set_joint_properties
/gazebo/set_link_properties
/gazebo/set_link_state
/gazebo/set_logger_level
/gazebo/set_model_configuration
/gazebo/set_model_state
/gazebo/set_parameters
/gazebo/set_physics_properties
/gazebo/spawn_gazebo_model
/gazebo/spawn_sdf_model
/gazebo/spawn_urdf_model
/gazebo/unpause_physics
/rosout/get_loggers
/rosout/set_logger_level
</code></pre>

<h2>Gazeboを起動するためのROSの他の方法</h2>

<p>Gazeboを起動するROSのコマンドはたくさんあります。:</p>

<ul>
<li>サーバーとクライアントを同時にlaunchする</li>
</ul>


<pre><code class="bash">    rosrun gazebo_ros gazebo
</code></pre>

<ul>
<li>Gazeboサーバーだけをlaunchする</li>
</ul>


<pre><code class="bash">    rosrun gazebo_ros gzserver
</code></pre>

<ul>
<li>Gazeboのクライアントだけをlaunchする</li>
</ul>


<pre><code class="bash">    rosrun gazebo_ros gzclient
</code></pre>

<ul>
<li>GDBを使った、Gazeboサーバーだけをデバッグモードでlaunchする</li>
</ul>


<pre><code class="bash">    rosrun gazebo_ros debug
</code></pre>

<ul>
<li>さらに、roslaunchを使ってGazeboを起動することもできます</li>
</ul>


<pre><code class="bash">    roslaunch gazebo_ros empty_world.launch
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-2:GazeboをROSに繋ぐ (どのGazebo/ROSのバージョンの組み合わせを使うか 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/14/gazebo-which-combination-of-ros-and-gazebo-versions-to-use/"/>
    <updated>2015-02-14T15:29:45+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/14/gazebo-which-combination-of-ros-and-gazebo-versions-to-use</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/14/2015 (Sat)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。<br/>
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。<br/>
今回はその「Which combination of ROS/Gazebo Versions to use」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>はじめに</h2>

<p>このドキュメントでは、ROSとGazeboをそれぞれ異なるバージョンの組み合わせで使うためのオプションについて説明します。Gazebo ROSラッパーをインストールする前に、読んでおくことをおすすめします。</p>

<h2>簡単な判断のための短いバージョン</h2>

<p>もし、ROSの特定のバージョンを使用しており、Gazeboの特定のバージョンを使用する理由がないなら、<a href="http://cir-kit.github.io/blog/2015/02/14/gazebo-installing-gazebo-ros-pkgs/">gazebo_ros_pkgsをインストールする</a>というチュートリアルへ進むこともできます。</p>

<h2>GazeboのバージョンとROSの統合</h2>

<p>ROS Hydroまでは、GazeboはROSパッケージの代替とみなされていました。これは、Gazeboのメジャーバージョンの一つ（例えば、ROS Indigo用のgazebo2）はROSリリースサイクルの始まりであり、すべてのROSディストリビューションの間で保たれていたということを意味します。Gazeboの開発はROSから独立しています。なので、Gazeboの新しい各バージョンはROSディストリビューションで使用される前にリリースする必要があります。<br/>
Gazebo ABIの安定化ポリシーは、同じメジャーナンバーを持つすべてのバージョン(<code>gazebo_2.0.0</code>,<code>gazebo_2.1.0</code>,<code>gazebo_2.0.1</code>,&hellip;etc)はバイナリー互換であり、それ故に同じROSディストリビューションを使用するなら、相互に使用することができるといったような、<a href="http://semver.org/">sematic versioning pholosophy</a>に準拠しているということを覚えておいてください。</p>

<h3>Gazeboをインストールする</h3>

<h4>GazeboのUbuntuパッケージ</h4>

<p>Gazeboをインストールする簡単な方法は、パッケージを使うことです。Gazeboパッケージがホストしているレポジトリは主に2つあります。:一つは<code>package.ros.org</code>で、もうひとつは、<code>osrfoundation.packages.org</code>です。この投稿を行った時点では、ホストの状況は以下のようになっています。</p>

<blockquote><ul>
<li>packages.ros.org

<ul>
<li>Hydro: hosts gazebo version 1.x package.</li>
<li>Indigo: host gazebo version 2.x package.</li>
</ul>
</li>
<li>packages.osrfoundation.org

<ul>
<li>gazebo 1.x series (package name gazebo)</li>
<li>gazebo 2.x series (package name gazebo-current or gazebo2 in saucy/trusty)</li>
<li>gazebo 3.x series (package name gazebo3)</li>
<li>gazebo 4.x series (package name gazebo4)</li>
</ul>
</li>
</ul>
</blockquote>

<p>このことは、<code>osrfoundation</code>レポジトリは必ずしもUbuntuのGazeboパッケージから取得する必要がないということを意味します。ROSのレポジトリからインストールすることができます。</p>

<h4>Gazeboをソースからビルドする</h4>

<p>ソースコードからGazeboのバージョンをコンパイルしたのなら、あなたのGazeboで使用しているレポジトリのブランチにおける依存関係(gazebo_3.0, gazebo_4.0,&hellip;etc)は、メジャー場＾ジョンがローカルブランチのレポジトリとROSのディストリビューションで使用しているGazeboのバージョンが一致するときにかぎり、<code>gazebo_ros_pkgs</code>(それとGazeboでコンパイル済みのすべてのROSパッケージも)と共にバイナリコンパイルされます。例えば、もしあなたが、<code>gazebo_2.0</code>のGazeboブランチよりコンパイルをしているのなら、Indigo(Indigoはgazebo2シリーズを使用している)にある<code>gazebo_ros_pkgs</code>を使用することができます。<br/>
もしあなたが、デフォルトのブランチを使用しているなら、大抵のリリースされたパッケージと共にバイナリコンパイルを行うことはできません。なので、<code>gazebo_ros_pkgs</code>を有効にするために、<code>catkin</code>ワークスペースが必要となります。</p>

<h3>ROSディストリビューションのためにGazeboのデフォルトバージョンを使う</h3>

<p>特定のROSディストリビューションを使用する必要があり、out-of-the-boxのパッケージに関連するGazeboやROSを使用したい人にとって、このセクションは重要です。</p>

<h4>Indigo</h4>

<p>ROS IndigoはGazeboの2.xのバージョンをホストしています。完全に統合されたROSのシステムのためには、Gazeboの2.xバージョンを使用することをおすすめします。適用方法は、ROSレポジトリを使用するということだけで、(自動でgazebo2がインストールされます)<code>osrfoundation</code>レポジトリは必要ありません。</p>

<h4>Hydro</h4>

<p>ROS HydroはGazeboの1.9.xのバージョンをホストしています。完全に統合されたROSシステムのためには、Gazeboの1.9.xバージョンを使用することをおすすめします。適用する方法は、ROSレポジトリを使用するということだけで、(自動でgazeboがインストールされます)<code>osrfoundation</code>レポジトリは必要ありません。</p>

<h3>特定のバージョンのGazeboをROSと使用する</h3>

<p><strong>!警告! : このオプションを使うと、ROSのdebレポジトリによるGazeboに関連したいかなるROS Ubuntuパッケージも使用できなくなるかもしれません。<code>gazebo_ros_pkgs</code>と同等のものは、debianパッケージによりインストールすることは可能ですが、その他のすべてのソフトウェア（<code>turtlebot_gazebo</code>など）はソースコードからビルドしなければなりませんが、<code>catkin</code>ワークスペースのおかげで、これを行うのはとても簡単です。</strong><br/>
本当に必要であれば、特定のバージョンのGazeboとROSを使用する方法はたくさんあります:</p>

<h4>Gazebo 4.x シリーズ</h4>

<p>OSRFレポジトリは、gazebo4パッケージの最新をビルドする、<code>-gazebo4-</code>バージョンのROS/IndigoとROS/HydroのGazeboラッパーを提供しています。(`gazebo4_ros_pkgs)これらを使用する手順は以下のとおりです。</p>

<ul>
<li><code>osrfoundation</code>レポジトリをソースリストに追加する</li>
<li><code>gazebo4</code>パッケージをインストールするのに使う、<code>ros-distro-gazebo4-ros-pkgs</code>を<code>osrfoundation</code>レポジトリより追加する。</li>
<li>ソースコードから、残りのソフトウェアをコンパイルするために、<code>catkin</code>ワークスペースを使う</li>
</ul>


<h4>Gazebo 3.x シリーズ</h4>

<p>OSRFレポジトリは、gazebo3パッケージの最新をビルドする、<code>-gazebo3-</code>バージョンのROS/HydroとROS/GroovyのGazeboラッパーを提供しています。(<code>gazebo3_ros_pkgs</code>)これらを使用する手順は以下のとおりです。</p>

<ul>
<li><code>osrfoundation</code>レポジトリをソースリストに追加する</li>
<li><code>gazebo3</code>パッケージをインストールするのに使う、<code>ros-distro-gazebo3-ros-pkgs</code>を<code>osrfoundation</code>レポジトリより追加する。</li>
<li>ソースコードから、残りのソフトウェアをコンパイルするために、<code>catkin</code>ワークスペースを使う</li>
</ul>


<h4>Gazebo 2.x シリーズ</h4>

<p>OSRFレポジトリは、gazebo-currentパッケージの最新をビルドする、<code>-current-</code>バージョンのROS/HydroとROS/GroovyのGazeboラッパーを提供しています。(<code>gazebo_ros_pkgs-current</code>)これらを使用する手順は以下のとおりです。</p>

<ul>
<li><code>osrfoundation</code>レポジトリをソースリストに追加する</li>
<li><code>gazebo-current</code>パッケージをインストールするのに使う、<code>ros-distro-gazebo-ros-pkgs-current</code>を<code>osrfoundation</code>レポジトリより追加する。</li>
<li>ソースコードから、残りのソフトウェアをコンパイルするために、<code>catkin</code>ワークスペースを使う</li>
</ul>


<h2>FAQ</h2>

<h4>私はDARPAのロボティクスチャレンジ参加者です。どのバージョンを使うのが良いですか?</h4>

<p><code>drcsim-3.2</code>は<code>gazebo3</code>でビルドされています。<code>drcsim-4.0</code>からスタートすると、<code>gazebo4</code>を使うことになります。</p>

<h4>私はまだROSを使ったことがありません。どのバージョンを使うのが良いですか?</h4>

<p>ROSのサポートが必要ないなら、<a href="http://gazebosim.org/tutorials/?cat=installation"><code>osrfoundation</code>のレポジトリを利用してインストール</a>できる、最新リリースのバージョンをおすすめします。</p>

<h4><code>bullet/simbody/dart</code>物理エンジンを使いたいのですが、どのバージョンが良いですか?</h4>

<p><code>gazebo4</code>から始めるなら、<code>bullet</code>と<code>simbody</code>がUbuntuパッケージでサポートされています。なので、ROSと一緒に、<code>gazebo4</code>を使用するには、上記の説明に従ってください。<code>Dart</code>はソースコードからのインストールも必要とします（<code>gazebo3</code>からはじめるなら）。なので、<code>gazebo3</code>かそれ以外のバージョンを使用することができます。ROSと共に使用するために、このページの上部の説明に従ってください。</p>

<h4>ROS-JではどのバージョンのGazeboが動きますか?</h4>

<p>まだ決まってません。しかし、<a href="http://gazebosim.org/#status">予定では</a>おそらく<code>gazebo5</code>でしょう。</p>

<h4>gazebo4とROS Indigoを使う必要があります。どうしたらよいですか?</h4>

<p><strong>!警告! : このオプションを使うと、ROSのdebレポジトリから供給されるGazebo関連のROS Indigoパッケージが使えなくなるかもしれません。ソースコードからビルドする必要がありますが、<code>catkin</code>ワークスペースのおかげで、これを行うのはとても簡単です。</strong><br/>
Gazebo4.xのバージョンにだけある機能を使用する必要があるなら、<code>gazebo4</code>とROS Indigoをインストールするという方法があります。<strong>このページ内</strong>にある<code>gazebo4</code>パッケージを使ったROSの使い方についての説明に従ってください。</p>

<h4>gazebo3とROS Indigoを使う必要があります。どうしたらよいですか?</h4>

<p><strong>!警告! : このオプションを使うと、ROSのdebレポジトリから供給されるGazebo関連のROS Indigoパッケージが使えなくなるかもしれません。ソースコードからビルドする必要がありますが、<code>catkin</code>ワークスペースのおかげで、これを行うのはとても簡単です。</strong><br/>
Gazebo3.xのバージョンにだけある機能を使用する必要があるなら、<code>gazebo3</code>とROS Indigoをインストールするという方法があります。<strong>このページ内</strong>にある<code>gazebo3</code>パッケージを使ったROSの使い方についての説明に従ってください。</p>
]]></content>
  </entry>
  
</feed>
