<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gazebo | 九州工業大学 CIR-KIT Blog]]></title>
  <link href="http://cir-kit.github.io/blog/categories/gazebo/atom.xml" rel="self"/>
  <link href="http://cir-kit.github.io/"/>
  <updated>2015-02-14T00:53:33+09:00</updated>
  <id>http://cir-kit.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[センサについて (センサノイズモデル 編) No.5.1]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/13/gazebo-sensor-noise-model/"/>
    <updated>2015-02-13T21:50:50+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/13/gazebo-sensor-noise-model</id>
    <content type="html"><![CDATA[<p><img src="http://cir-kit.github.io/images/gazebo_logo.png" alt="gazebo_logo" /></p>




<h5>検証日時</h5>




<p>02/06/2015 (Tue)</p>




<h5>概要</h5>




<p>Gazeboのチュートリアル第五弾「Sensors」。<br/>
シミュレーションのセンサは環境を分析し、センサになるべくよく似たデータストリームを生成します。<br/>
チュートリアルでは、センサの使い方と修正方法について説明します。
今回はその「Sensor Noise Model」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>




<h5>レベル</h5>




<p><strong>BEGINNER</strong></p>




<!-- more -->




<h5>環境</h5>




<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>




<h5>参考</h5>




<p><a href="http://gazebosim.org/tutorials?cat=tools_utilities">GAZEBO Tutorial-Tools and Utilities</a></p>




<h2>はじめに</h2>




<p>Gazeboでは、たくさんの一般的なセンサを提供しています。現実世界では、センサにはノイズが存在し、実環境を完全に観測することは出来ません。デフォルトでは、Gazeboのセンサは環境を完全に観測します(IMUは含みません;続きを参照ください)。認識プログラムを試してみる様な、よりリアルな環境を提供するには、Gazeboのセンサが生成したデータにあえてノイズを付け加える必要があります。<br/>
この記事を書いている時点で、Gazeboは以下のタイプのセンサにノイズを付加することができます。</p>




<blockquote><ul>
<li>Ray (e.g., lasers)</li>
<li>Camera</li>
<li>IMU</li>
</ul>
</blockquote>




<h2>Ray(Laser)ノイズ</h2>




<p>rayセンサでは、それぞれのビームの距離値にガウシアンノイズを付加します。ノイズの値として付加されるガウシアン分布の平均値と標準偏差を設定することができます。ノイズの値はそれぞれのビームに独立して付加されます。ノイズを付加した後、距離はセンサの最小距離と最大距離の間で偽の値（ノイズが付加された値）になります。<br/>
rayノイズモデルをテストするには:</p>




<ol>
<li>モデルのディレクトリを作る</li>
</ol>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  mkdir -p ~/.gazebo/models/noisy_laser
</span></code></pre></td></tr></table></div></figure></notextile></div>




<ol>
<li><code>config</code>ファイルを生成する</li>
</ol>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  gedit ~/.gazebo/models/noisy_laser/model.config
</span></code></pre></td></tr></table></div></figure></notextile></div>




<ol>
<li><code>model.config</code>ファイルに以下をコピペする</li>
</ol>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;model&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Noisy laser<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sdf</span> <span class="na">version=</span><span class="s">&#39;1.4&#39;</span><span class="nt">&gt;</span>model.sdf<span class="nt">&lt;/sdf&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;author&gt;</span>
</span><span class='line'>   <span class="nt">&lt;name&gt;</span>My Name<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>   <span class="nt">&lt;email&gt;</span>me@my.email<span class="nt">&lt;/email&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/author&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;description&gt;</span>
</span><span class='line'>    My noisy laser.
</span><span class='line'>  <span class="nt">&lt;/description&gt;</span>
</span><span class='line'><span class="nt">&lt;/model&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<ol>
<li><code>~/.gazebo/models/noisy_laser/model.sdf</code>ファイルを生成する</li>
</ol>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gedit ~/.gazebo/models/noisy_laser/model.sdf
</span></code></pre></td></tr></table></div></figure></notextile></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ツールとユーティリティ (ログフィルタリング 編) No.4.1]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/13/gazebo-log-filtering/"/>
    <updated>2015-02-13T20:57:58+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/13/gazebo-log-filtering</id>
    <content type="html"><![CDATA[<p><img src="http://cir-kit.github.io/images/gazebo_logo.png" alt="gazebo_logo" /></p>




<h5>検証日時</h5>




<p>02/06/2015 (Tue)</p>




<h5>概要</h5>




<p>Gazeboのチュートリアル第四弾「Tools and utilities」。<br/>
Gazeboには多くのツールとユーティリティがあります。<br/>
このチュートリアルでは、利用可能なツールとその使い方を説明します。<br/>
今回はその「Log Filtering」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>




<h5>レベル</h5>




<p><strong>BEGINNER</strong></p>




<!-- more -->




<h5>環境</h5>




<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>




<h5>参考</h5>




<p><a href="http://gazebosim.org/tutorials?cat=tools_utilities">GAZEBO Tutorial-Tools and Utilities</a></p>




<h2>はじめに</h2>




<p>状態のログとは、Gazeboからの環境情報の記録です。状態とは、姿勢、速度、加速度、そしてすべてのモデルのすべてのリンクに適用された力のことを指します。Gazeboでは、時間経過と共に変化するモデルの状態情報だけを記録します。状態ログのファイルには、ヘッダ、初期環境記録、状態の時系列情報で構成されています。</p>




<h2>Gazeboログコマンドのラインツール</h2>




<p>Gazeboでは、<code>gz log</code>コマンドでアクセスするロギングユーティリティ（記録ユーティリティ）を提供しています。<br/>
ヘルプ情報を以下のコマンドで確認してみましょう。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gz <span class="nb">help </span>log
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>もしくは、</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gz log -h
</span></code></pre></td></tr></table></div></figure></notextile></div>




<h2>使い方の例</h2>




<h3>ステップ 1:状態ログファイルを作る</h3>




<p>古いログファイルを消去することから初めましょう。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rm -rf ~/.gazebo/log/*
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>今回は、ログファイルを生成するのに、PR2ワールドを使用します。<br/>
Gazeboサーバを<code>-r</code>コマンドラインオプションをつけて実行しましょう。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gzserver -r worlds/pr2.world
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>数秒後に、サーバを<code>Ctrl-c</code>で停止しましょう。<br/>
新しいタイムスタンプのあるディレクトリが<code>~/.gazebo/log/</code>の中に、一つのサブディレクトリと<code>state.log</code>ファイルがあるはずです。例えば以下のような感じです。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/.gazebo/log/2015-02-13T21:18:11.849250/gzserverstate.log
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>Gazeboでこれをリプレイすることにより、このログファイルを確認することができます。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gazebo -p ~/.gazebo/log/*/gzserver/state.lgo
</span></code></pre></td></tr></table></div></figure></notextile></div>




<h3>ステップ 2:ログファイルをフィルタリングする</h3>




<p><code>gz log</code>コマンドラインツールでは、ログファイルを通じたステッピングとログファイル表示のコンテンツのエコーのためのメカニズムを提供しています。表示エコーの特徴は、モデルやリンクの姿勢などの情報を定義するようなログファイルを生成するフィルタと結合したものとなります。<br/>
記録した状態ログファイルをスクリーンにエコーしてみましょう。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gz log -e -f ~/.gazebo/log/*/gzserver/state.log
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>すると、スクロールできるほどたくさんの情報を確認することができるでしょう。<br/>
では、ログファイルにあるすべての速度、加速度、力の情報を消してみましょう。つまり、姿勢の情報だけを残します。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gz log -e -f ~/.gazebo/log/*/gzserver/state.log --filter *.pose/*.pose
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p><code>--filter</code>オプションは、ログファイルの情報を間引くには、柔軟で便利なコマンドライン引数です。<br/>
<code>Hz</code>フィルタを使えば、シミュレーション時間についてもフィルタリングをオコナウことができます。例えば、30 [Hz]で状態情報を出力したいとすると、以下のようにコマンド入力を行います。:</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gz log -e -f ~/.gazebo/log/*/gzserver/state.log -z 30
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>これらのフィルタはプレイバックのためのファイルに結合することができます。このことは<code>state.log</code>ファイルの大きさに依存することもあります。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gz log -e -f ~/.gazebo/log/*/gzserver/state.log -z <span class="m">30</span> --filter *.pose/*.pose &gt; /tmp/filtered_state.log
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>このログファイルは、以下のようにしてGazeboでリプレイすることができます。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gazebo -p /tmp/filtered_state.log
</span></code></pre></td></tr></table></div></figure></notextile></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[環境をつくろう ! (建築エディタ 編) No.3.5]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/06/gazebo-building-editor/"/>
    <updated>2015-02-06T02:14:35+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/06/gazebo-building-editor</id>
    <content type="html"><![CDATA[<p><img src="http://cir-kit.github.io/images/gazebo_logo.png" alt="gazebo_logo" /></p>




<h5>検証日時</h5>




<p>02/06/2015 (Tue)</p>




<h5>概要</h5>




<p>Gazeboのチュートリアル第三弾「Build a World」。
このチュートリアルでは、シミュレーション中の環境をどのように構築するかについて説明します。<br/>
今回はその「Building Edito」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>




<h5>レベル</h5>




<p><strong>BEGINNER</strong></p>




<!-- more -->




<h5>環境</h5>




<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>




<h5>参考</h5>




<p><a href="http://gazebosim.org/tutorials?cat=build_world">GAZEBO Tutorial-Build a World</a></p>




<h2>はじめに</h2>




<p>このチュートリアルでは、建築エディタを使って建築物を作る過程を説明します。</p>




<h3>建築エディタを開く。</h3>




<ol>
<li><p>Gazeboがインストールされていることを確認してください。インストールしていない場合には、<a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-install/">Gazeboのインストール</a>をご覧ください。</p></li>
<li><p>Gazeboを立ち上げてください。</p></li>
</ol>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gazebo
</span></code></pre></td></tr></table></div></figure></notextile></div>




<ol>
<li><strong>Edit</strong>メニューより、<strong>Building Editor</strong>を選ぶか、<strong>Ctrl+B</strong>を押して、エディタを立ち上げてください。すると、以下のような画面が立ち上がるはずです。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/empty_editor.png" alt="empty_editor" /></li>
</ol>




<h3>GUIについて</h3>




<p>エディタは、３つのエリアからできています。</p>




<ol>
<li><p>Palette : 建築物の素材や特徴を選べます。</p></li>
<li><p>2DView : トレースするフロアイメージをインポートできます。また、それに沿って、壁、窓、ドア、階段を追加することができます。</p></li>
<li><p>3DView : 建築物のプレビューを確認できます。色やテクスチャを他の建築物の部品に適用することもできます。</p></li>
</ol>




<!-- ![editor_zones](/images/2015-02-06-gazebo-building-editor/editor_zones.png) -->




<h2>フロアをインポートする</h2>




<p>スクラッチでシーンを作るか、すでにあるイメージをトレーするイメージとしてとして使います。このイメージは、例えば、2Dのレーザースキャンイメージ出会ったりもします。<br/>
<a href="https://bitbucket.org/osrf/gazebo_tutorials/raw/default/building_editor/files/floorplan.png">ここ</a>をクリックしてフロアイメージの例をダウンロードしてください。手順は以下のとおりです。</p>




<ol>
<li><p>以下のように、先ほどの建築エディタを開いたまま、エディタウィンドウの左側にある、<strong>Import</strong>ボタンを押してください。すると、インポートするイメージのダイアログが出てきます。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/building_editor-import.png" alt="building_editor-import" /></p></li>
<li><p>先ほど手に入れたイメージを選んでください。選んだら、<strong>Next</strong>を押してください。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/building_editor-next.png" alt="building_editor-next" /></p></li>
<li><p>トレースする壁が、正しい大きさで出力できているか確かめるために、メートルピクセル比[px/m]を設定しなければなりません。比を知っているなら、ダイアログに直接入力して、クリックすればOKです。今回の例では、比がわかっていないとします。しかし、トレースイメージ中の実世界での二点間の距離がわかっているとすると、（例えば。一番長い壁が7.5 [m]であるとか）比を計算することで、使用できるようになります。:</p></li>
<li><p> 壁の一端をクリックしてください。すると、以下のように、オリジナルのラインが現れます。</p></li>
<li><p> 壁の一端をクリックしてください。すると、ラインが定義されます。</p></li>
<li><p> 個々で、ダイアログに距離を単位[m]で入力してください(今回は7.5 [m]です)。すると、ピクセルメートル比は先ほど指定したラインに沿って自動で計算されます。</p></li>
<li><p> 完了したら、OKをクリックしてください。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/import_step_2.png" alt="import_step_2" /></p></li>
<li><p>うまく行けば、2DViewの部分に、イメージが表示されます。<br/>
<strong>コツ : </strong>レベルあ上がれば、それぞれのフロアを同じプロセスでインポートすることができます。</p></li>
</ol>




<h2>特徴を加える</h2>




<h3>壁を追加する</h3>




<p>以下の手順にしたがって、すべての壁をフロアイメージに沿ってトレースしてください。後でドアや窓を付け加えることを覚えておいてください。一旦は、それらを無視して壁を作ることができます。壁を完璧に作れなくても慌てないでください。後でまた編集することができます。</p>




<ol>
<li><p>Palleteの、壁の上でクリックしてください。</p></li>
<li><p>2DViewの上で、壁の端点からクリックをしてください。マウスを動かしたら、壁の長さが表示されます。</p></li>
<li><p>同じ壁のもう一方の端点でクリックし、微調整を行ってください。</p></li>
<li><p>新しい壁を作り始めることなく、ダブルクリックして終了します。<br/>
<strong>コツ : </strong>右クリックもしくはEscを押すと、現在の壁の編集をキャンセルできます。<br/>
<strong>コツ : </strong>デフォルトでは、壁は15°ごと、0.25[m]ごとに増減します。また、存在する壁の端点も同じです。Shiftを押しながら操作すると、これらの制限が解除できます。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/add_walls.png" alt="add_walls" /></p></li>
</ol>




<h3>窓とドアを追加する</h3>




<p><strong>Note : 正確には、窓や、ドアは壁にただ穴を開けるだけです。</strong><br/>
窓とドアをフロアイメージに沿って追加してみましょう。</p>




<ol>
<li><p>Paletteにある<strong>Window</strong>もしくは<strong>Door</strong>をクリックしましょう。</p></li>
<li><p>2DViewの上でマウスを動かすと、それらも一緒に動きます。また、それと一緒に、3DViewの上でも動きます。<br/>
<strong>コツ : </strong>窓やドアは自動で壁に沿って動きます。壁の端までの距離は動かすごとに、ディスプレイに表示されます。</p></li>
<li><p>気に入ったところでクリックしましょう。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/add_windows_doors.png" alt="add_windows_doors" />
<strong>コツ : </strong>最初に壁を作った後に、フロアプランにある窓やドアの位置を探すのは難しく感じるでしょう。これを簡単にするには、2DViewの上で、フロアプランをもしくは現在までの窓やドアの表示、非表示を選択することができます。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/view_floorplan.png" alt="view_floorplan" /></p></li>
</ol>




<h3>階段を追加する</h3>




<p>このフロアプランには階段はありませんが、階段を一つ追加したいと思います。</p>




<ol>
<li><p>Palletの<strong>Stairs</strong>をクリックしてください。</p></li>
<li><p>2DViewの上でマウスを動かすと、階段もそれと一緒に動きます。3DViewに写っているものも同様です。</p></li>
<li><p>気に入ったところでクリックしましょう。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/add_stairs.png" alt="add_stairs" /></p></li>
</ol>




<h2>階数を追加する</h2>




<p>一階については、だいぶ完成しました。階段の先もないことですし、階数を追加しましょう。<br/>
2DViewの上にある、<strong>+</strong>の上でクリックし、階数を足しましょう。あるいは、2DViewを右クリックし、<strong>Add a level</strong>を選びましょう。<br/>
新しい階数が追加できたら、フロアは自動で追加されます。すでに下の階に階段が設置されている場合は、建築物がセーブされるときに、フロアに自動で階段用の穴が飽きます。<br/>
<strong>Note : 現在は、すべてのフロアは矩形です。</strong><br/>
<strong>コツ : </strong>階数を追加する前に、現在の階数の壁が設置されていることを確認してください。<br/>
<strong>コツ : </strong>現在は、前の海の壁は、デフォルトの素材で、新しい階の壁としてコピーされます。窓やドアはコピーされません。いらない壁は、手動で削除できます。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/add_level.png" alt="add_level" /></p>




<h2>建築物を編集する</h2>




<p><strong>Note : 建築物を編集する際は気をつけてください。というのも、現在、エディタにはUndoオプションがありません。<br/>
</strong>コツ : **すべての長さはメートル単位系です。</p>




<h3>階を変更する</h3>




<p>階を追加したので、2DViewも新しい階に移動しましょう。2DViewの上にあるリストから選べば、一階にも戻れます。<br/>
<strong>コツ : </strong>現在2DViewで選択されている階数は3DViewに半島名で表示されています。また、すべての下の階は半透明です。上の階は隠れています。しかし、建築物の一部であるということを覚えておいてください。<br/>
階の形状を編集することもできます。</p>




<ul>
<li>階の形状オプションと一緒にインスペクターを開くために、2DViewをダブルクリックしてください。もしくは、右クリックし、<strong>Open level Inspector</strong>を選んでください。</li>
</ul>




<p>あなたが望まない階を追加したことでしょう。もしくは現在の階をめちゃくちゃにしいてしまい、初めからやり直したいでしょう。</p>




<ul>
<li>現在の階を削除したいなら、2DViewの上のボタンをオス化、右クリックし、<strong>Delete Level</strong>を選んでください。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/edit_level.png" alt="edit_level" /></li>
</ul>




<h3>壁を編集する</h3>




<p>最初の方に、たくさんの壁を制作しました。しかし、希望通りには作成できていないかもしれません。</p>




<ul>
<li>2DViewで壁をクリックしてください。</li>
<li>ドラッグによって壁を新しい位置に変更してください。</li>
<li><p>端点をドラッグし、リサイズもしくは回転を行ってください。<br/>
<strong>コツ ; </strong>デフォルトでは、壁は15°ごと、0.25[m]ごとに増減します。また、存在する壁の端点も同じです。Shiftを押しながら操作すると、これらの制限が解除できます。</p></li>
<li><p>階の形状オプションと一緒にインスペクターを開くために、2DViewをダブルクリックしてください。もしくは、右クリックし、<strong>Open level Inspector</strong>を選んでください。いくつかのフィールドを編集し、それらの変更を反映するために、<strong>Apply</strong>を押してください。</p></li>
<li><p>2DViewで壁の選択中に、右クリックを押して、<strong>Delete</strong>を選ぶか、Deleteを押すと、選択中の壁を削除できます。<br/>
<strong>コツ : </strong>壁を編集すると、付属の壁と統合されます。<br/>
<strong>コツ : </strong>壁を削除すると、付属の窓と壁も削除します。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/edit_walls.png" alt="edit_walls" /></p></li>
</ul>




<h3>窓とドアを編集する</h3>




<p>続いては、窓とドアについて編集しましょう。壁で行ったように、多少の違いはありますが、窓やドアを正確に編集することができます。</p>




<ul>
<li>2DViewで、窓やドアをクリックしてください。</li>
<li>新しいポジションまでドラッグして運んでください。窓やドアは自動で壁に沿って動きますし、壁から話してsってすることはできませんし、窓やドアは壁に穴を開けるだけであると言ったことを忘れないようにしてください。</li>
<li>回転ハンドルを使って回転させてください。現在は、できるだけ、壁に沿おうとしますし、回転原点を変更することはできません。</li>
<li><p>窓やドアの幅を端点をドラッグすることでリサイズしてください。</p></li>
<li><p>階の形状オプションと一緒にインスペクターを開くために、2DViewをダブルクリックしてください。もしくは、右クリックし、<strong>Window/Dooe</strong>を選んでください。</p></li>
<li><p>2DViewで壁の選択中に、右クリックを押して、<strong>Delete</strong>を選ぶか、Deleteを押すと、選択中の窓やドアを削除できます。<br/>
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/edit_windows_doors.png" alt="edit_windows_doors" /></p></li>
</ul>




<h3>階段を編集する</h3>




<p>最後に、最初の方に追加した階段を編集しましょう。フロアプランにはないので、好きなように編集しましょう。</p>




<ul>
<li>2DViewで、階段をクリックしてください。</li>
<li>新しいポジションまでドラッグして運んでください</li>
<li>回転ハンドルを使って90°回転させてください。現在は、できるだけ、壁に沿おうとしますし、回転原点を変更することはできません。</li>
<li><p>端点をドラッグすることでリサイズしてください。</p></li>
<li><p>階の形状オプションと一緒にインスペクターを開くために、2DViewをダブルクリックしてください。もしくは、右クリックし、<strong>Window/Dooe</strong>を選んでください。</p></li>
<li><p>2DViewで壁の選択中に、右クリックを押して、<strong>Delete</strong>を選ぶか、Deleteを押すと、選択中の階段を削除できます。<br/>
<strong>コツ : </strong>2DViewでは、階段の始まりも終わりも見ることができます。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/edit_stairs.png" alt="edit_stairs" /></p></li>
</ul>




<h2>色とテクスチャを追加する</h2>




<p>さて、すべての物が設置され、リサイズされました。今度は、壁や床、そして階段の色やテクスチャを決定していきます。窓やドアはただ壁に穴を開けているだけなので、物質要素がないということを覚えておいてください。<br/>
<strong>コツ : </strong>デフォルトは、色は白で、テクスチャはありません。<br/>
建築物に色やテクスチャを追加する方法は２つあります。</p>




<h3>インスペクタから変更する</h3>




<p>壁、床、階段に色やテクスチャを追加するには、壁インスペクタ、床インスペクタ、階段インスペクタのそれぞれから追加することができます。まずは、インスペクタを開、物質を選んだら、<strong>Apply</strong>を押してください。インスペクタを表示するには、それぞれの物体の上でダブルクリックするか、右クリックから選択してください。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/color_texture_inspector.png" alt="color_texture_inspector" /></p>




<h3>パレットから変更する</h3>




<p>3DViewで物体をクリックすることで、建築物のアイテムの色やテクスチャをパレットから選ぶことができます。</p>




<ol>
<li><p>Paletteから色とテクスチャを選んでください。</p></li>
<li><p>3DViewでマウスを動かすと、選択された物体のpレビューが表示され、選択された要素がハイライトされます。</p></li>
<li>選択した用をに適用する、もしくは、3DViewを右クリックする、もしくは、マテリアルモードを終了するために、物体の外をクリックすると、操作が完了します。</li>
</ol>




<p><img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/color_texture_palette.png" alt="color_texture_palette" />
<strong>Gazebo5.1の新機能 : </strong>カスタムカラーを選ぶには、paletteの<strong>More</strong>をクリックします。すると、カスタムカラーを決定するためのダイアログが開きます。<br/>
私の環境は、Ver.5.0.1なので、確認できません。<br/>
下図は、公式チュートリアル掲載のものです。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/custom_color.png" alt="custom_color" />
<strong>コツ : </strong>それぞれの物体には、一つの色とテクスチャしか適用できません。同じ物体はすべて同じ見た目になります。<br/>
<strong>Note : 現在は、カスタムテクスチャをこのエディタで使用することはできません。</strong></p>




<h2>建築物を保存する</h2>




<p>セーブをすると、<a href="http://gazebosim.org/tutorials?tut=model_structure&amp;cat=build_robot">SDFとConfigファイル</a>を直接生成します。<br/>
セーブする前に、Paletteで建築物の名前を決定してください。<br/>
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/edit_name.png" alt="edit_name" /><br/>
トップメニューでファイルを選び、<strong>Save As</strong>もしくは、Ctrl+Sでセーブしてください。モデルを保存する場所を聞くダイアログが出現します。<br/>
<strong>コツ : </strong>アドバンスオプションでは、メタデータを設定することもできます。<br/>
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/save_dialog.png" alt="save_dialog" /></p>




<h2>終了する</h2>




<p><strong>Note : 一度、建築エディタを終了すると、建築物を編集することはできません。</strong><br/>
建築物を製作し、保存したら、ファイルのところへ行き、建築エディタを終了させてください。<br/>
あなたの建築物がメインウィンドウに表示されます。将来的には、建築物を<code>Insert</code>タブで見つけることができます。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/saved_building.png" alt="saved_building" />
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/final_model_angles.png" alt="final_model_angles" /></p>




<h2>最後に</h2>




<p>私も、学校の施設を作って遊んでみました。元にした見取り図は、案内板にあったので、スマホで写真をとって作りました。シミュレーションなら、PR2も遊びに来てくれますw<br/>
奥に見えるのはWillowGarageのモデルです。
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/DSC_0332.JPG" alt="control-1st-2D" />
<img src="http://cir-kit.github.io/images/2015-02-06-gazebo-building-editor/capture.jpg" alt="capture" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[環境をつくろう ! (Modelの集合化 編) No.3.4]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/05/gazebo-population-of-models/"/>
    <updated>2015-02-05T23:10:04+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/05/gazebo-population-of-models</id>
    <content type="html"><![CDATA[<p><img src="http://cir-kit.github.io/images/gazebo_logo.png" alt="gazebo_logo" /></p>




<h5>検証日時</h5>




<p>02/03/2015 (Tue)</p>




<h5>概要</h5>




<p>Gazeboのチュートリアル第三弾「Build a World」。
このチュートリアルでは、シミュレーション中の環境をどのように構築するかについて説明します。<br/>
今回はその「Population of models」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>




<h5>レベル</h5>




<p><strong>INTERMEDIATE</strong></p>




<!-- more -->




<h5>環境</h5>




<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>




<h5>参考</h5>




<p><a href="http://gazebosim.org/tutorials?cat=build_world">GAZEBO Tutorial-Build a World</a></p>




<h2>はじめに</h2>




<p>このチュートリアルでは、SDFの<code>&lt;population&gt;</code>タグを使ってどのようにしてモデルを集合化するかを説明します。集合は個々のモデルによって構成されています。<br/>
モデルの集合を追加することは以下のようなパラメータをいちいち定義する問題であるということです。</p>




<ul>
<li><p>モデル : 机や缶など</p></li>
<li><p>いくつかの集合の一部となる物体</p></li>
<li><p>集合を入れておくコンテナの形状と寸法 : 箱、円柱などです。これらのパラメータを知るには、SDFのAPIをご覧ください。</p></li>
<li><p>集合のポジションと原点</p></li>
<li><p>集合に含まれる物体の配置 : ランダム、グリッド</p></li>
</ul>




<p>詳しい説明は、<code>&lt;population&gt;</code>タグとそのパラメータについての<a href="http://gazebosim.org/sdf.html">SDF API</a>をチェックしてください。</p>




<h2>物体の集合を作る</h2>




<ol>
<li>チュートリアル用のディレクトリを作りましょう。</li>
</ol>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir ~/tutorial_model_population
</span><span class='line'><span class="nb">cd</span> ~/tutorial_model_population
</span></code></pre></td></tr></table></div></figure></notextile></div>




<ol>
<li>作ったディレクトリに、以下のような内容で、<code>can_population.world</code>を作成してください。</li>
</ol>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="cp">&lt;?xml version=&quot;1.0&quot; ?&gt;</span>
</span><span class='line'>    <span class="nt">&lt;sdf</span> <span class="na">version=</span><span class="s">&quot;1.5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;world</span> <span class="na">name=</span><span class="s">&quot;default&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- A global light source --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;include&gt;</span>
</span><span class='line'>          <span class="nt">&lt;uri&gt;</span>model://sun<span class="nt">&lt;/uri&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/include&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- A ground plane --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;include&gt;</span>
</span><span class='line'>          <span class="nt">&lt;uri&gt;</span>model://ground_plane<span class="nt">&lt;/uri&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/include&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Testing the automatic population of objects --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;population</span> <span class="na">name=</span><span class="s">&quot;can_population1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;model</span> <span class="na">name=</span><span class="s">&quot;can1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;include&gt;</span>
</span><span class='line'>              <span class="nt">&lt;static&gt;</span>true<span class="nt">&lt;/static&gt;</span>
</span><span class='line'>              <span class="nt">&lt;uri&gt;</span>model://coke_can<span class="nt">&lt;/uri&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/include&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/model&gt;</span>
</span><span class='line'>          <span class="nt">&lt;pose&gt;</span>0 0 0 0 0 0<span class="nt">&lt;/pose&gt;</span>
</span><span class='line'>          <span class="nt">&lt;box&gt;</span>
</span><span class='line'>            <span class="nt">&lt;size&gt;</span>2 2 0.01<span class="nt">&lt;/size&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/box&gt;</span>
</span><span class='line'>          <span class="nt">&lt;model_count&gt;</span>10<span class="nt">&lt;/model_count&gt;</span>
</span><span class='line'>          <span class="nt">&lt;distribution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;type&gt;</span>random<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/distribution&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/population&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/world&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/sdf&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>また、<a href="https://bitbucket.org/osrf/gazebo_models/src/63e268d393f03ae6ec5b6930b439c4b7873dacd8/coke_can/?at=default">coke_cam model</a>より、<strong>coke_can</strong>のモデルを取得し、<code>~/.gazebo/models/</code>に置いておきましょう。<br/>
その後、Gazeboを立ち上げましょう。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gazebo can_population.world
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>すると、ソーダの缶の集合がバラバラに置いてあるのが確認できるでしょう。缶は2 x 2 x 0.01 [m]の大きさの箱に収まるようにしてあります。<br/>
より深く理解するために、先ほどの<code>can_population.world</code>に他の要素を追加してみましょう。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;population</span> <span class="na">name=</span><span class="s">&quot;can_population1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;model</span> <span class="na">name=</span><span class="s">&quot;can1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;include&gt;</span>
</span><span class='line'>          <span class="nt">&lt;static&gt;</span>true<span class="nt">&lt;/static&gt;</span>
</span><span class='line'>          <span class="nt">&lt;uri&gt;</span>model://coke_can<span class="nt">&lt;/uri&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/include&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/model&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>ここまでで、<code>&lt;population&gt;</code>タグを使い、どのようにして集合の要素を決定するかがわかりました。すべての集合は、同一でない、個々の名前を持つ必要があり、<code>name</code>の部分で定義されています。<code>population</code>タグの中では、<code>&lt;model&gt;</code>タグを使ってモデルを選択できます。集合のそれぞれの要素は、重複しない名前でシミュレーションに挿入されます。また、その名前というのは、サフィックス<code>_clone_i</code>(<code>i</code>は集合の要素の個数で決定されます)によって名付けられます。Gazeboには以下のようなモデルのリストと共に、物体が表示されます。
<img src="http://cir-kit.github.io/images/2015-02-05-gazebo-population-of-models/model_list.png" alt="model_list" />
集合の最も一般的なタイプは、木や岩、建物などの動かない物体で構成されています。<code>&lt;population&gt;</code>タグはそのような静的なモデルで使用することをおすすめます。また、より詳しい定義が必要で、数が少ない、ロボットの様な動的物体には使用しないことをおすすめします。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;pose&gt;</span>0 0 0 0 0 0<span class="nt">&lt;/pose&gt;</span>
</span><span class='line'>  <span class="nt">&lt;box&gt;</span>
</span><span class='line'>    <span class="nt">&lt;size&gt;</span>2 2 0.01<span class="nt">&lt;/size&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/box&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>上記のコードは物体をどこに設置するのかについて定義しています。今回は、すべての物体は、2 2 0.01の3Dの箱の中にスポーンします。また、原点(0, 0, 0)を(0, 0, 0)にセンタリングしてあります。続いて、<code>&lt;box&gt;</code>について説明します。<code>&lt;cylinder&gt;</code>の部分では、半径、長さを定義することができます。<code>&lt;cylinder&gt;</code>パラメータについて詳しく知りたい場合は、<a href="http://gazebosim.org/sdf.html">SDF Specification</a>をチェックしてみてください。<code>&lt;pose&gt;</code>要素では、集合の場所のフレームを定義しています。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;model_count&gt;</span>10<span class="nt">&lt;/model_count&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>上記部分では、集合に、何個の物体を定義するかを決定します。正の数字であれば何でも良いですが、数を大きくすると、パフォーマンスに大きな影響を及ぼすといういうことを念頭に置いておいてください。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;distribution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>random<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/distribution&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>上記に示す<code>&lt;distribution&gt;</code>要素では、物体をどのように配置するかを定義します。</p>




<h2>Distributionの種類</h2>




<ul>
<li><p>random : モデルをランダムに配置します。物体同士がぶつかる可能性があることを覚えておいてください。</p></li>
<li><p>uniform : 偽似2Dグリッドパターンに沿ってモデルを配置します。<code>K-Means</code>を使うことにより、解決に近づき、範囲内に定義された物体の数を定義できます。</p></li>
<li><p>grid : モデルを2Dのグリッドパターン上に配置します。この配置は行、列, 物体間距離を定義する必要があります。<code>&lt;model_count&gt;</code>要素は、この配置では無視されるということを覚えておいてください。シミュレーションに挿入される物体は行と列の数を掛けあわせた数と一致します。</p></li>
<li><p>linear-x : X軸に沿ってモデルが並びます。</p></li>
<li><p>linear-y : Y軸に沿ってモデルが並びます。</p></li>
<li><p>linear-z : Z軸に沿ってモデルが並びます。</p></li>
</ul>




<p>もっとたくさんの例を確認したいならば、<a href="http://bitbucket.org/osrf/gazebo/raw/default/worlds/population.world">population.world</a>ファイルをGazeboと共に立ち上げてください。<br/>
もちろん、その場合には、以下のように入力しましょう。:</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  gazebo worlds/population.world
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>以下のキャプチャは、<code>population.world</code>を実行した様子です。
<img src="http://cir-kit.github.io/images/2015-02-05-gazebo-population-of-models/gazebo_population.png" alt="gazebo_population" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[環境をつくろう ! (Digital Elevation Models 編) No.3.3]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/03/gazebo-digital-elevation-models/"/>
    <updated>2015-02-03T19:58:17+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/03/gazebo-digital-elevation-models</id>
    <content type="html"><![CDATA[<p><img src="http://cir-kit.github.io/images/gazebo_logo.png" alt="gazebo_logo" /></p>




<h5>検証日時</h5>




<p>02/03/2015 (Tue)</p>




<h5>概要</h5>




<p>Gazeboのチュートリアル第三弾「Build a World」。
このチュートリアルでは、シミュレーション中の環境をどのように構築するかについて説明します。<br/>
今回はその「Digital Elevation Models」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>




<h5>レベル</h5>




<p><strong>ADVANCED</strong></p>




<!-- more -->




<h5>環境</h5>




<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>




<h5>参考</h5>




<p><a href="http://gazebosim.org/tutorials?cat=build_world">GAZEBO Tutorial-Build a World</a></p>




<h2>はじめに</h2>




<p><strong>Digital Elevation Model (DEM)</strong>は3Dの植物や建物のような物体を含まないような地形です。DEMはLIDARやradar、カメラなどによるセンサフュージョンによって生成されます。グラウンドポジションの地形の標高は、定期的に水平間隔でサンプリングされています。<a href="http://en.wikipedia.org/wiki/Digital_elevation_model">Wikipedia</a>でDEMのより詳しい情報があります。<br/>
DEMという言葉は一般的な名称であり、至って普通のフォーマットです。実際、DEMは代表的なグリッド立体図（水平捜線）や、ベクトルベースの基板地図変換である<strong>vector-based triangular irregular network (TIN)</strong>なのです。現在Gazeboは<a href="http://www.gdal.org/">GDAL</a>ライブラリでサポートされているraster(水平捜線)データのみをサポートしています。<br/>
GazeboをDEMをサポートする主な動機付けは、リアルな地形をシミュレートできるようにしたいというものです。ロボットを現実の世界のと同じ地形でシミュレーションし、その動向をテストし、救助用または農業用への応用を図ることは興味深いものとなるでしょう。</p>




<h2>GazeboにDEMサポートを適用する</h2>




<p>DEMファイルをサポートするには、GDALライブラリをインストールする必要があります。</p>




<h5>Ubuntu Trusty/Utopic の場合:</h5>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  sudo apt-get install gdal-bin libgdal-dev libgdal1h python-gdal
</span></code></pre></td></tr></table></div></figure></notextile></div>




<h5>Ubuntu Precise の場合:</h5>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  sudo apt-get install gdal-bin libgdal1-1.7.0 libgdal1-dev python-gdal
</span></code></pre></td></tr></table></div></figure></notextile></div>




<h2>DEMファイルとSDFフォーマットでの定義</h2>




<p>立体データを提供する団体はいくつかあります。例えば、80年代の<a href="http://extract.cr.usgs.gov/public/NED/mtsthelens_before.zip">噴火前</a>か<a href="http://extract.cr.usgs.gov/public/NED/mtsthelens_after.zip">噴火後</a>のセント・ヘレンズ山のDEMフォーマットファイルをダウンロードしましょう。ダウンロードしたら、Unzipで解凍し、<code>mtsthelens.dem</code>という名前をつけましょう。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nb">cd</span> ~/Downloads
</span><span class='line'>  wget http://extract.cr.usgs.gov/public/NED/mtsthelens_before.zip
</span><span class='line'>  unzip ~/Downloads/mtsthelens_before.zip -d /tmp
</span><span class='line'>  mv /tmp/30.1.1.1282760.dem /tmp/mtsthelens.dem
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>通常、DEMファイルにはたくさんの取り決めがあるので、Gazeboでは扱えません。なので、DEMの取り決めに合わせる良いアイデアがあります。i日のコマンドで地形を129x129に縮小し、Gazeboの<code>media/dem/</code>ディレクトリにそれをコピーします。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  mkdir -p /tmp/media/dem/
</span><span class='line'>  gdalwarp -ts <span class="m">129</span> <span class="m">129</span> /tmp/mtsthelens.dem /tmp/media/dem/mtsthelens_129.dem
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>GazeboでDEMファイルを読み込むのは高低地図を読み込む方法と同じです。Gazeboは読み込みファイルがプレーンファイルかDEMファイルであった場合、自動でファイルを検出します。<code>volcano.world</code>ファイルを作成し、以下の内容をコピペしてください。できたら<code>/tmp</code>のように、どこにでも好きなところに保存してください。。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;sdf</span> <span class="na">version=</span><span class="s">&quot;1.4&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;world</span> <span class="na">name=</span><span class="s">&quot;default&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- A global light source --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;include&gt;</span>
</span><span class='line'>      <span class="nt">&lt;uri&gt;</span>model://sun<span class="nt">&lt;/uri&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/include&gt;</span>
</span><span class='line'>    <span class="nt">&lt;model</span> <span class="na">name=</span><span class="s">&quot;heightmap&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;static&gt;</span>true<span class="nt">&lt;/static&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">name=</span><span class="s">&quot;link&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;collision</span> <span class="na">name=</span><span class="s">&quot;collision&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;geometry&gt;</span>
</span><span class='line'>            <span class="nt">&lt;heightmap&gt;</span>
</span><span class='line'>              <span class="nt">&lt;uri&gt;</span>file://media/dem/mtsthelens_129.dem<span class="nt">&lt;/uri&gt;</span>
</span><span class='line'>              <span class="nt">&lt;size&gt;</span>150 150 50<span class="nt">&lt;/size&gt;</span>
</span><span class='line'>              <span class="nt">&lt;pos&gt;</span>0 0 0<span class="nt">&lt;/pos&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/heightmap&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/geometry&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/collision&gt;</span>
</span><span class='line'>        <span class="nt">&lt;visual</span> <span class="na">name=</span><span class="s">&quot;visual_abcedf&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;geometry&gt;</span>
</span><span class='line'>            <span class="nt">&lt;heightmap&gt;</span>
</span><span class='line'>              <span class="nt">&lt;texture&gt;</span>
</span><span class='line'>                <span class="nt">&lt;diffuse&gt;</span>file://media/materials/textures/dirt_diffusespecular.png<span class="nt">&lt;/diffuse&gt;</span>
</span><span class='line'>                <span class="nt">&lt;normal&gt;</span>file://media/materials/textures/flat_normal.png<span class="nt">&lt;/normal&gt;</span>
</span><span class='line'>                <span class="nt">&lt;size&gt;</span>1<span class="nt">&lt;/size&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/texture&gt;</span>
</span><span class='line'>              <span class="nt">&lt;texture&gt;</span>
</span><span class='line'>                <span class="nt">&lt;diffuse&gt;</span>file://media/materials/textures/grass_diffusespecular.png<span class="nt">&lt;/diffuse&gt;</span>
</span><span class='line'>                <span class="nt">&lt;normal&gt;</span>file://media/materials/textures/flat_normal.png<span class="nt">&lt;/normal&gt;</span>
</span><span class='line'>                <span class="nt">&lt;size&gt;</span>1<span class="nt">&lt;/size&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/texture&gt;</span>
</span><span class='line'>              <span class="nt">&lt;texture&gt;</span>
</span><span class='line'>                <span class="nt">&lt;diffuse&gt;</span>file://media/materials/textures/fungus_diffusespecular.png<span class="nt">&lt;/diffuse&gt;</span>
</span><span class='line'>                <span class="nt">&lt;normal&gt;</span>file://media/materials/textures/flat_normal.png<span class="nt">&lt;/normal&gt;</span>
</span><span class='line'>                <span class="nt">&lt;size&gt;</span>1<span class="nt">&lt;/size&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/texture&gt;</span>
</span><span class='line'>              <span class="nt">&lt;blend&gt;</span>
</span><span class='line'>                <span class="nt">&lt;min_height&gt;</span>2<span class="nt">&lt;/min_height&gt;</span>
</span><span class='line'>                <span class="nt">&lt;fade_dist&gt;</span>5<span class="nt">&lt;/fade_dist&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/blend&gt;</span>
</span><span class='line'>              <span class="nt">&lt;blend&gt;</span>
</span><span class='line'>                <span class="nt">&lt;min_height&gt;</span>4<span class="nt">&lt;/min_height&gt;</span>
</span><span class='line'>                <span class="nt">&lt;fade_dist&gt;</span>5<span class="nt">&lt;/fade_dist&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/blend&gt;</span>
</span><span class='line'>              <span class="nt">&lt;uri&gt;</span>file://media/dem/mtsthelens_129.dem<span class="nt">&lt;/uri&gt;</span>
</span><span class='line'>              <span class="nt">&lt;size&gt;</span>150 150 50<span class="nt">&lt;/size&gt;</span>
</span><span class='line'>              <span class="nt">&lt;pos&gt;</span>0 0 0<span class="nt">&lt;/pos&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/heightmap&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/geometry&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/visual&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/link&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/model&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/world&gt;</span>
</span><span class='line'><span class="nt">&lt;/sdf&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>コードの上部にある<code>&lt;heightmap&gt;&lt;size&gt;</code>要素は、(<code>&lt;size&gt;</code>要素がないときは)Gazeboが原寸でDEMファイルを読み込むかどうかを決定し、(<code>&lt;size&gt;</code>要素があるときは)リサイズします。今回は、DEMファイルをリサイズします。<code>&lt;size&gt;</code>要素はGazeboにシミュレーションで使用し、リサイズする大きさをメートル単位で定義します。もし、正しいアスペクト比を維持したいなら横幅、高さ、海抜（<code>&lt;size&gt;</code>の三番目です）を詳細に計算して定義してください。今回の例では、DEMファイルは150 x 150 [m]で最も高いところで、海抜50 [m] となるようにリサイズしています。<br/>
GazeboをDEMファイルを含む<code>world</code>と共に立ち上げ、以下のような火山の立体図が表示されることを確認してください。以下のコマンドの例では、ファイルを<code>/tmp</code>ディレクトリに置いています。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>　# インストールパスにあるgazeboのsetup.shにsourceコマンドを実行することを確認してください。
</span><span class='line'>　source /usr/share/gazebo/setup.sh
</span><span class='line'>　GAZEBO_RESOURCE_PATH<span class="o">=</span><span class="s2">&quot;$GAZEBO_RESOURCE_PATH:/tmp&quot;</span> gazebo /tmp/volcano.world
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p><img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/gazebo_sthelens.png" alt="gazebo_sthelens" /></p>




<h2>興味のある地域のDEMファイルを手に入れるにはどうしたらよいですか?</h2>




<h3>GLCF(Global Land Cover Facillity)について</h3>




<p>続いて、興味のある特定の地域のDEMファイルを手に入れる方法を説明します。<br/>
<a href="http://glcf.umd.edu/">Global Land Cover Facility</a>では地球の高解像度なデジタル地形データを提供し、維持しています。<a href="http://glcfapp.glcf.umd.edu:8080/esdi/index.jsp">Search and Preview tool</a>へ行ってみましょう。すると、イメージしたシミュレータを見つけることができるでしょう。すべての地形パッチはあなたがこのツールを使う前から知っているであろう個々の<a href="http://www.shinko-keirin.co.jp/keirinkan/tea/sho/jissen/rika/201303_4/index.html">pathとrow</a>を持っています。私達は、QGISを使い興味のあるpath/rowを発見するのです。以下のキャプチャはその検索画面です。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/glcf_search_tool.png" alt="glcf_search_tool" /></p>




<h3>QIGSについて</h3>




<p><a href="http://www.qgis.org/">QIGS</a>とはクロスプラットフォームのオープンソース地理情報システムプログラムです。以下のように、このプログラムでは閲覧、編集、調査で使用することができます。<a href="http://www.qgis.org/en/site/forusers/download.html">QGISのサイトの指示</a>にしたがってQGISをダウンロードしてください。</p>




<!-- ![qgis](/images/2015-02-04-gazebo-digital-elevation-model/qgis.png) -->




<h5>QIGSのダウンロード</h5>




<p><a href="http://www.qgis.org/en/site/forusers/download.html">QGISのダウンロード</a>を参考にしてQGISをダウンロードします。<br/>
以下のように、aptを使ってQGISをインストールします。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  sudo apt-get update
</span><span class='line'>  sudo apt-get install qgis python-qgis
</span></code></pre></td></tr></table></div></figure></notextile></div>




<h5>QGISの使い方</h5>




<ol>
<li><p>QGISを開いたら、以下のように、画面左にある<strong>WMS/WMTSレイヤの追加</strong>というアイコンをクリックしましょう。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis-add-wms-wmts.png" alt="qgis-add-wms-wmts" /></p></li>
<li><p>すると以下のようなウィンドウが出るので、以下のように、バーをクリックし、<strong>Lizardtch server</strong>を選択し、<strong>接続</strong>ボタンを押してください。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis-lizardtech-server.png" alt="qgis-lizardtech-server" /></p></li>
<li><p>すると、以下の一枚目のように、レイヤを選択できるようになるので、タイトルが<strong>MODIS</strong>であるレイヤを選んで、一番下の<strong>追加</strong>を押してください。終わったら、このウィンドウィンドウを閉じてください。<br/>
うまく行くと、二枚目の写真のように、世界地図がレイヤに表示されるはずです。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis-add-modis.png" alt="qgis-add-modis" />
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis-modis-layer.png" alt="qgis-modis-layer" /></p></li>
<li><p>続いてのステップは他のレイヤーを利用可能なパッチと共に追加します。<a href="http://landsat.usgs.gov/documents/wrs2_descending.zip">このshapeファイル</a>をダウンロードし、どこでも良いのでフォルダに解凍してください。私は、<code>~/Downloads/</code>に保存し、そこで展開しました。</p></li>
<li><p>QGISに戻り、以下の一枚目のように、<strong>ベクタレイヤの追加</strong>というアイコンを押してください。すると、<strong>開く前に、現在のプロジェクトを保存しますか？</strong>と聞かれるポップアプが表示されるので、<strong>保存する</strong>を選んでください。その後、先ほど解凍したフォルダの中の<code>wrs2descending.shp</code>ファイルを選択してください。うまく開けると、2枚目の様なレイヤが表示されるはずです。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis-add-vector-layer.png" alt="qgis-add-vector-layer" />
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis-wrs2-descending-layer.png" alt="qgis-wrs2-descending-layer" /></p></li>
</ol>




<p>ここまでで、メインウィンドウに２つのレイヤが開いていることを確認できるはずです。２つのレイヤーを同時に確認できるようにするため、<code>wrs2desceding</code>レイヤの透明度を変更しましょう。<br/>
ウィンドウ左側のレイヤ一覧より、<code>wrsdescending</code>レイヤをダブルクリックすると、以下の一枚目のようなウィンドウが出るので、透明度を85%程度に修正しましょう。成功すれば、二枚目のようなレイヤになっているはずです。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis-wrs2-descending-%20transparency.png" alt="qgis-wrs2-descending- transparency" />
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis-modis-wrs2-descending.png" alt="qgis-modis-wrs2-descending" /></p>




<h3>QGISとGLCFを使って地形データを取得するまでの手順</h3>




<h5>QGISの操作</h5>




<ol>
<li><p>脇ほどまでのレイヤを使って、スクロールと左ボタンを使用し、興味のある地域まで移動してください。<br/>
今回は、富士山まで移動してみました。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis-mtfuji.png" alt="qgis-mtfuji" /></p></li>
<li><p>以下のように、上部のバーにある、<strong>地物情報表示</strong>というアイコンをクリックしてください。<br/>
その状態で、興味のある地域をクリックすると、以下のように、そのエリア一体の地形パッチがハイライトされます。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis-identify-features.png" alt="qgis-identify-features" /></p></li>
<li><p>以下のキャプチャの例では、富士山近辺の地域のDEMのためのpathとrowを確認することができます。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis-identify-features-detail.png" alt="qgis-identify-features-detail" />
ちなみに、公式チュートリアルでは、以下のキャプチャのように、スペイン、カナリア諸島の、<a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%B9%E3%83%BB%E3%83%91%E3%83%AB%E3%83%9E%E3%82%B9%E3%83%BB%E3%83%87%E3%83%BB%E3%82%B0%E3%83%A9%E3%83%B3%E3%83%BB%E3%82%AB%E3%83%8A%E3%83%AA%E3%82%A2">ラスパルマス</a>のDEMのpathとrowを確認しています。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/qgis_las_palmas.png" alt="qgis_las_palmas" /></p></li>
</ol>




<h5>GLCFの操作</h5>




<ol>
<li><p><a href="http://glcfapp.glcf.umd.edu:8080/esdi/index.jsp">GLCF検索ツール</a>に戻り、調べたpath/rowの値を<strong>Start Path</strong>と<strong>Start Row</strong>とラベリングされているカラムに入力しましょう。</p></li>
<li><p>入力したら、<strong>Submit Quenry</strong>をクリックしてください。</p></li>
<li><p><strong>Preview and Download</strong>を押すと結果を表示できます。以下の結果は、富士山近傍のもので、path = 108、row = 35とした時の結果です。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/glcf-mtfuji.png" alt="glcf-mtfuji" /></p></li>
<li><p>地形ファイルを選び、<strong>Download</strong>を押してください。<br/>
今回は、計測年度が一番新しい、2011年のもの、ID:294-863を選びました。（上図参照）</p></li>
<li><p>最後に、拡張子が<code>.TIF.gz</code>のファイルを選び、好きなディレクトリに保存し、展開してください。<br/>
尚、<code>.gz</code>が付いているデータは複数ありますが、<code>README.GTF</code>によると、<code>*_B62.TIF.gz</code>となっているものが程よい解像度で、良いみたいです。また、<code>README.GTF</code>によると、<code>*.TIF.*</code>は<code>GeoTiff</code>フォーマットになっているそうなので、これを選びましょう。尚、<code>*</code>はワイルドカードです。<br/>
<a href="http://glcf.umd.edu/">GLCF(Global Land Cover Facility)</a>ファイルは、DEMが利用できるフォーマットとして、最も標準的なな<a href="http://ja.wikipedia.org/wiki/GeoTIFF">GeoTiffフォーマット</a>になっています。</p></li>
</ol>




<h2>GazeboでDEMデータを使用するための準備</h2>




<p>DEMデータは通常、高精細に作られています。Gazeboで使用する前に、<code>gdalwarp</code>を使って地形の解像度を扱いやすいサイズにします。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  gdalwarp -ts &lt;width&gt; &lt;height&gt; &lt;srcDEM&gt; &lt;targetDEM&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>DEMデータは、しばしば、<code>holes</code>や<code>void</code>エリアを含んでいます。そういったエリアはDEMが生成された時に作成できなかったデータがあるエリアと一致します。<code>hole</code>というデータの場合、<code>hole</code>には、DEMで使用された、データタイプの最大値もしくは最小値が割り当てられています。<br/>
上記のような<code>hols</code>が埋められたDEMのデータセットである、<code>finished</code>バージョンをダウンロードするよう、常に心がけてください。もし、あなたのDEMの地形データが<code>hols</code>(<code>NODATA</code>値としても知られている)を含んでいる場合、<code>gdal_fillnodata.py</code>のような、<code>gdal</code>のツールを使って手動で修復してみてください。</p>




<h2>Gazeboで様々なDEMを使う</h2>




<p>Gazeboは、直接様々なDEMをサポートしていないにも関わらず、GDALにはDEMを一つにするマージのための有益なツールセットがあります。DEMのセットをダウンロードする最初のステップはマージすることです。パッチは他のパッチと重なることがあるということを覚えておいてください。GDALはそれらの重なりをシームレスにマージできるのです。今あなたがいるディレクトリにマージする準備ができた状態で<code>Geofiff</code>ファイルがあるとすると、次のコマンドで、それをマージできます。</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  gdal_merge.py *.tif -o dem_merged.tif
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p>すると、<code>dem_merged.tif</code>ファイルを<code>world</code>ファイルの中で使用できますし、Gazeboはすべてのパッチがマージされた状態で、地形を読み込むでしょう。以下のスクリーンショットは、公式サイトのもので、カナリア諸島一帯を囲む４つのパッチをマージした結果だそうです。
<img src="http://cir-kit.github.io/images/2015-02-04-gazebo-digital-elevation-model/gazebo_dem_merged.png" alt="gazebo_dem_merged" /></p>




<h2>最後に</h2>




<p>自分で取得した地図をとりあえず表示することは出来ましたが、縮尺とかがおかしいままなので、解決したら、また投稿します。とりあえず今は、先に進みたいです。(02/04/2015 21:51)</p>

]]></content>
  </entry>
  
</feed>
