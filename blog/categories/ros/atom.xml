<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ros | 九州工業大学 CIR-KIT Blog]]></title>
  <link href="http://cir-kit.github.io/blog/categories/ros/atom.xml" rel="self"/>
  <link href="http://cir-kit.github.io/"/>
  <updated>2015-02-19T17:28:37+09:00</updated>
  <id>http://cir-kit.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GazeboをROSに繋ぐ (ROSにおけるGazeboのプラグイン 編) No.6.6]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/19/gazebo-gazebo-plugins-in-ros/"/>
    <updated>2015-02-19T03:23:21+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/19/gazebo-gazebo-plugins-in-ros</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/19/2015 (Thu)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「Gazebo Plugins in ROS」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : ROSとともにGazeboのプラグインを使う</h2>

<p>Gazeboのプラグインはあなたのrおボットモデルにより良い機能性を提供し、ROSのセンサ出力やモータ入力のためのメッセージやサービスコールと繋ぐことができる。このチュートリアルでは、すでに存在するプラグインをセットアップするやり方と、ROSとともに動作する独自のプラグインを作る方法を説明します。</p>

<h2>前提条件</h2>

<p><a href="https://cir-kit.github.io/blog/2015/02/17/gazebo-urdf-in-gazebo/">前回のURDFに関するチュートリアル</a>で述べた時のRRBotのセットアップを行っていることを確認してください。</p>

<h2>プラグインを追加する</h2>

<p>プラグインをURDFのメイン要素の多くに追加することができます。 - プラグインが取り上げ、目的としていることに依存する<code>&lt;robot&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;joint&gt;</code>などである。プラグインをあなたのURDFの主な要素にプラグインを追加するには、<code>&lt;gazebo&gt;</code>要素にある<code>&lt;plugin&gt;</code>タグをラップする必要があります。</p>

<h3><code>&lt;robot&gt;</code>要素にプラグインを追加する</h3>

<p>以下に示すのは、URDFにある<code>&lt;robot&gt;</code>要素へのプラグインの例である。:</p>

<pre><code class="xml">&lt;gazebo&gt;
  &lt;plugin name="differential_drive_controller" filename="libdiffdrive_plugin.so"&gt;
    ... plugin parameters ...
  &lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<p>上記の例のプラグインは<code>&lt;robot&gt;</code>要素に追加されている。なぜなら他の<code>&lt;gazebo&gt;</code>要素やプロパティをと同じように、もし<code>reference="x"</code>がないということは、<code>&lt;robot&gt;</code>全体を参照していると定義しているのである。<a href="http://gazebosim.org/sdf/">SDF</a>フォーマットでは、<code>&lt;model&gt;</code>を参照すると考えられる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GazeboをROSに繋ぐ (Roslaunchを使う 編) No.6.4]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/15/gazebo-using-roslaunch/"/>
    <updated>2015-02-15T17:03:28+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/15/gazebo-using-roslaunch</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/15/2015 (Sun)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「Using roslaunch」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : Gazebbo、worldファイル、URDFモデルを起動するためのroslaunchを使う</h2>

<p>Gazeboを起動したり、worldモデルを開いたり、シミュレーション環境にロボットモデルをスポーンさせる方法はたくさんあります。このチュートリアルでは、<code>rosrun</code>と<code>roslaunch</code>を使ったROSを用いてのそれらの方法を説明します。ROSパッケージの中のURDFを保存し、様々なROSワークスペースのリソースパスを保存する方法を含みます。</p>

<h3>worldモデルを開くためにroslaunchを使う</h3>

<p><a href="http://www.ros.org/wiki/roslaunch">roslaunch</a>ツールはROSのノードを起動し、ROSの中でロボットを起動する基本的な方法です。Gazeboの空のworlを起動することは、これまでのチュートリアルで行ってきた<code>rosrun</code>コマンドを使うのと同じです。以下のように、単純に実行してみましょう。</p>

<pre><code class="bash">roslaunch gazebo_ros empty_world.launch
</code></pre>

<h4>roslaunch引数</h4>

<p>Gazeboの挙動を変更するためのlaunchファイルには、以下の引数を追加することができます。:</p>

<h5>pused</h5>

<blockquote><p>Gazeboを一時停止した状態で起動する(default false)</p></blockquote>

<h5>usesimtime</h5>

<blockquote><p>ROSの<code>/clock</code>トピックを通じて配信される、Gazebo-publishedのシミュレーションタイムを取得するために、ROSノードに時間を問い合わせます。(default true)</p></blockquote>

<h5>gio</h5>

<blockquote><p>Gazeboのユーザーインターフェースウィンドウをlaunchします。(default true)</p></blockquote>

<h5>headless</h5>

<blockquote><p>(Ogre)コンポーネントを記録することで、シミュレータが呼び出しているすべての関数を表示します。<code>gui:=true</code>と一緒では起動しません。(default false)</p></blockquote>

<h5>debug</h5>

<blockquote><p>gdbを使用したデバッグモードで<code>gzserver</code>(Gazeboのサーバー)を起動します。(default false)</p></blockquote>

<h3>roslaunchコマンドの例</h3>

<p>通常、引数のデフォルト値はすべて必要であり、以下のように記述します。:</p>

<pre><code class="bash">roslaunch gazebo_ros empty_world.launch paused:=true use_sim_time:=false gui:=true throttled:=false headless:=false debug:=true
</code></pre>

<h3>他のデモworldをlaunchする</h3>

<p><code>gazebo_ros</code>パッケージには、他のデモworldがすでに含まれています。以下がその内容です。:</p>

<pre><code>roslaunch gazebo_ros willowgarage_world.launch
roslaunch gazebo_ros mud_world.launch
roslaunch gazebo_ros shapes_world.launch
roslaunch gazebo_ros rubble_world.launch
</code></pre>

<p><code>mudworld.launch</code>は、シンプルなジョイントメカニズムをlaunchするものであることを知っておいていください。<code>mudworld.launch</code>は以下の内容のlaunchファイルです。</p>

<pre><code class="xml">&lt;launch&gt;
  &lt;!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --&gt;
  &lt;include file="$(find gazebo_ros)/launch/empty_world.launch"&gt;
    &lt;arg name="world_name" value="worlds/mud.world"/&gt; &lt;!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable --&gt;
    &lt;arg name="paused" value="false"/&gt;
    &lt;arg name="use_sim_time" value="true"/&gt;
    &lt;arg name="gui" value="true"/&gt;
    &lt;arg name="headless" value="false"/&gt;
    &lt;arg name="debug" value="false"/&gt;
  &lt;/include&gt;
&lt;/launch&gt;
</code></pre>

<p>このlaunchファイルでは、<code>emptyworld.launch</code>から機能するのに必要不可欠なほとんどすべてを継承しています。<code>mud.World</code>ファイルとともに<code>emptyworld.launch</code>ファイルを用いる代わりに、私達が変更しなければならないパラメータは<code>worldname</code>パラメータだけです。他の引数はデフォルト値を設定しているだけです。</p>

<h3>Worldファイル</h3>

<p><code>mud_world.launch</code>ファイルをよく調べると、<code>mud.world</code>ファイルの構成に注目するでしょう。<code>mud.world</code>の最初のいくつかの構成要素は以下のようになっています。:</p>

<pre><code class="xml">  &lt;sdf version="1.4"&gt;
    &lt;world name="default"&gt;
      &lt;include&gt;
        &lt;uri&gt;model://sun&lt;/uri&gt;
      &lt;/include&gt;
      &lt;include&gt;
        &lt;uri&gt;model://ground_plane&lt;/uri&gt;
      &lt;/include&gt;
      &lt;include&gt;
        &lt;uri&gt;model://double_pendulum_with_base&lt;/uri&gt;
        &lt;name&gt;pendulum_thick_mud&lt;/name&gt;
        &lt;pose&gt;-2.0 0 0 0 0 0&lt;/pose&gt;
      &lt;/include&gt;
      ...
    &lt;/world&gt;
  &lt;/sdf&gt;
</code></pre>

<h4>あなたのコンピュータ上で、フルバージョンのworldファイルを以下のセクションで確認してください。</h4>

<p>このworldファイルでは、３つのモデルが参照されていることをわずかに確認できます。３つのモデルはローカルのGazeboモデルデータベースの中にあります。もし見つからなければ、Gazeboのオンラインデータベースより自動的にダウンロードしてきます。
worldファイルについて詳しく知りたければ、<a href="http://cir-kit.github.io/blog/categories/build-a-world/">環境をつくろう !</a>のチュートリアルをご覧ください。</p>

<h4>worldファイルをコンピュータ上で検索する</h4>

<p>worldファイルは、Gazeboのリソースパス上にある、<code>/worlds</code>ディレクトリの中にあります。このパスはGazeboをどのようにインストールし、どのタイプのシステムを使っているかということに依存します。Gazeboリソースの位置を探すには、以下のコマンドを使用してください。:</p>

<pre><code class="bash">env | grep GAZEBO_RESOURCE_PATH
</code></pre>

<p>典型的なパスだと、<code>/usr/local/share/gazebo-1.9</code>となるでしょう。<code>/worlds</code>に検索したパスを追加すると、<code>mud.world</code>ファイルを含む、Gazeboが使うディレクトリに直接接続できます。</p>

<h2>独自のGazebo ROSパッケージを作る</h2>

<p>Gazeboにロボットをスポーンさせる方法について続ける前に、最新版を使うために、ROSをGazeboと使う際の基本的なファイル構造（ヒエラルキー）についてまずは学びましょう。
ここまでの段階で、あなたの<code>catkin</code>ワークスペースは<code>catkin_ws</code>という名前であると仮定します。もちろん、ワークスペースの名前は好きなものをつけてもらって構いません。例えば、あなたの<code>catkin</code>ワークスペースが以下のような位置にあるとします。:</p>

<pre><code>/home/user/catkin_ws/src
</code></pre>

<p><code>/MYROBOT_description</code>という名前のパッケージの中に、あなたのロボットモデルにつながるすべてのものと、その記述についてがROSの基本的なパラメータとして存在し、Gazeoboとともに使用されるworldファイルとlaunchファイルは<code>/MyROBOT_gazebo</code>という名前のROSパッケージの中に存在します。ただし、<code>MYROBOT</code>の部分はあなたのロボット名です。これらの２つのパッケージにより、ファイル構造は以下のようになります。:</p>

<pre><code>../catkin_ws/src
    /MYROBOT_description
        package.xml
        CMakeLists.txt
        /urdf
            MYROBOT.urdf
        /meshes
            mesh1.dae
            mesh2.dae
            ...
        /materials
        /cad
    /MYROBOT_gazebo
        /launch
            MYROBOT.launch
        /worlds
            MYROBOT.world
        /models
            world_object1.dae
            world_object2.stl
            world_object3.urdf
        /materials
        /plugins
</code></pre>

<p><code>catkin_create_pkg</code>コマンドは、新しいパッケージを作成する際に使用します。しかし、もし必要なら、<code>rosbuilt</code>を使っても簡単にそれを行うことができます。ほとんどすべてのフォルダとファイルは自明でなければなりません。
次のセクションでは、カスタムのworldファイルを使うためのセッティングについて説明してゆきます。</p>

<h3>カスタムのworldファイルを作る</h3>

<p>あなたのパッケージやロボットに特化したあなた独自のROSパッケージの中にカスタムの<code>.world</code>を作成することができます。この短いチュートリアルでは、ground、sun、gas stationのある空のシミュレーション環境を作成します。以下は推奨規約です。<code>MYROBOT</code>の部分はあなたのロボットの名前にするか、ロボットがなければ、<code>test</code>の様な名前に置き換えるということを忘れないでください。尚、以下のチュートリアルでは、<code>catkin</code>ワークスペースが<code>~/catkin_ws/</code>(ホームディレクトリ直下に<code>catkin_ws</code>という名前である)となっていると仮定します。</p>

<ul>
<li><code>MYROBOT_gazebo</code>という名前のROSパッケージを作る</li>
</ul>


<pre><code class="bash">mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/src
catkin_create_pkg MYROBOT_gazebo
cd ~/catkin_ws
catkin_make
source devel/setup.sh
</code></pre>

<ul>
<li>そのパッケージの中で、launchフォルダを作る</li>
</ul>


<pre><code class="bash">roscd MYROBOT_gazebo
mkdir launch
</code></pre>

<ul>
<li>そのlaunchフォルダの中に、<code>MYROBOT.launch</code>ファイルを作る。(デフォルトの引数はありません)</li>
</ul>


<pre><code class="bash">gedit MYROBOT.launch
</code></pre>

<p>尚、<code>MYROBOT.launch</code>は以下の内容のにする。</p>

<pre><code class="xml">&lt;launch&gt;
  &lt;!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --&gt;
  &lt;include file="$(find gazebo_ros)/launch/empty_world.launch"&gt;
    &lt;arg name="world_name" value="$(find MYROBOT_gazebo)/worlds/MYROBOT.world"/&gt;
    &lt;!-- more default parameters can be changed here --&gt;
  &lt;/include&gt;
&lt;/launch&gt;
</code></pre>

<ul>
<li>同じパッケージの中に、<code>worlds</code>フォルダを作り、その中に、<code>MYROBOT.world</code>ファイルを作る。:</li>
</ul>


<pre><code class="bash">roscd MYROBOT_gazebo
mkdir worlds
gedit MYROBOT.world
</code></pre>

<p>尚、<code>MYROBOT.world</code>は以下の内容にする。</p>

<pre><code class="xml">&lt;?xml version="1.0" ?&gt;
&lt;sdf version="1.4"&gt;
  &lt;world name="default"&gt;
    &lt;include&gt;
      &lt;uri&gt;model://ground_plane&lt;/uri&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://sun&lt;/uri&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://gas_station&lt;/uri&gt;
      &lt;name&gt;gas_station&lt;/name&gt;
      &lt;pose&gt;-2.0 7.0 0 0 0 0&lt;/pose&gt;
    &lt;/include&gt;
  &lt;/world&gt;
&lt;/sdf&gt;
</code></pre>

<ul>
<li>ここまで完了した後、以下のコマンドを使えば、Gazeboの中にカスタムのworld(ガソリンスタンド付き)をlaunchすることができるはずです。:</li>
</ul>


<pre><code class="bash">source ~/catkin_ws/devel/setup.bash
roslaunch MYROBOT_gazebo MYROBOT.launch
</code></pre>

<p>うまく行けば、以下のようになります。(マウスを使ってズームアウトしてください)
<img src="/images/2015-02-15-gazebo-using-roslaunch/gasstation.png" alt="gasstation" /></p>

<h6>うまく行かない場合</h6>

<ul>
<li><p>launchファイルまたは、worldファイルに間違いが無いか確認してください。
よくある間違いは、<code>MYROBOT</code>の部分の間違いです。</p></li>
<li><p>ディレクトリ名が正しいか確認してください
私は、<code>worlds</code>としなければならないところを<code>world</code>にしてしまい、つまづいてましたorz</p></li>
<li><p>gzserverがきちんと終了していることを確認してください
これが最も厄介なものですが、前回のチュートリアルで<code>roslaunch gazebo_ros gazebo</code>や<code>rosrun gazebo_ros gazebo</code>により、Gazeboの起動確認をしていた場合、
<code>Cntrl-C</code>で終了しても、<code>gzserver</code>のプロセスが終了していないことがあります。
この場合は、<code>システムモニタ</code>を開き、起動中のプロセス一覧から<code>gzserver</code>を探し、終了させてください。
ちなみに、<code>gzserver</code>ってなんぞ？という方は、<a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-components/">Gazeboのコンポーネント</a>でその概要を簡単に説明しているので、そちらをご覧ください。</p></li>
<li><p>gzclientは立ち上がるが、真っ暗なままですorz
今回のチュートリアルでは、Gazeboのオンラインデータベースにある<code>gass station</code>モデルを使用しますが、これを一度もgzclientで表示したことがない場合、自動でダウンロードを行うことになります。
ただ、このダウンロードは結構な時間がかかります。結構な時間とは、1分〜3分です。なので、気長に待ってみましょう。
そんなの待ってらんないぜ!という方は、gazeboを普通に立ち上げ、<strong>Insert</strong>タブの一番下にある、オンラインのモデル一覧から<code>gass station</code>を選択して、一度良いので使ってみるか、
<a href="https://bitbucket.org/osrf/gazebo_models/src">ここ</a>から直接<code>gass station</code>を探し、<code>~/.gazebo/model/</code>にダウンロードすると良いです。</p></li>
</ul>


<h2>Gazeboの中でworldファイルを編集する</h2>

<p>あなたのロボットのworldファイルに、モデルを追加することができますし、ウィンドウの左上にある<strong>File</strong>-><strong>Save As</strong>をクリックすることで、編集したworldファイルをROSパッケージに出力することができます。</p>

<h3>URDFのロボットをスポーンさせるのにroslaunchを使う</h3>

<p>roslaunchを使って、URDFベースのロボットをGazeboにスポーンさせる方法は２つあります。</p>

<h4>ROS Servise Call Spawn Method</h4>

<blockquote><p>１つ目の方法では、あなたのロボットのROSパッケージをレポジトリのチェックアウトとコンピュータの間でより運用しやすくするようにします。ROSパッケージパスに関連するあなたのロボットの位置を維持することが許されているだけでなく、小規模の(python)スクリプトを使ってROSサービスコールを作ることが必要です。</p></blockquote>

<h4>Model Database Method</h4>

<blockquote><p>２つ目の方法では、あなたのロボットを<code>.world</code>ファイルの中にインクルードすることが許されています。これは、単純で便利に見えるかもしれませんが、あなたのロボットを環境変数を設定し、Gazeboのモデルデータベースに追加する必要があります。</p></blockquote>

<p>これら２つの方法をやってみます。私達が推奨する方法は、<strong>ROS Service Call Spawn Method</strong>です。</p>

<h4>&ldquo;ROS Service Call&rdquo; Robot Spawn Method</h4>

<p>この方法では、GazeboにカスタムのURDFを追加するために、<code>gazebo_ros</code>のROSノード(rostopicの名前空間では単純に<code>gazebo</code>という名前がついています)にサービスコールリクエストを行うため、<code>spawn_model</code>と呼ばれる小規模のpythonスクリプトを使います。<code>spawn_model</code>スクリプトは<code>gazebo_ros</code>パッケージにあります。以下の方法で、このスクリプトを使用することができます。</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -file `rospack find MYROBOT_description`/urdf/MYROBOT.urdf -urdf -x 0 -y 0 -z 1 -model MYROBOT
</code></pre>

<p>名前空間、<code>trimesh</code>プロパティ、ジョイントポジション、そしてRPY初期値を含む、<code>spawn_model</code>のすべての発展的な引数を見るためには、以下のコマンドを実行してください。:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -h
</code></pre>

<h5>Baxterを使ったURDFの例</h5>

<p>もし、まだ例などで、URDFモデルをテストしたことがないなら、Rethink Roboticsの<a href="https://github.com/RethinkRobotics/baxter_common">baxter_commonレポジトリ</a>から<code>baxter_description</code>パッケージをダウンロードできます。以下のようにして、このパッケージを<code>catkin</code>ワークスペースに設置してください。尚、これまでと同様、<code>catkin</code>ワークスペースの配置は<code>~/catkin_ws</code>となっているとします。</p>

<pre><code class="bash">cd ~/catkin_ws/src
git clone https://github.com/RethinkRobotics/baxter_common.git
</code></pre>

<p>上記コマンドを実行すると、<code>baxter.urdf</code>という名前のURDFファイルが<code>baxter_description/urdf/</code>にできるはずです。できたら以下のコマンドが実行できます。</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter
</code></pre>

<p>下図のように、ガソリンスタンドにbaxterのURDFモデルを出現させるには、先ほどまでに作成した、<code>MYROBOT.launch</code>をlaunchし、上記のコマンドを実行する必要があります。</p>

<pre><code class="bash">roslaunch MYROBOT_gazebo MYROBOT.launch
rosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter
</code></pre>

<p><img src="/images/2015-02-15-gazebo-using-roslaunch/baxter_on_the_gass_station.png" alt="baxter on gass station" /></p>

<p>ROSのlaunchファイルに直接これを統合するには、<code>MYROBOT_gazebo/launch/MYROBOT.launch</code>を再び開き、以下のな教を<code>&lt;/launch&gt;</code>タグの前に追加してください。</p>

<p>&#8220;`</p>

<!-- Spawn a robot into Gazebo -->


<p><node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-file $(find baxter_description)/urdf/baxter.urdf -urdf -z 1 -model baxter" />
&#8220;`</p>

<p>このファイルをlaunchすると、先ほど<code>rosrun</code>を使って実行したものと同じ結果が得られるはずです。</p>

<h5>PR2を使ったXACROの例</h5>

<p>もし、あなたのURDFがXMLフォーマットではないが、<a href="http://ros.org/wiki/xacro">XACROフォーマット</a>であったとしても、launchファイルを変更することで、同じようなものが作れます。以下のパッケージをインストールすることにより、PR2の例を実行することができます。</p>

<p><strong>ROS Groovy:</strong> - Note : このdebianパッケージとして公開されている<a href="https://github.com/PR2/pr2_common/pull/222">pullリクエスト</a>だけでは、GroovyのPRは壊れています</p>

<pre><code class="bash">sudo apt-get install ros-groovy-pr2-common
</code></pre>

<p><strong>ROS Hydro:</strong></p>

<pre><code class="bash">sudo apt-get install ros-hydro-pr2-common
</code></pre>

<p><strong>ROS Indigo:</strong></p>

<pre><code class="bash">sudo apt-get install ros-indigo-pr2-common
</code></pre>

<p>インストールが終わったら、以下の内容を<code>MYROBOT.launch</code>に追加しましょう。:</p>

<pre><code class="xml">  &lt;!-- Convert an xacro and put on parameter server --&gt;
  &lt;param name="robot_description" command="$(find xacro)/xacro.py $(find pr2_description)/robots/pr2.urdf.xacro" /&gt;
  &lt;!-- Spawn a robot into Gazebo --&gt;
  &lt;node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model pr2" /&gt;
</code></pre>

<p>このlaunchファイルをlaunchすると、以下のように、PR2がガソリンスタンドにいるのが確認できると思います。
<strong>Note : この記事を書いている時点では、PR2のURDFの挙動をGazeboのAPIに変更する必要があると言ったようなエラーや渓谷がコンソールの出力に大量に出力されます。(公式サイトより)</strong>
<img src="/images/2015-02-15-gazebo-using-roslaunch/pr2_on_the_gass_station.png" alt="pr2 on the gass station" /></p>

<h4>&ldquo;Model Database&#8221;Robot Spawn Method</h4>

<p>Gazeboにロボットをスポーンさせる２つ目の方法は、あなたのロボットを<code>.world</code>ファイルの中にインクルードすることが許されています。これは、単純で便利に見えるかもしれませんが、あなたのロボットを環境変数を設定し、Gazeboのモデルデータベースに追加する必要があります。この環境変数が必要となるのは、GazeboのROS依存関係による分割が原因です。URDFパッケージパスは直接<code>.world</code>ファイルの中に記述することはできません。というのもGazeboはROSパッケージの構造理念とは異なるからです。
この方法を実行するには、一つのロボットだけで構成される新しいモデルデータベースを作らなければなりません。これはGazeboにあなたのURDFを読み込ませるためには単純な方法であるとは言えません。しかしこれは、あなたのコンピュータにあなたのURDFロボットのコピーを２つ作り、維持する必要が内容にするための方法なのです。もし、以下の説明が難しく、混乱してしまうようなら、<a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-model-structure-and-requirements/">モデルの構成と必要条件</a>のチュートリアルへ戻り、なぜそのようなステップが必要なのかをしっかりと学んでください。
あなたのROSワークスペースのファイル小僧は以下ようになっていると仮定します。唯一違う点は、<code>model.config</code>ファイルが<code>MYROBOT_description</code>パッケージに追加されている点です。:</p>

<pre><code>../catkin_ws/src
    /MYROBOT_description
        package.xml
        CMakeLists.txt
        model.config
        /urdf
            MYROBOT.urdf
        /meshes
            mesh1.dae
            mesh2.dae
            ...
        /materials
        /plugins
        /cad
</code></pre>

<p>このファイル構造は、以下のフォルダ/￥とファイルに従った方法で、Gazeboのモデルデータベースを使うために最適化されています。</p>

<ul>
<li>/home/USER/catkin_workspace/src : これはGazeboのモデルデータベースのロケーションとして扱われます</li>
<li>/MYROBOT_description : このディレクトリはGazeboのモデルフォルダと仕手のみ扱われます</li>
<li>model.config : これは、Gazeboがこのモデルをデータベースで探すために必要とするコンフィギュレーションファイルです</li>
<li>MYROBOT.urdf : これはあなたのロボットの構成ファイルです。また<code>Rviz</code>や<code>MOveIt!</code>..etcでも使用されます。</li>
<li>/meshes : worldファイルとともに、レギュラーのURDFとして、<code>.stl</code>や<code>.dae</code>ファイルを個々に置きます。</li>
</ul>


<h5>model.config</h5>

<p>すべてのモデルには、モデルについてのメタデータを含む、モデルのルートディレクトリに<code>model.config</code>ファイルがあります。まずは、この<code>model.config</code>ファイルをコピーし、ファイルネームとともに<code>model.urdf</code>と置き換えてください。:</p>

<pre><code class="xml">  &lt;?xml version="1.0"?&gt;
  &lt;model&gt;
    &lt;name&gt;MYROBOT&lt;/name&gt;
    &lt;version&gt;1.0&lt;/version&gt;
    &lt;sdf&gt;urdf/MYROBOT.urdf&lt;/sdf&gt;
    &lt;author&gt;
      &lt;name&gt;My name&lt;/name&gt;
      &lt;email&gt;name@email.address&lt;/email&gt;
    &lt;/author&gt;
    &lt;description&gt;
      A description of the model
    &lt;/description&gt;
  &lt;/model&gt;
</code></pre>

<p>SDFファイルとは異なり、URDFでこのファイルを利用する際には、バージョンのタグは必要ありません。より詳しい情報は、Gazeboのモデルデータベースドキュメントをご覧ください。</p>

<h5>環境変数</h5>

<p>最後に、Gazeboにモデルデータベースはどこを探せばよいか知らせる、<code>.bashrc</code>ファイルに環境変数を追加する必要があります。好きなエディタで<code>~/.bashrc</code>を編集してください。<code>GAZEBO_MODEL_PATH</code>が定義されているか確かめてください。もし、すでに定義されていれば、セミコロンを使って新しいexportパスを追加してください。<code>catkin</code>ワークスペースが<code>~/catkin_ws/</code>であるとすると、exportする<code>GAZEBO_MODEL_PATH</code>は以下のようになっているはずです。:</p>

<pre><code class="bash">  export GAZEBO_MODEL_PATH=/home/user/catkin_ws/src/
</code></pre>

<h5>Gazeboで確認する - 手動</h5>

<p>もし、Gazeboのモデルデータベースがlaunchする際にすでに適切に定義されているとして、テストしてみましょう。:</p>

<pre><code class="bash">  gazebo
</code></pre>

<p>起動できたら、画面左にある<strong>Insert</strong>タブをクリックしてください。すると、あなたのシステムで利用可能なオンラインデータベースを含む、異なるモデルのデータベースを代表するドロップダウンリストを確認できるでしょう。あなたのロボットと一致するデータベースを探し、ロボットの名前の上で右クリックし、サブメニューを開いたら、ロボットを設置するためにGazeboの中のロケーションを選んでください。</p>

<h5>Gazeboで確認する - モデルデータベースとroslaunch</h5>

<p>モデルデータベースの発展的なメソッドでは、ROSパッケージパスを使うことなく、ロボットを直接worldファイルに加えることができます。worldファイルをつくるというというセクションで作ったものと同じセットアップを使いまが、以下のようにworldファイルを変更します。</p>

<ul>
<li>以前のように、<code>MYROBOT_description/launch</code>フォルダの時とと同じように、<code>MYROBOT.world</code>ファイルを以下の内容にしてください。</li>
</ul>


<pre><code class="xml">&lt;?xml version="1.0" ?&gt;
&lt;sdf version="1.4"&gt;
  &lt;world name="default"&gt;
    &lt;include&gt;
      &lt;uri&gt;model://ground_plane&lt;/uri&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://sun&lt;/uri&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://gas_station&lt;/uri&gt;
      &lt;name&gt;gas_station&lt;/name&gt;
      &lt;pose&gt;-2.0 7.0 0 0 0 0&lt;/pose&gt;
    &lt;/include&gt;
    &lt;include&gt;
      &lt;uri&gt;model://MYROBOT&lt;/uri&gt;
    &lt;/include&gt;
  &lt;/world&gt;
&lt;/sdf&gt;
</code></pre>

<ul>
<li>以下のコマンドで、カスタムのworldをガソリンスタンドとロボットとともにGazeboでlaunchできるようになっているはずです。:</li>
</ul>


<pre><code class="bash">  roslaunch MYROBOT_gazebo MYROBOT.launch
</code></pre>

<p>この方法の欠点は、あなたの<code>MYROBOT_description</code>パッケージと<code>MYROBOT_gazebo</code>パッケージが簡単運用できないということです。</p>

<ul>
<li>これらのROSパッケージを利用する前に、最初に新規のシステムには、<code>GAZEBO_MODEL_PATH</code>を設定しなければならないのです。</li>
</ul>


<h4>次のステップ</h4>

<p>ここまでで、Gazeboやworldファイル、そしてURDFモデルを起動するroslaunchの作り方を学びました。チュートリアルを通して、<a href="">GazeboでURDFを使う</a>ことで、あなた独自のGazebo-ready URDFモデルを作成する準備が出来ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GazeboをROSに繋ぐ (Gazebo_ros_pkgsをインストールする 編) No.6.3]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/14/gazebo-installing-gazebo-ros-pkgs/"/>
    <updated>2015-02-14T21:33:12+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/14/gazebo-installing-gazebo-ros-pkgs</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/14/2015 (Sat)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。<br/>
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。<br/>
今回はその「Installing gazebo_ros_pkgs」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>はじめに</h2>

<p>GazeboのインターフェースのためのROSパッケージのセットは、<code>gazebo_ros_pkgs</code>という名前の新しいメタパッケージで構成されています。続きを読む前に、前提情報として、<a href="http://cir-kit.github.io/blog/2015/02/14/gazebo-ros-overview/">ROSの統合についての概要</a>をご覧ください。<br/>
これらの説明は、<a href="http://www.ros.org/wiki/hydro">ROS Hydro</a>と<a href="http://www.ros.org/wiki/indigo">Ros Indigo</a>と完全に統合されたGazeboのバージョンを使用するためのものです。チュートリアルを始める前に、<a href="http://cir-kit.github.io/blog/2015/02/14/gazebo-which-combination-of-ros-and-gazebo-versions-to-use/">どのGazebo/ROSのバージョンの組み合わせを使うか</a>をまず読むことをおすすめします。必要に応じて、それに応えるインストール方法が必要となります。</p>

<h2>必須条件</h2>

<p>ROSのコンセプトについて<a href="http://www.ros.org/wiki/ROS/Tutorials">ROSチュートリアル</a>を通じて理解しておく必要があります。</p>

<h3>ROSをインストールする</h3>

<p>ROSの統合チュートリアルのために、(<code>ros-hydro-desktop-full</code>もしくは<code>ros-indigo-desktop-full</code>)インストールをおすすめします。それにより、必要なパッケージを手に入れることができます。<br/>
詳しくは、<a href="http://www.ros.org/wiki/ROS/Installation">ROSのインストール</a>ページをご覧ください。もちろん、ROSのインストールページの説明に従い、ROSの<code>setup.sh</code>を<code>source</code>コマンドで実行しておいてください。</p>

<h3>Gazeboをインストールする</h3>

<p>ソースコードまたは、プレビルドされたUbuntuのdebianパッケージのどちらを使っても、Gazeboをインストールできます。<br/>
<a href="http://cir-kit.github.io/blog/2015/01/31/gazebo-install/">Gazeboのインストール</a>をご覧ください。ソースコードからインストールする場合には、<code>gazebo_X.Y</code>ブランチ(X.Yはあなたの必要とするバージョンを指します)をすることを忘れないでください。</p>

<h4>スタンドアローンなGazeboの動作チェックをする</h4>

<p><code>gazebo_ros_pkgs</code>のインストールを行う前に、以下のコマンドをターミナルで入力して、スタンドアローンなGazeboの動作チェックを行うことを忘れないでください。:</p>

<pre><code class="bash">  gazebo
</code></pre>

<p>空のシミュレーションと、GUIが開くのが確認できるでしょう。また、画面左側の<strong>Insert</strong>タブをクリックし、モデルを選んで(クリックすると、モデルをシミュレーションのどこに置くか決定できます)、シミュレーションに足してください。</p>

<h4>Gazeboのバージョンが正しいことを確認する</h4>

<p>Gazeboがどこにインストールされているか探し、それが正しい位置にあるか確かめるために、以下のコマンドを実行してください。:</p>

<pre><code class="bash">  which gzserver
  which gzclient
</code></pre>

<p>もし、デフォルトの位置で、ソースコードからインストールしたのなら、結果は以下のようになるはずです。:</p>

<pre><code class="bash">  /usr/local/bin/gzserver
  /usr/local/bin/gzclient
</code></pre>

<p>もし、debianパッケージを使用してインストールしたなら、結果は以下のようになるはずです。:</p>

<pre><code class="bash">  /usr/bin/gzserver
  /usr/bin/gzclient
</code></pre>

<h2>gazebo_ros_pkgsのインストール</h2>

<p>好きな方法を選んでください。早くて簡単な方法はパッケージからインストールすることです。しかし、ソースコードからインストールすることで、デバックとバグパッチの適用をより簡単にできます。(oω&lt;)</p>

<h3>A. プレビルドDebianパッケージをインストールする</h3>

<p><code>gazebo_ros_pkgs</code>パッケージは以下のそれぞれのバージョンで利用可能です。:</p>

<ul>
<li><a href="http://ros.org/wiki/hydro">ROS Hydro</a>:</li>
</ul>


<pre><code class="bash">sudo apt-get install ros-hydro-gazebo-ros-pkgs ros-hydro-gazebo-ros-control
</code></pre>

<ul>
<li><a href="http://ros.org/wiki/indigo">ROS Indigo</a>:</li>
</ul>


<pre><code class="bash">sudo apt-get install ros-indigo-gazebo-ros-pkgs ros-indigo-gazebo-ros-control
</code></pre>

<p>もしこのインストール方法がうまく行ったら、このページの下の<strong>ROSの統合環境を使ってGazeboをテストする</strong>に進んでください。</p>

<h3>B. ソースコードからインストールする(Ubuntu)</h3>

<p>もしあなたが、ROSの最新バージョン(Groovy以上)を使用しているなら、ソースコードから<code>gazebo_ros_pkgs</code>をインストールする必要があります。ソースコードからインストールすることは、新しいプラグインを開発したり、パッチを適用したりするときに便利です。</p>

<h4>Catkinワークスペースをセットアップする</h4>

<p>これらのイントロダクションでは<a href="http://www.ros.org/wiki/catkin">catkinビルドシステム</a>を使うことが必要です。<br/>
もし、まだcatkinワークスペースのセットアップをしていないなら、以下のコマンドを試してみてください。</p>

<pre><code class="bash">mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/src
catkin_init_workspace
cd ~/catkin_ws
catkin_make
</code></pre>

<p>次に、あなたの<code>.bash</code>ファイルにセットアップスクリプトを追加してください。:</p>

<pre><code class="bash">echo "source ~/catkin_ws/devel/setup.bash" &gt;&gt; ~/.bashrc
</code></pre>

<p>もっと詳しい情報は、<a href="http://www.ros.org/wiki/catkin/Tutorials/create_a_workspace">Catkinワークスペースを作る</a>というチュートリアルをご覧ください。</p>

<h4>GitHubレポジトリをCloneする</h4>

<p><code>git</code>があなたのUbuntuマシンにインストールされていることを確認してください。:</p>

<pre><code class="bash">sudo apt-get install git
</code></pre>

<h5>ROS Indigo</h5>

<p>Indigoはgazebo2.xシリーズを使用しておりイます。以下のインストールから始めましょう。:</p>

<pre><code class="bash">sudo apt-get install -y gazebo2
</code></pre>

<p><a href="https://github.com/ros-simulation/gazebo_ros_pkgs"><code>gazebo_ros_pkgs</code>のGitHubレポジトリ</a>からソースコードをダウンロードしましょう。</p>

<pre><code class="bash">cd ~/catkin_ws/src
git clone https://github.com/ros-simulation/gazebo_ros_pkgs.git -b indigo-devel
</code></pre>

<p><code>rosdep</code>コマンドを使って、足りない依存条件を確認しましょう。</p>

<pre><code class="bash">rosdep update
rosdep check --from-paths . --ignore-src --rosdistro indigo
</code></pre>

<p><code>rosdep</code>のdebianインストールを使って、自動的に、不足している依存条件をインストールすることができます。:</p>

<pre><code class="bash">rosdep install --from-paths . --ignore-src --rosdistro indigo -y
</code></pre>

<p>完了したら、<strong>gazebo_ros_pkgsをビルドする</strong>というセクションに移動しましょう。</p>

<h5>ROS Hydro</h5>

<p>Hydroはgazebo1.xシリーズを使用しておりイます。以下のインストールから始めましょう。:</p>

<pre><code class="bash">sudo apt-get install -y gazebo
</code></pre>

<p><a href="https://github.com/ros-simulation/gazebo_ros_pkgs"><code>gazebo_ros_pkgs</code>のGitHubレポジトリ</a>からソースコードをダウンロードしましょう。</p>

<pre><code class="bash">cd ~/catkin_ws/src
git clone https://github.com/ros-simulation/gazebo_ros_pkgs.git -b hydro-devel
</code></pre>

<p><code>rosdep</code>コマンドを使って、足りない依存条件を確認しましょう。</p>

<pre><code class="bash">rosdep update
rosdep check --from-paths . --ignore-src --rosdistro hydro
</code></pre>

<p><code>rosdep</code>のdebianインストールを使って、自動的に、不足している依存条件をインストールすることができます。:</p>

<pre><code class="bash">rosdep install --from-paths . --ignore-src --rosdistro hydro -y
</code></pre>

<p>完了したら、<strong>gazebo_ros_pkgsをビルドする</strong>というセクションに移動しましょう。</p>

<h2>ROSの統合環境を使ってGazeboをテストする</h2>

<p>ROSのセットアップファイルを<code>source</code>コマンドで有効にすることを忘れないでください。Hydroの場合は、以下のコマンドでそれを有効にできます。:</p>

<pre><code class="bash">source /opt/ros/hydro/setup.bash
</code></pre>

<p><code>~/.bashrc</code>に以上のようなコマンドは追加しているでしょう。<br/>
GazeboとROSの環境については、おそらく、セットアップし、ビルドしていることと仮定すると、<code>roscore</code>を起動した後に、<code>rosrun</code>コマンドだけでGazeboを起草できるはずです。:<br/>
もしまだ、<code>.bashrc</code>に以下のコマンドを追加していないなら、catkinの<code>setup.bash</code>を<code>source</code>コマンドで実行してください。</p>

<pre><code class="bash">source ~/catkin_ws/devel/setup.bash
</code></pre>

<p>その後、以下のコマンドを実行してください。</p>

<pre><code class="bash">roscore &amp;
rosrun gazebo_ros gazebo
</code></pre>

<p>すると、ウィンドウの中に何も無いようなGazeboのGUIが立ち上がるでしょう。<br/>
ROSの接続が本当に完了しているか確かめるために、利用可能なROSのトピックを見てみましょう。:</p>

<pre><code class="bash">rostopic list
</code></pre>

<p>すると、トピックの一覧の中に、以下のようなトピックが確認できるはずです。:</p>

<pre><code>/gazebo/link_states
/gazebo/model_states
/gazebo/parameter_descriptions
/gazebo/parameter_updates
/gazebo/set_link_state
/gazebo/set_model_state
</code></pre>

<p>Gazeboのサービスの存在も確認することができます。:</p>

<pre><code class="bash">rosservice list
</code></pre>

<p>すると、サービスの一覧の中に、以下のようなサービスが確認できるはずです。:</p>

<pre><code class="bash">/gazebo/apply_body_wrench
/gazebo/apply_joint_effort
/gazebo/clear_body_wrenches
/gazebo/clear_joint_forces
/gazebo/delete_model
/gazebo/get_joint_properties
/gazebo/get_link_properties
/gazebo/get_link_state
/gazebo/get_loggers
/gazebo/get_model_properties
/gazebo/get_model_state
/gazebo/get_physics_properties
/gazebo/get_world_properties
/gazebo/pause_physics
/gazebo/reset_simulation
/gazebo/reset_world
/gazebo/set_joint_properties
/gazebo/set_link_properties
/gazebo/set_link_state
/gazebo/set_logger_level
/gazebo/set_model_configuration
/gazebo/set_model_state
/gazebo/set_parameters
/gazebo/set_physics_properties
/gazebo/spawn_gazebo_model
/gazebo/spawn_sdf_model
/gazebo/spawn_urdf_model
/gazebo/unpause_physics
/rosout/get_loggers
/rosout/set_logger_level
</code></pre>

<h2>Gazeboを起動するためのROSの他の方法</h2>

<p>Gazeboを起動するROSのコマンドはたくさんあります。:</p>

<ul>
<li>サーバーとクライアントを同時にlaunchする</li>
</ul>


<pre><code class="bash">    rosrun gazebo_ros gazebo
</code></pre>

<ul>
<li>Gazeboサーバーだけをlaunchする</li>
</ul>


<pre><code class="bash">    rosrun gazebo_ros gzserver
</code></pre>

<ul>
<li>Gazeboのクライアントだけをlaunchする</li>
</ul>


<pre><code class="bash">    rosrun gazebo_ros gzclient
</code></pre>

<ul>
<li>GDBを使った、Gazeboサーバーだけをデバッグモードでlaunchする</li>
</ul>


<pre><code class="bash">    rosrun gazebo_ros debug
</code></pre>

<ul>
<li>さらに、roslaunchを使ってGazeboを起動することもできます</li>
</ul>


<pre><code class="bash">    roslaunch gazebo_ros empty_world.launch
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GazeboをROSに繋ぐ (どのGazebo/ROSのバージョンの組み合わせを使うか 編) No.6.2]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/14/gazebo-which-combination-of-ros-and-gazebo-versions-to-use/"/>
    <updated>2015-02-14T15:29:45+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/14/gazebo-which-combination-of-ros-and-gazebo-versions-to-use</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/14/2015 (Sat)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。<br/>
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。<br/>
今回はその「Which combination of ROS/Gazebo Versions to use」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>はじめに</h2>

<p>このドキュメントでは、ROSとGazeboをそれぞれ異なるバージョンの組み合わせで使うためのオプションについて説明します。Gazebo ROSラッパーをインストールする前に、読んでおくことをおすすめします。</p>

<h2>簡単な判断のための短いバージョン</h2>

<p>もし、ROSの特定のバージョンを使用しており、Gazeboの特定のバージョンを使用する理由がないなら、<a href="http://cir-kit.github.io/blog/2015/02/14/gazebo-installing-gazebo-ros-pkgs/">gazebo_ros_pkgsをインストールする</a>というチュートリアルへ進むこともできます。</p>

<h2>GazeboのバージョンとROSの統合</h2>

<p>ROS Hydroまでは、GazeboはROSパッケージの代替とみなされていました。これは、Gazeboのメジャーバージョンの一つ（例えば、ROS Indigo用のgazebo2）はROSリリースサイクルの始まりであり、すべてのROSディストリビューションの間で保たれていたということを意味します。Gazeboの開発はROSから独立しています。なので、Gazeboの新しい各バージョンはROSディストリビューションで使用される前にリリースする必要があります。<br/>
Gazebo ABIの安定化ポリシーは、同じメジャーナンバーを持つすべてのバージョン(<code>gazebo_2.0.0</code>,<code>gazebo_2.1.0</code>,<code>gazebo_2.0.1</code>,&hellip;etc)はバイナリー互換であり、それ故に同じROSディストリビューションを使用するなら、相互に使用することができるといったような、<a href="http://semver.org/">sematic versioning pholosophy</a>に準拠しているということを覚えておいてください。</p>

<h3>Gazeboをインストールする</h3>

<h4>GazeboのUbuntuパッケージ</h4>

<p>Gazeboをインストールする簡単な方法は、パッケージを使うことです。Gazeboパッケージがホストしているレポジトリは主に2つあります。:一つは<code>package.ros.org</code>で、もうひとつは、<code>osrfoundation.packages.org</code>です。この投稿を行った時点では、ホストの状況は以下のようになっています。</p>

<blockquote><ul>
<li>packages.ros.org

<ul>
<li>Hydro: hosts gazebo version 1.x package.</li>
<li>Indigo: host gazebo version 2.x package.</li>
</ul>
</li>
<li>packages.osrfoundation.org

<ul>
<li>gazebo 1.x series (package name gazebo)</li>
<li>gazebo 2.x series (package name gazebo-current or gazebo2 in saucy/trusty)</li>
<li>gazebo 3.x series (package name gazebo3)</li>
<li>gazebo 4.x series (package name gazebo4)</li>
</ul>
</li>
</ul>
</blockquote>

<p>このことは、<code>osrfoundation</code>レポジトリは必ずしもUbuntuのGazeboパッケージから取得する必要がないということを意味します。ROSのレポジトリからインストールすることができます。</p>

<h4>Gazeboをソースからビルドする</h4>

<p>ソースコードからGazeboのバージョンをコンパイルしたのなら、あなたのGazeboで使用しているレポジトリのブランチにおける依存関係(gazebo_3.0, gazebo_4.0,&hellip;etc)は、メジャー場＾ジョンがローカルブランチのレポジトリとROSのディストリビューションで使用しているGazeboのバージョンが一致するときにかぎり、<code>gazebo_ros_pkgs</code>(それとGazeboでコンパイル済みのすべてのROSパッケージも)と共にバイナリコンパイルされます。例えば、もしあなたが、<code>gazebo_2.0</code>のGazeboブランチよりコンパイルをしているのなら、Indigo(Indigoはgazebo2シリーズを使用している)にある<code>gazebo_ros_pkgs</code>を使用することができます。<br/>
もしあなたが、デフォルトのブランチを使用しているなら、大抵のリリースされたパッケージと共にバイナリコンパイルを行うことはできません。なので、<code>gazebo_ros_pkgs</code>を有効にするために、<code>catkin</code>ワークスペースが必要となります。</p>

<h3>ROSディストリビューションのためにGazeboのデフォルトバージョンを使う</h3>

<p>特定のROSディストリビューションを使用する必要があり、out-of-the-boxのパッケージに関連するGazeboやROSを使用したい人にとって、このセクションは重要です。</p>

<h4>Indigo</h4>

<p>ROS IndigoはGazeboの2.xのバージョンをホストしています。完全に統合されたROSのシステムのためには、Gazeboの2.xバージョンを使用することをおすすめします。適用方法は、ROSレポジトリを使用するということだけで、(自動でgazebo2がインストールされます)<code>osrfoundation</code>レポジトリは必要ありません。</p>

<h4>Hydro</h4>

<p>ROS HydroはGazeboの1.9.xのバージョンをホストしています。完全に統合されたROSシステムのためには、Gazeboの1.9.xバージョンを使用することをおすすめします。適用する方法は、ROSレポジトリを使用するということだけで、(自動でgazeboがインストールされます)<code>osrfoundation</code>レポジトリは必要ありません。</p>

<h3>特定のバージョンのGazeboをROSと使用する</h3>

<p><strong>!警告! : このオプションを使うと、ROSのdebレポジトリによるGazeboに関連したいかなるROS Ubuntuパッケージも使用できなくなるかもしれません。<code>gazebo_ros_pkgs</code>と同等のものは、debianパッケージによりインストールすることは可能ですが、その他のすべてのソフトウェア（<code>turtlebot_gazebo</code>など）はソースコードからビルドしなければなりませんが、<code>catkin</code>ワークスペースのおかげで、これを行うのはとても簡単です。</strong><br/>
本当に必要であれば、特定のバージョンのGazeboとROSを使用する方法はたくさんあります:</p>

<h4>Gazebo 4.x シリーズ</h4>

<p>OSRFレポジトリは、gazebo4パッケージの最新をビルドする、<code>-gazebo4-</code>バージョンのROS/IndigoとROS/HydroのGazeboラッパーを提供しています。(`gazebo4_ros_pkgs)これらを使用する手順は以下のとおりです。</p>

<ul>
<li><code>osrfoundation</code>レポジトリをソースリストに追加する</li>
<li><code>gazebo4</code>パッケージをインストールするのに使う、<code>ros-distro-gazebo4-ros-pkgs</code>を<code>osrfoundation</code>レポジトリより追加する。</li>
<li>ソースコードから、残りのソフトウェアをコンパイルするために、<code>catkin</code>ワークスペースを使う</li>
</ul>


<h4>Gazebo 3.x シリーズ</h4>

<p>OSRFレポジトリは、gazebo3パッケージの最新をビルドする、<code>-gazebo3-</code>バージョンのROS/HydroとROS/GroovyのGazeboラッパーを提供しています。(<code>gazebo3_ros_pkgs</code>)これらを使用する手順は以下のとおりです。</p>

<ul>
<li><code>osrfoundation</code>レポジトリをソースリストに追加する</li>
<li><code>gazebo3</code>パッケージをインストールするのに使う、<code>ros-distro-gazebo3-ros-pkgs</code>を<code>osrfoundation</code>レポジトリより追加する。</li>
<li>ソースコードから、残りのソフトウェアをコンパイルするために、<code>catkin</code>ワークスペースを使う</li>
</ul>


<h4>Gazebo 2.x シリーズ</h4>

<p>OSRFレポジトリは、gazebo-currentパッケージの最新をビルドする、<code>-current-</code>バージョンのROS/HydroとROS/GroovyのGazeboラッパーを提供しています。(<code>gazebo_ros_pkgs-current</code>)これらを使用する手順は以下のとおりです。</p>

<ul>
<li><code>osrfoundation</code>レポジトリをソースリストに追加する</li>
<li><code>gazebo-current</code>パッケージをインストールするのに使う、<code>ros-distro-gazebo-ros-pkgs-current</code>を<code>osrfoundation</code>レポジトリより追加する。</li>
<li>ソースコードから、残りのソフトウェアをコンパイルするために、<code>catkin</code>ワークスペースを使う</li>
</ul>


<h2>FAQ</h2>

<h4>私はDARPAのロボティクスチャレンジ参加者です。どのバージョンを使うのが良いですか?</h4>

<p><code>drcsim-3.2</code>は<code>gazebo3</code>でビルドされています。<code>drcsim-4.0</code>からスタートすると、<code>gazebo4</code>を使うことになります。</p>

<h4>私はまだROSを使ったことがありません。どのバージョンを使うのが良いですか?</h4>

<p>ROSのサポートが必要ないなら、<a href="http://gazebosim.org/tutorials/?cat=installation"><code>osrfoundation</code>のレポジトリを利用してインストール</a>できる、最新リリースのバージョンをおすすめします。</p>

<h4><code>bullet/simbody/dart</code>物理エンジンを使いたいのですが、どのバージョンが良いですか?</h4>

<p><code>gazebo4</code>から始めるなら、<code>bullet</code>と<code>simbody</code>がUbuntuパッケージでサポートされています。なので、ROSと一緒に、<code>gazebo4</code>を使用するには、上記の説明に従ってください。<code>Dart</code>はソースコードからのインストールも必要とします（<code>gazebo3</code>からはじめるなら）。なので、<code>gazebo3</code>かそれ以外のバージョンを使用することができます。ROSと共に使用するために、このページの上部の説明に従ってください。</p>

<h4>ROS-JではどのバージョンのGazeboが動きますか?</h4>

<p>まだ決まってません。しかし、<a href="http://gazebosim.org/#status">予定では</a>おそらく<code>gazebo5</code>でしょう。</p>

<h4>gazebo4とROS Indigoを使う必要があります。どうしたらよいですか?</h4>

<p><strong>!警告! : このオプションを使うと、ROSのdebレポジトリから供給されるGazebo関連のROS Indigoパッケージが使えなくなるかもしれません。ソースコードからビルドする必要がありますが、<code>catkin</code>ワークスペースのおかげで、これを行うのはとても簡単です。</strong><br/>
Gazebo4.xのバージョンにだけある機能を使用する必要があるなら、<code>gazebo4</code>とROS Indigoをインストールするという方法があります。<strong>このページ内</strong>にある<code>gazebo4</code>パッケージを使ったROSの使い方についての説明に従ってください。</p>

<h4>gazebo3とROS Indigoを使う必要があります。どうしたらよいですか?</h4>

<p><strong>!警告! : このオプションを使うと、ROSのdebレポジトリから供給されるGazebo関連のROS Indigoパッケージが使えなくなるかもしれません。ソースコードからビルドする必要がありますが、<code>catkin</code>ワークスペースのおかげで、これを行うのはとても簡単です。</strong><br/>
Gazebo3.xのバージョンにだけある機能を使用する必要があるなら、<code>gazebo3</code>とROS Indigoをインストールするという方法があります。<strong>このページ内</strong>にある<code>gazebo3</code>パッケージを使ったROSの使い方についての説明に従ってください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GazeboをROSに繋ぐ (ROSの概要 編) No.6.1]]></title>
    <link href="http://cir-kit.github.io/blog/2015/02/14/gazebo-ros-overview/"/>
    <updated>2015-02-14T11:25:06+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/02/14/gazebo-ros-overview</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>02/14/2015 (Sat)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。<br/>
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。<br/>
今回はその「ROS Overview」編です。<br/>
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : ROSの統合概要</h2>

<p>Gazebo1.9と<a href="http://www.ros.org/wiki/hydro/">ROS Hydro</a>では、GazeboはROSの直接的な依存関係はなく、Ubuntuのスタンドアローンなパッケージとしてインストールされていました。歴史的に、GazeboをROSと共に使うには、Legacyの<code>simulator_gazebo</code>スタックと共にビルドされた、特別なバージョンのGazeboが必要でした。<br/>
ROSとスタンドアローンなGazeboを統合するときに、スタンドアローンなGazeboに関するラッパーである、新しい<code>gazebo_ros_pkds</code>という名前のROSパッケージが作られました。このパッケージでは、ROSのメッセージやサービス、そして動的参照を使ってGazeboの中でロボットをシミュレートするために、必要なインターフェースを供給しています。<code>simulatiorgazebo</code>と<code>gazeboros_pkgs</code>の間の主な違いは現在以下のようになっている。:</p>

<blockquote><ul>
<li>それ単体ではROSとの接続機能を持たないGazeboの最新スタンドアローンな依存関係をサポートしている</li>
<li><a href="http://www.ros.org/wiki/catkin">catkin</a>でビルドできる</li>
<li>可能な限り、URDFと<a href="http://gazebosim.org/sdf.html">SDF</a>を同じものとみなす</li>
<li>Gazeboでのソースコードの重複を減らす</li>
<li><code>ros_control</code>を使ったコントロールのためのボックス以外のサポートの改善</li>
<li>DARPAロボティクスチャレンジによるリアルタイムコントローラ統合の効率的な改善</li>
<li>現在のROSとGazeboから古いコードを削除する</li>
</ul>
</blockquote>

<p>新しいインターフェースの概要は下図のようになっているそうです。尚、下図は公式サイトのものです。:
<img src="/images/2015-02-14-gazebo-ros-overview/775px-Gazebo_ros_api.png" alt="775px-Gazebo_ros_api" /></p>

<h3><code>simulator_gazebo</code>からアップグレードする</h3>

<p>以下のガイドラインは、あなたのGazeboの依存パッケージを、ROSパッケージの中で使用するために、<code>simulator_gazebo</code>からアップグレードするのに役立つでしょう。:</p>

<h4>Catkin</h4>

<p>Gazeboと古い<code>simulatorgazebo</code>スタックによるインターフェースのための現在のパッケージは<a href="http://www.ros.org/wiki/rosbuild">rosbuild</a>のビルドシステムで使われているものに似ています。ROS Hydroの中の<code>gazeboros_pkgs</code>とともに移行するためには、まず最初にパッケージを<strong>&ldquo;catkinize&rdquo;</strong>する必要があります。<a href="http://www.ros.org/wiki/catkin/Tutorials">Catkin Tutorials</a>をご覧ください。</p>

<h4>Launch Files</h4>

<p>Gazeboを起動するためには、以前作成した<code>roslaunch</code>ファイルにいくつかの変更を行う必要があります。それらのパッケージをアップデートする最も良い方法は、Gazeboのチュートリアルにある<a href="http://gazebosim.org/tutorials?tut=ros_roslaunch&amp;cat=connect_ros">Gazeboでroslaunchファイルを使ってモデルをスポーンさせる</a>を読むことです。nutshellでは:</p>

<blockquote><ul>
<li><code>roslaunch</code>ファイルの中では、<code>pkg="gazebo"</code>は<code>pkg="gazebo_ros"</code>とリネームする必要があります。</li>
<li><code>gazebo_worlds</code>パッケージは消去されました。ほとんどの<code>world</code>ファイルはめったに使われず、SDFやXMLフォーマットの中の変更と共に定義されることもありません。つまり、<code>empty.world</code>を含むすべての<code>world</code>ファイルはGazeboのプロジェクト自身の中で、センタライズ（初期化）されます。</li>
<li>Gazeboの<code>launch</code>ファイルを使う最も良い方法は、<code>gazebo_ros</code>パッケージにある、<code>empty world</code>の<code>launch</code>ファイルをただ単にinherentもしくはincludeすることです。</li>
</ul>
</blockquote>

<h4>CMakeLists.txt</h4>

<p>GazeboはもはやROSパッケージではないが、システム依存はあるので、<code>Cmake</code>ファイルを再構成する必要があります。以下に示すのは、<code>CMakeLists.txt</code>の一例です。:</p>

<pre><code class="cmake">cmake_minimum_required(VERSION 2.8.3)
project(YOURROBOT_gazebo_plugins)

find_package(catkin REQUIRED COMPONENTS
  gazebo_ros
)

# Depend on system install of Gazebo
find_package(gazebo REQUIRED)

include_directories(include ${catkin_INCLUDE_DIRS} ${GAZEBO_INCLUDE_DIRS} ${SDFormat_INCLUDE_DIRS})

# Build whatever you need here
add_library(...) # TODO

catkin_package(
    DEPENDS
      gazebo_ros
    CATKIN_DEPENDS
    INCLUDE_DIRS
    LIBRARIES
)
</code></pre>

<h4>package.xml</h4>

<p>これは<code>rosbuild</code>における<code>manifest.xml</code>を置き換えたものです : 新規の<code>gazebo_ros</code>パッケージに依存関係を追加します。</p>

<h3>Gazeboを起動する</h3>

<p>Gazeboを<code>launch</code>するためのROSノードの名前はGazeboで実行可能な名前に少しだけ変更されます :</p>

<blockquote><ul>
<li>rosrun gazebo_ros Gazebo
GazeboサーバーとGUIを両方起動します。</li>
<li>rosrun gazebo_ros gui
<code>rosrun gazebo_ros gzclient</code>に置き換えられています</li>
<li>rosrun gazebo_ros gzserver
以下のノードを起動することができるようになります

<blockquote><pre><code class="bash">rosrun gazebo_ros gazebo
rosrun gazebo_ros gzserver
rosrun gazebo_ros gzclient
rosrun gazebo_ros spawn_model
rosrun gazebo_ros perf
rosrun gazebo_ros debug
</code></pre>

<p>これらのノードについては、<a href="">Gazeboでroslaunchファイルを使ってモデルをスポーンさせる</a>というチュートリアルに詳しく述べてあります。</p></blockquote></li>
</ul>
</blockquote>

<h3>More</h3>

<p>ここにissueをアップグレードしてください。</p>

<h2>チュートリアル</h2>

<p>Gazeboの履歴に起因する多くの変更を反映するために、<code>ros.org</code>のチュートリアルは完全に消去され、このウェブサイトの<code>scratch</code>に再投稿されています。Gazeboの中で、URDFベースのロボットをスムーズに動かすためのやり方について、私達は、徹底的なドキュメントを作ることにより、最善を尽くしています。もし、疑問があるなら、<a href="http://answers.ros.org/">answers.ros.org</a>をご覧ください。<br/>
<a href="http://cir-kit.github.io/blog/2015/02/14/gazebo-installing-gazebo-ros-pkgs/">gazebo_rosパッケージをインストールする</a>に続きます。</p>
]]></content>
  </entry>
  
</feed>
