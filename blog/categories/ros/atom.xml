<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ros | 九州工業大学 CIR-KIT Blog]]></title>
  <link href="http://cir-kit.github.io/blog/categories/ros/atom.xml" rel="self"/>
  <link href="http://cir-kit.github.io/"/>
  <updated>2015-03-13T19:06:11+09:00</updated>
  <id>http://cir-kit.github.io/</id>
  <author>
    <name><![CDATA[CIR-KIT Members]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ジョイスティックで亀を泳がせる(準備編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/13/turtlesim-with-joystick/"/>
    <updated>2015-03-13T13:02:00+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/13/turtlesim-with-joystick</id>
    <content type="html"><![CDATA[<h1>ジョイスティックで亀を泳がせる</h1>

<h2>概要</h2>

<p>ROSのチュートリアルで使用したturtlesimの亀をジョイスティックで動かします。<a href="http://wiki.ros.org/joy/Tutorials">joy_tutorial</a>で行っていることをやりますので、原文はそちらへどうぞ。</p>

<h2>検証情報</h2>

<h3>日時</h3>

<p>03/13/2015 (Fri)</p>

<h3>スペック</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">スペック</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">PC</td>
<td style="text-align:center;">CLEVO M76T</td>
</tr>
<tr>
<td style="text-align:center;">Prosessor</td>
<td style="text-align:center;">CeleronDualCore T3000 1.80GHz×2</td>
</tr>
<tr>
<td style="text-align:center;">RAM</td>
<td style="text-align:center;">4GB</td>
</tr>
<tr>
<td style="text-align:center;">OS</td>
<td style="text-align:center;">Ubuntu 14.04.2 LTS 64bit</td>
</tr>
<tr>
<td style="text-align:center;">ROS</td>
<td style="text-align:center;">indigo 1.11.10</td>
</tr>
<tr>
<td style="text-align:center;">joystick_drivers</td>
<td style="text-align:center;">1.10.0</td>
</tr>
</tbody>
</table>


<!--more-->


<h2>使用したもの</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"></th>
<th style="text-align:left;">参考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">ROS</td>
<td style="text-align:left;"><a href="/blog/2015/02/25/we-have-get-to-work-when-install-ubuntu">CIR-KITメンバーが必ずすべきこと</a></td>
</tr>
<tr>
<td style="text-align:left;">DualShock3</td>
<td style="text-align:left;"><a href="http://www.jp.playstation.com/ps3/peripheral/cechzc2j.html">PlayStation.com</a></td>
</tr>
<tr>
<td style="text-align:left;">joystick_driver</td>
<td style="text-align:left;"><a href="http://wiki.ros.org/joy">ROS.org</a></td>
</tr>
<tr>
<td style="text-align:left;">PC</td>
<td style="text-align:left;"><a href="http://shopap.lenovo.com/jp/notebooks/thinkpad/x-series/x250/?cid=jp:sem:q2xyf9&amp;#tab-customize">ご自由に</a></td>
</tr>
<tr>
<td style="text-align:left;">USBケーブル</td>
<td style="text-align:left;"><a href="http://www.amazon.co.jp/%E3%82%BD%E3%83%8B%E3%83%BC%E3%83%BB%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%86%E3%82%A4%E3%83%B3%E3%83%A1%E3%83%B3%E3%83%88-USB-%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB-2-8m/dp/B00462Q5ZW/ref=sr_1_1?ie=UTF8&amp;qid=1426232234&amp;sr=8-1&amp;keywords=usb%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB+Dualshock">適宜用意</a></td>
</tr>
</tbody>
</table>


<h2>準備</h2>

<p><a href="http://wiki.ros.org/ja">ROS</a>及び<a href="http://wiki.ros.org/joy">joystick_drivers</a>はインストールしておいて下さい。</p>

<p>まずは、joystiの依存関係（要は必要なもの）をインストールして、コンパイルします。
<code>bash
rosdep install joy
rosmake joy
</code></p>

<p>次に、DualShock3を試します。
テスト用に<code>jstest</code>をインストールしましょう。
<code>bash
sudo apt-get install joystick
</code>
インストールが完了したら、DualShock3が繋がっているか確かめます。
<code>bash
ls /dev/input
</code>
おそらく、次のように表示されるはずです。
<code>bash
by-id    event0  event2  event4  event6  event8  mouse0  mouse2  uinput
by-path  event1  event3  event5  event7  js0     mice    mouse1
</code>
この場合は<code>js0</code>にDualShock3に繋がっています。</p>

<p>それでは、<code>jstest</code>を使ってDualShock3の情報を見てみましょう。
<code>bash
sudo jstest /dev/input/jsX
</code>
Xは先ほど確認した数字に合わせて下さい。すると、以下のように表示されるはずです。
<code>bash
Driver version is 2.1.0.
Joystick (Logitech Logitech Cordless RumblePad 2) has 6 axes (X, Y, Z, Rz, Hat0X, Hat0Y)
and 12 buttons (BtnX, BtnY, BtnZ, BtnTL, BtnTR, BtnTL2, BtnTR2, BtnSelect, BtnStart, BtnMode, BtnThumbL, BtnThumbR).
Testing ... (interrupt to exit)
Axes:  0:     0  1:     0  2:     0  3:     0  4:     0  5:     0 Buttons:  0:off  1:off  2:off  3:off  4:off  5:off  6:off  7:off  8:off  9:off 10:off 11:off
</code>
確認できたら、準備は完了です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ArduinoをROSで動かす]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/10/use-rosserial-first/"/>
    <updated>2015-03-10T16:59:22+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/10/use-rosserial-first</id>
    <content type="html"><![CDATA[<h1>　Arduino を ROS で動かす</h1>

<h2>概要</h2>

<p>ROSのトピックなどをArduinoで利用するためのインストール等．</p>

<h2>検証情報</h2>

<h3>日時</h3>

<p>03/09/2015 (Mon)</p>

<h3>スペック</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">スペック</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">PC</td>
<td style="text-align:center;">Panasonic Let&rsquo;s note CF-LX3TG7TC</td>
</tr>
<tr>
<td style="text-align:center;">Prosessor</td>
<td style="text-align:center;">Intel core i7-4500U (1.8GHz)</td>
</tr>
<tr>
<td style="text-align:center;">RAM</td>
<td style="text-align:center;">DDR3 SDRAM(PC3-12800) 4GB</td>
</tr>
<tr>
<td style="text-align:center;">OS</td>
<td style="text-align:center;">Ubuntu 14.04.2 LTS 64bit</td>
</tr>
<tr>
<td style="text-align:center;">Kernel</td>
<td style="text-align:center;">3.13.0-46-generic</td>
</tr>
<tr>
<td style="text-align:center;">ROS</td>
<td style="text-align:center;">indigo 1.11.10</td>
</tr>
<tr>
<td style="text-align:center;">Arduino</td>
<td style="text-align:center;">Arduino UNO</td>
</tr>
</tbody>
</table>


<!--more-->


<h2>前提条件</h2>

<table>
<thead>
<tr>
<th style="text-align:left;">対象</th>
<th style="text-align:left;">条件</th>
<th style="text-align:left;">参考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">ROS</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;"><a href="/blog/2015/02/25/we-have-get-to-work-when-install-ubuntu">CIR-KITメンバーが必ずすべきこと</a></td>
</tr>
<tr>
<td style="text-align:left;">Arduino</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;">&lsquo;sudo apt-get install Arduino&rsquo;</td>
</tr>
</tbody>
</table>


<h2>Arduino で ROS を利用する</h2>

<p>まずは，ArduinoをROSのnodeに見せかけるためのROSパッケージをインストールします．
<a href="http://wiki.ros.org/rosserial_arduino/Tutorials/Arduino%20IDE%20Setup">対象パッケージのROS Wiki</a>を参考に行います．</p>

<h3>install</h3>

<p>参考サイトの3.install the Softwereを見ると，2種類のインストール方法があるようです．</p>

<hr />

<p>1つ目は3.1の方法で，下のコマンドを実行します．workspaceが汚れ無いのでこっちおすすめです．</p>

<pre><code class="bash">sudo apt-get install ros-indigo-rosserial-arduino
sudo apt-get install ros-indigo-rosserial
</code></pre>

<hr />

<p>2つ目は3.2の方法で，下の手順で行います．&lt;ws>は自分のrosWorkspaceまでのパスに置き換えてください．</p>

<pre><code class="bash">  cd &lt;ws&gt;/src
  git clone https://github.com/ros-drivers/rosserial.git
  cd ../
  catkin_make
  catkin_make install
  source &lt;ws&gt;/install/setup.bash
</code></pre>

<p>この時，<code>~/.bashrc</code>へ<code>source &lt;ws&gt;/install/setup.bash</code>を追加しておくことを推奨します．(以後入力がいらなくなります)</p>

<ul>
<li>Note:<em>devel/setup.bash</em>では<strong>無い</strong>ことに注意してください</li>
</ul>


<hr />

<h3>setup</h3>

<p>3.3にArduinoの(ごく普通の)ライブラリとしてros_libを追加するように書いてあります．
必ず<code>roscore</code>を起動して下のコマンドでros_libを追加してください．</p>

<p>&lt;sketchbook>は各自のArduinoのライブラリがあるディレクトリに置き換えてください．</p>

<pre><code class="bash">  cd &lt;sketchbook&gt;/libraries
  rosrun rosserial_arduino make_libraries.py .
</code></pre>

<ul>
<li>Note:環境によってlibrariesディレクトリの名前や場所が違うので注意．</li>
<li>sketchbookはrosパッケージ内に作ると管理しやすいと思います．</li>
</ul>


<h4>確認</h4>

<p>Arduinoライブラリにros_libが入っていて，その中にROSにパスが通っているmsgやsrvを定義している<strong>ROSパッケージすべて</strong>のディレクトリが含まれていることを確認する．</p>

<h3>使ってみる</h3>

<p><code>/libraries/examples/HelloWorld/HelloWorld.pde</code>をビルドしてみる．
Arduino IDEなら下の画像の所をクリックすることでソースが出るので，それをビルドして書き込んでください．</p>

<p><img src="/images/2015-03-10-light-four-leds-on-arduino-by-ros/arduinoIed1.png" alt="arduinoIed1" /></p>

<p>このプログラムは，<code>chatter</code>トピックに&#8221;Hello world&#8221;と1秒毎にPublishします．
Arduinoへの書き込みが済んだら，早速確認してみましょう．</p>

<ol>
<li>まずは<code>roscore</code>を起動します．</li>
<li>次に<code>rosrun rosserial_python serial_node.py _port:=/dev/ttyACM0</code>を起動します．</li>
</ol>


<p>  Note: <em>_port:=</em>のパスは自分のArduinoへのパスを入れてください．</p>

<p>これで<code>chatter</code>トピックへの配信が始まりました．<code>rostopic</code>で確認してみましょう．</p>

<pre><code class="bash">rostopic echo chatter
</code></pre>

<p>&ldquo;Hello World&#8221;と送られていたら成功です．</p>

<p><code>rosserial_python serial_node</code>でArduinoに書き込んだノードを実行していると考えるとわかりやすいと思います．(実際は全然違います)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ジョイスティックで4つのLEDをつける(Arduino&ROS)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/10/light-four-leds-on-arduino-by-ros/"/>
    <updated>2015-03-10T16:59:22+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/10/light-four-leds-on-arduino-by-ros</id>
    <content type="html"><![CDATA[<h1>　ジョイスティックで4つのLEDをつけるbyROS</h1>

<h2>概要</h2>

<p>ROSのトピックを利用してArduinoでledをつける．
更に，ROSのjoystick_driversを利用してDualShock3でledを制御する．</p>

<h2>検証情報</h2>

<h3>日時</h3>

<p>03/09/2015 (Mon)</p>

<h3>スペック</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">スペック</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">PC</td>
<td style="text-align:center;">Panasonic Let&rsquo;s note CF-LX3TG7TC</td>
</tr>
<tr>
<td style="text-align:center;">Prosessor</td>
<td style="text-align:center;">Intel core i7-4500U (1.8GHz)</td>
</tr>
<tr>
<td style="text-align:center;">RAM</td>
<td style="text-align:center;">DDR3 SDRAM(PC3-12800) 4GB</td>
</tr>
<tr>
<td style="text-align:center;">OS</td>
<td style="text-align:center;">Ubuntu 14.04.2 LTS 64bit</td>
</tr>
<tr>
<td style="text-align:center;">Kernel</td>
<td style="text-align:center;">3.13.0-46-generic</td>
</tr>
<tr>
<td style="text-align:center;">ROS</td>
<td style="text-align:center;">indigo 1.11.10</td>
</tr>
<tr>
<td style="text-align:center;">Arduino</td>
<td style="text-align:center;">Arduino UNO</td>
</tr>
<tr>
<td style="text-align:center;">joystick_drivers</td>
<td style="text-align:center;">1.10.0</td>
</tr>
</tbody>
</table>


<!--more-->


<h2>前提条件</h2>

<table>
<thead>
<tr>
<th style="text-align:left;">対象</th>
<th style="text-align:left;">条件</th>
<th style="text-align:left;">参考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">ROS</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;"><a href="/blog/2015/02/25/we-have-get-to-work-when-install-ubuntu">CIR-KITメンバーが必ずすべきこと</a></td>
</tr>
<tr>
<td style="text-align:left;">Arduino</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;">&lsquo;sudo apt-get install Arduino&rsquo;</td>
</tr>
<tr>
<td style="text-align:left;">rosserial</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;"><a href="/blog/2015/03/10/use-rosserial-first.md">ArduinoをROSで動かす</a></td>
</tr>
<tr>
<td style="text-align:left;">joystick_drivers</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;"><a href="http://wiki.ros.org/turtlebot_teleop/Tutorials/PS3%20Joystick%20Teleop">ROS Wiki</a></td>
</tr>
</tbody>
</table>


<h2>はじめに</h2>

<p>ROSは，ノードの再利用を理念に作成されているため，出力用，入力用，計算用，アダプター用の４種のパッケージを作るべきだと私は考えています．今回は入力をjoystick_driversに任せて，出力パッケージとアダプターパッケージを作成します．</p>

<h2>仕様作成</h2>

<p>今回は４つのLEDを十字に配置して，ジョイスティックのアナログパッドを傾けた方向のLEDを光らせます．この時，傾きに合わせて光る強さを変えられるようにします．</p>

<h2>出力パッケージ作成</h2>

<p>出力パッケージは，受け取るメッセージ型を定義し，そのメッセージに対する処理をするノードを作成します．今回パッケージ名は<code>light_fourleds</code>とします．今回はArduinoを使用し，ROSノードは作らないため依存パッケージはありません．</p>

<pre><code class="bash">cd &lt;catkin_ws&gt;/src
catkin_create_pkg light_fourleds
cd light_fourleds
</code></pre>

<p>以後しばらくは<code>light_fourleds</code>パッケージの中で作業します．</p>

<h3>メッセージ作成</h3>

<h4>msg定義</h4>

<p>x軸とy軸を考えてそれぞれの強さを受け取るようにするのが良いと考えました．
よってメッセージ型は<code>Vector2</code>とします．内容はfloat32 のxとyです．</p>

<pre><code class="bash">mkdir -p msg
cd msg
echo "float32 x" &gt; Vector2.msg
echo "float32 y" &gt;&gt; Vector2.msg
</code></pre>

<h4>msg生成</h4>

<p>まずは定義したmsgをmakeします．Arduinoでmsgを利用するには必ず対象のmsgがmakeされていなければなりません．これはros_libとの関係です．</p>

<p>作ったmsgのためにCMakeListsとpackage.xmlを下のように書き換えましょう．</p>

<p>CMakeLists.txt
&#8220;`bash
cmake_minimum_required(VERSION 2.8.3)
project(light_fourleds)</p>

<h1>Load catkin and all dependencies required for this package</h1>

<p>find_package(catkin REQUIRED COMPONENTS message_generation)</p>

<h6>#</h6>

<h2>Declare ROS message</h2>

<h6>#</h6>

<h1>Generate messages in the &lsquo;msg&rsquo; folder</h1>

<p>add_message_files(FILES Vector2.msg)</p>

<h2>Generate added messages with any dependencies listed here</h2>

<p>generate_messages()</p>

<h6>#</h6>

<h2>catkin specific configuration</h2>

<h6>#</h6>

<p>catkin_package(CATKIN_DEPENDS message_runtime)
&#8220;`</p>

<p>package.txt
&#8220;`bash
<package>
  <name>light_fourleds</name>
  <version>0.1.0</version>
  <description>
    This package defines message, and have node of arduino to light
    four leds.
  </description>
  <maintainer email="yourName@todo.todo">yourName</maintainer>
  <license>BSD</license></p>

<p>  <buildtool_depend>catkin</buildtool_depend></p>

<p>  <build_depend>message_generation</build_depend></p>

<p>  <run_depend>message_runtime</run_depend>
  <run_depend>rosserial_python</run_depend>
</package>
&#8220;`</p>

<p>書き終えたら<code>catkin_make --force-cmake</code>を実行します．
<code>bash
cd &lt;catkin_ws&gt;
catkin_make --force-cmake
</code></p>

<h3>Arduinoノード作成</h3>

<p>それでは実際に今作ったmsgを利用して動く出力ノードを作成します．
まずは，新しく作ったmsgを認識させるために<code>ros_lib</code>を削除し，再度rosrunで<code>ros_lib</code>を入れなおします．<code>roscore</code>を立ち上げるのを忘れないでください．</p>

<pre><code class="bash">cd &lt;sketchbook&gt;/libraries
rm -fr ros_lib
rosrun rosserial_arduino make_libraries.py
</code></pre>

<p>続いてそのライブラリが使用できるところでArduinoのプログラムを作成します．下のプログラムを作成してください．</p>

<pre><code class="bash">/**
 * light four leds on arduino
 * @author "yourName"
 */
#include &lt;ros.h&gt;
#include &lt;light_fourleds/Vector2.h&gt;
#define UP 3
#define RIGHT 5
#define DOWN 6
#define LEFT 9
unsigned int der[4];
ros::NodeHandle nh;

void messageCb(const light_fourleds::Vector2&amp; msg) {
    for (int i; i &lt; 4; i++) analogWrite(der[i], 0); //all cleanup
    if (msg.x &gt; 0) // left
    analogWrite(der[3], 255*msg.x);
    else if (msg.x &lt; 0) // right
        analogWrite(der[1], -255*msg.x);
    if (msg.y &gt; 0) // up
        analogWrite(der[0], 255*msg.y);
    else if (msg.y &lt; 0) // down
        analogWrite(der[2], -255*msg.y);
}

ros::Subscriber&lt;light_fourleds::Vector2&gt; sub("light_fourleds", &amp;messageCb);

void setup(void) {
    der[0] = UP;
    der[1] = RIGHT;
    der[2] = DOWN;
    der[3] = LEFT;
    nh.initNode();
    nh.subscribe(sub);
}

void loop(void) {
    nh.spinOnce();
    delay(1);
}
</code></pre>

<p>書き込んだら，Arduinoでビルドして，uploadしてください．</p>

<h3>配線</h3>

<p>3,5,6,9pinにLEDをそれぞれつけてください．3を上にして時計回りに配置すると想定された配置となります．</p>

<p>画像は後ほど追加予定です．</p>

<h3>ここまでの確認</h3>

<p>これで出力部が作成できたはずです．ROSの強力な特徴として，ノード単位でのテストができる点があるので，早速実行して試してみましょう．</p>

<pre><code class="bash">rosrun rosserial_python serial_node.py
</code></pre>

<pre><code class="bash">rostopic pub light_fourleds/Vector2 -- 1 0
</code></pre>

<p>左のLED(9pin)が光っていれば成功です．</p>

<h2>アダプターパッケージの作成</h2>

<p>アダプターパッケージは出力と入力パッケージのmsgを適切につなぐパッケージです．個人的な命令方法は「出力パッケージ_adapters」です．これは，使いたい入力に対して適宜adapterノードを作成すれば良いと考えているからです．それでは下のコマンドでパッケージを作りましょう．</p>

<pre><code class="bash">cd &lt;catkin_ws&gt;/src
catkin_create_pkg light_fourleds_adapters roscpp light_fourleds joy
cd light_fourleds_adapters
</code></pre>

<p>以後しばらくは<code>light_fourleds_adapters</code>パッケージの中で作業します．</p>

<h3>アダプターノード作成</h3>

<pre><code class="bash">mkdir src
cd src
</code></pre>

<p>このsrcディレクトリに<code>adapt_joy_node.cpp</code>を作成し，以下の文を書き込みます．</p>

<pre><code class="bash">#include "ros/ros.h"
#include "light_fourleds/Vector2.h"
#include "sensor_msgs/Joy.h"

ros::Publisher pub;

void joyCb(const sensor_msgs::Joy::ConstPtr&amp; joy) {
    light_fourleds::Vector2 msg;
    msg.x = joy-&gt;axes[0];
    msg.y = joy-&gt;axes[1];
    pub.publish(msg);
}

int main(int argc, char **argv) {
    ros::init(argc, argv, "adapt_joy_node");
    ros::NodeHandle nh;
    ros::Subscriber sub = nh.subscribe("joy", 1, joyCb);
    pub = nh.advertise&lt;light_fourleds::Vector2&gt;("light_fourleds", 1);
    ros::spin();
    return 0;
}
</code></pre>

<p>書き込んだら，CMakeLists.txtとpackage.xmlを下のように書き換えます．</p>

<p>CMakeLists.txt
&#8220;`bash
cmake_minimum_required(VERSION 2.8.3)
project(light_fourleds_adapters)</p>

<p>set(CATKIN_DEPS roscpp sensor_msgs)
set(ROSDEP_DEPS light_fourleds)
find_package(catkin REQUIRED COMPONENTS ${CATKIN_DEPS} ${ROSDEP_DEPS})
catkin_package(CATKIN_DEPENDS ${CATKIN_DEPS} ${ROSDEP_DEPS})</p>

<p>include_directories(${catkin_INCLUDE_DIRS})</p>

<p>add_executable(adapt_joy_node src/adapt_joy_node.cpp)
target_link_libraries(adapt_joy_node ${catkin_LIBRARIES})
&#8220;`</p>

<p>package.xml
&#8220;`bash
<package>
  <name>light_fourleds_adapters</name>
  <version>0.1.0</version></p>

<p>  <description>Adapt message to light_fourleds package.</description></p>

<p>  <maintainer email="yourName@todo.todo">yourName</maintainer>
  <license>BSD</license></p>

<p>  <buildtool_depend>catkin</buildtool_depend></p>

<p>  <build_depend>light_fourleds</build_depend>
  <build_depend>roscpp</build_depend>
  <build_depend>sensor_msgs</build_depend></p>

<p>  <run_depend>light_fourleds</run_depend>
  <run_depend>roscpp</run_depend>
  <run_depend>sensor_msgs</run_depend>
</package>
&#8220;`</p>

<p>すべて書き込んだら<code>workspace</code>直下へ移動して<code>catkin_make</code>します．</p>

<pre><code class="bash">cd &lt;catkin_ws&gt;
catkin_make --force-cmake
</code></pre>

<p>makeが通ったら実行してみましょう．USBポートにジョイスティックとArduinoを接続して，以下の行を<strong>それぞれ別のターミナル</strong>で実行してください．
<code>bash
roscore
rosrun joy joy_node
rosrun light_fourleds_adapters adapt_joy_node
rosrun rosserial_python serial_node.py _port:=ttyACM0
</code></p>

<ul>
<li>Note: Arduinoのbuildとuploadはしましたか？</li>
<li>Note: rostopic コマンドでトピックを確認することで問題を特定しやすくなります．</li>
</ul>


<h3>補足など</h3>

<p>後ほどコメントや修正，解説などを加えると思います．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-10:GazeboをROSに繋ぐ (発展的なROSの統合 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-advanced-integration/"/>
    <updated>2015-03-04T05:26:59+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-advanced-integration</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>03/04/2015 (Wed)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「Advanced ROS Integratio」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : 発展的なROSの統合</h2>

<h3>動的再構成</h3>

<p>物理エンジンのパラメータの一部は<a href="http://cir-kit.github.io/blog/2015/02/03/gazebo-modifying-a-world/">環境を修正する</a>のチュートリアルで行ったように、Gazeboに合わせることが出きます。これに加えて、ROSの動的再構成メカニズムを使うことで、これらのパラメータを調整できます。<br/>
例として、シミュレーション中の重力を入れ替えてみます。以下のインストールが完了しているか確認してください。:</p>

<h5>Groovyの場合</h5>

<pre><code class="bash">sudo apt-get install ros-groovy-rqt-common-plugins ros-groovy-dynamic-reconfigure
</code></pre>

<h5>Hydroの場合</h5>

<pre><code class="bash">sudo apt-get install ros-hydro-rqt-common-plugins ros-hydro-dynamic-reconfigure
</code></pre>

<h5>Indigoの場合</h5>

<pre><code class="bash">sudo apt-get install ros-indigo-rqt-common-plugins ros-indigo-dynamic-reconfigure
</code></pre>

<p>続いて、Gazeboを起動してください。:</p>

<pre><code class="bash">rosrun gazebo_ros gazebo
</code></pre>

<p>物理エンジンについての変更を行う前に、Gazeboのモデルを挿入しましょう。画面左のタブより<strong>Insert</strong>をkリックし、<strong>Pioneer 2DX</strong>のロボットモデルをクリックしてください。<br/>
完了したら、ランタイムのGazeboと情報を交換するために、ROSのGUIツールを起動してください。</p>

<pre><code class="bash">rosrun rqt_gui rqt_gui
</code></pre>

<p><img src="/images/2015-03-04-ros-advanced-integration/rqt.png" alt="rqt" /></p>

<p>上に載せたキャプチャと一致するように、RQT(前述のROSのGUI)のパラメータを設定してください。<br/>
RQTの左側にある<strong>gazebo</strong>をクリックすると、調整可能な物理エンジンのパラメータのリストを確認できます。<br/>
確認できたら、<code>gravity_z</code>を<strong>-9.8</strong>から<strong>+9.8</strong>にして、あなたのロボットに重力がどのような影響を及ぼすか、確認してみてください。<br/>
ちなみに、変更すると、<strong>Pioneer2DX</strong>がどっかに飛んでいったはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-9:GazeboをROSに繋ぐ (ROS Plugin 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-plugin/"/>
    <updated>2015-03-04T04:45:47+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-plugin</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>03/04/2015 (Wed)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「ROS Plugin」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : ROSプラグイン</h2>

<p>このチュートリアルでは、とても基本的なROSに関するGazeboのプラグインを作ってゆきます。</p>

<h2>ROSパッケージを作る</h2>

<p>あなたの<code>catkin</code>ワークスペースに新しいROSパッケージを作成してください。:</p>

<pre><code class="bash">cd ~/catkin_ws
catkin_create-pkg gazebo_tutorials gazebo_ros roscpp
</code></pre>

<h2>プラグインを作る</h2>

<p><a href="http://gazebosim.org/tutorials?tut=plugins_hello_world&amp;cat=write_plugin">ここ</a>で説明したような簡単なプラグインを制作し、<code>gazebotutorials/src/simpleworld_plugin.cpp</code>として保存してください。:</p>

<pre><code class="cpp">#include &lt;gazebo/common/Plugin.hh&gt;
#include &lt;ros/ros.h&gt;

namespace gazebo
{
class WorldPluginTutorial : public WorldPlugin
{
public:
  WorldPluginTutorial() : WorldPlugin()
  {
  }

  void Load(physics::WorldPtr _world, sdf::ElementPtr _sdf)
  {
    // Make sure the ROS node for Gazebo has already been initialized                                                                                    
    if (!ros::isInitialized())
    {
      ROS_FATAL_STREAM("A ROS node for Gazebo has not been initialized, unable to load plugin. "
        &lt;&lt; "Load the Gazebo system plugin 'libgazebo_ros_api_plugin.so' in the gazebo_ros package)");
      return;
    }

    ROS_INFO("Hello World!");
  }

};
GZ_REGISTER_WORLD_PLUGIN(WorldPluginTutorial)
}
</code></pre>

<h2><code>CMakeLists.txt</code>をアップデートする</h2>

<p><code>gazebo_tutorials/CMakeLists.txt</code>を開き、以下のようにしてください。:</p>

<pre><code class="cmake">cmake_minimum_required(VERSION 2.8.3)
project(gazebo_tutorials)

# Load catkin and all dependencies required for this package
find_package(catkin REQUIRED COMPONENTS 
  roscpp 
  gazebo_ros 
)

# Depend on system install of Gazebo
find_package(gazebo REQUIRED)

link_directories(${GAZEBO_LIBRARY_DIRS})
include_directories(${Boost_INCLUDE_DIR} ${catkin_INCLUDE_DIRS} ${GAZEBO_INCLUDE_DIRS})

add_library(${PROJECT_NAME} src/simple_world_plugin.cpp)
target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES} ${GAZEBO_LIBRARIES})

catkin_package(
  DEPENDS 
    roscpp 
    gazebo_ros 
)
</code></pre>

<h2><code>package.xml</code>をアップデートする</h2>

<p>以下の行をタグの中に追加し(タグがなければ、タグも追加)、<code>gazebo_tutorials/package.xml</code>をアップデートしてください。</p>

<pre><code class="xml">  &lt;gazebo_ros plugin_path="${prefix}/lib" gazebo_media_path="${prefix}" /&gt;
</code></pre>

<h2>プラグインをコンパイルする</h2>

<p>catkinをあなたのワークスペースで実行して、プラグインをビルドしてください。</p>

<pre><code class="bash">cd ~/catkin_ws
catkin_make
</code></pre>

<h2>Worldファイルを作る</h2>

<p>以下のファイルを<code>gazebo_tutorials/worlds/hello.World</code>として保存してください。:</p>

<pre><code class="xml">&lt;?xml version="1.0" ?&gt;
&lt;sdf version="1.4"&gt;
  &lt;world name="default"&gt;
    &lt;include&gt;
      &lt;uri&gt;model://ground_plane&lt;/uri&gt;
    &lt;/include&gt;

    &lt;include&gt;
      &lt;uri&gt;model://sun&lt;/uri&gt;
    &lt;/include&gt;

    &lt;!-- reference to your plugin --&gt;
    &lt;plugin name="gazebo_tutorials" filename="libgazebo_tutorials.so"/&gt;
  &lt;/world&gt;
&lt;/sdf&gt;
</code></pre>

<h2>Launchファイルを作る</h2>

<p>以下のファイルを<code>gazebo_tutorials/launch/hello.launch</code>として作成してください。:</p>

<pre><code class="xml">&lt;launch&gt;
  &lt;!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --&gt;
  &lt;include file="$(find gazebo_ros)/launch/empty_world.launch"&gt;
    &lt;arg name="world_name" value="$(find gazebo_tutorials)/worlds/hello.world"/&gt;
    &lt;!-- more default parameters can be changed here --&gt;
  &lt;/include&gt;
&lt;/launch&gt;
</code></pre>

<h2>プラグインを実行する</h2>

<pre><code class="bash">roslaunch gazebo_tutorials hello.launch
</code></pre>

<p>空のGazeboが開き、ターミナルには以下のような文字列が表示されるはずです。:</p>

<pre><code class="bash"> INFO ros.gazebo_tutorials: Hello World!
</code></pre>

<h2>テンプレートから始める</h2>

<p>GazeboとROSのプラグインについて手っ取り早く理解するには、テンプレートが有効です。:</p>

<p><a href="https://github.com/ros-simulation/gazebo_ros_pkgs/blob/hydro-devel/gazebo_plugins/src/gazebo_ros_template.cpp">gazeborostemplate.cpp</a></p>

<h2>機能性を追加する</h2>

<p>GazeboとROSで有用な効果を果たすプラグインを作るために、<a href="http://gazebosim.org/tutorials/?cat=write_plugin">プラグインについて</a>のチュートリアルを読むことをおすすめします。</p>

<h2>ROSのノードの注意点</h2>

<p>もし、ROSノードが<code>Load()</code>関数によって初期化されているなら、すべての<code>gazebo-ros</code>プラグインは、チェックするべきです。これについては、<a href="http://answers.gazebosim.org/question/1493/rosinit-needed-for-ros-gazebo-plugin/">issues</a>でも議論されています。ROSノードの初期化は、実行した時に自動的に初期化されます。</p>

<pre><code class="bash">rosrun gazeboros gazebo
</code></pre>

<p>もしくは、<code>empty.world</code>のlaunchファイルを使用してください。<br/>
<code>gazeboros/src/gazeborosapi_plugin.cpp</code>は<code>ros::init()</code>をコールするGazeboの中にのみあるべきです。</p>

<h2>次のステップ</h2>

<p>様々な、Gazebo-ROS間の仕組みについては、<a href="http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-advanced-integration/">発展的なROSの統合</a>をご覧ください。</p>
]]></content>
  </entry>
  
</feed>
