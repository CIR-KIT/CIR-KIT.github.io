<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ros | 九州工業大学 CIR-KIT Blog]]></title>
  <link href="http://cir-kit.github.io/blog/categories/ros/atom.xml" rel="self"/>
  <link href="http://cir-kit.github.io/"/>
  <updated>2015-03-11T10:41:02+09:00</updated>
  <id>http://cir-kit.github.io/</id>
  <author>
    <name><![CDATA[CIR-KIT Members]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ArduinoをROSで動かす]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/10/use-rosserial-first/"/>
    <updated>2015-03-10T16:59:22+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/10/use-rosserial-first</id>
    <content type="html"><![CDATA[<h1>　Arduino を ROS で動かす</h1>

<h2>概要</h2>

<p>ROSのトピックなどをArduinoで利用するためのインストール等．</p>

<h2>検証情報</h2>

<h3>日時</h3>

<p>03/09/2015 (Mon)</p>

<h3>スペック</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">スペック</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">PC</td>
<td style="text-align:center;">Panasonic Let&rsquo;s note CF-LX3TG7TC</td>
</tr>
<tr>
<td style="text-align:center;">Prosessor</td>
<td style="text-align:center;">Intel core i7-4500U (1.8GHz)</td>
</tr>
<tr>
<td style="text-align:center;">RAM</td>
<td style="text-align:center;">DDR3 SDRAM(PC3-12800) 4GB</td>
</tr>
<tr>
<td style="text-align:center;">OS</td>
<td style="text-align:center;">Ubuntu 14.04.2 LTS 64bit</td>
</tr>
<tr>
<td style="text-align:center;">Kernel</td>
<td style="text-align:center;">3.13.0-46-generic</td>
</tr>
<tr>
<td style="text-align:center;">ROS</td>
<td style="text-align:center;">indigo 1.11.10</td>
</tr>
<tr>
<td style="text-align:center;">Arduino</td>
<td style="text-align:center;">Arduino UNO</td>
</tr>
</tbody>
</table>


<!--more-->


<h2>前提条件</h2>

<table>
<thead>
<tr>
<th style="text-align:left;">対象</th>
<th style="text-align:left;">条件</th>
<th style="text-align:left;">参考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">ROS</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;"><a href="/blog/2015/02/25/we-have-get-to-work-when-install-ubuntu">CIR-KITメンバーが必ずすべきこと</a></td>
</tr>
<tr>
<td style="text-align:left;">Arduino</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;">&lsquo;sudo apt-get install Arduino&rsquo;</td>
</tr>
</tbody>
</table>


<h2>Arduino で ROS を利用する</h2>

<p>まずは，ArduinoをROSのnodeに見せかけるためのROSパッケージをインストールします．
<a href="http://wiki.ros.org/rosserial_arduino/Tutorials/Arduino%20IDE%20Setup">対象パッケージのROS Wiki</a>を参考に行います．</p>

<h3>install</h3>

<p>参考サイトの3.install the Softwereを見ると，2種類のインストール方法があるようです．</p>

<hr />

<p>1つ目は3.1の方法で，下のコマンドを実行します．workspaceが汚れ無いのでこっちおすすめです．</p>

<pre><code class="bash">sudo apt-get install ros-indigo-rosserial-arduino
sudo apt-get install ros-indigo-rosserial
</code></pre>

<hr />

<p>2つ目は3.2の方法で，下の手順で行います．&lt;ws>は自分のrosWorkspaceまでのパスに置き換えてください．</p>

<pre><code class="bash">  cd &lt;ws&gt;/src
  git clone https://github.com/ros-drivers/rosserial.git
  cd ../
  catkin_make
  catkin_make install
  source &lt;ws&gt;/install/setup.bash
</code></pre>

<p>この時，<code>~/.bashrc</code>へ<code>source &lt;ws&gt;/install/setup.bash</code>を追加しておくことを推奨します．(以後入力がいらなくなります)</p>

<ul>
<li>Note:<em>devel/setup.bash</em>では<strong>無い</strong>ことに注意してください</li>
</ul>


<hr />

<h3>setup</h3>

<p>3.3にArduinoの(ごく普通の)ライブラリとしてros_libを追加するように書いてあります．
必ず<code>roscore</code>を起動して下のコマンドでros_libを追加してください．</p>

<p>&lt;sketchbook>は各自のArduinoのライブラリがあるディレクトリに置き換えてください．</p>

<pre><code class="bash">  cd &lt;sketchbook&gt;/libraries
  rosrun rosserial_arduino make_libraries.py .
</code></pre>

<ul>
<li>Note:環境によってlibrariesディレクトリの名前や場所が違うので注意．</li>
<li>sketchbookはrosパッケージ内に作ると管理しやすいと思います．</li>
</ul>


<h4>確認</h4>

<p>Arduinoライブラリにros_libが入っていて，その中にROSにパスが通っているmsgやsrvを定義している<strong>ROSパッケージすべて</strong>のディレクトリが含まれていることを確認する．</p>

<h3>使ってみる</h3>

<p><code>/libraries/examples/HelloWorld/HelloWorld.pde</code>をビルドしてみる．
Arduino IDEなら下の画像の所をクリックすることでソースが出るので，それをビルドして書き込んでください．</p>

<p><img src="/images/2015-03-10-light-four-leds-on-arduino-by-ros/arduinoIed1.png" alt="arduinoIed1" /></p>

<p>このプログラムは，<code>chatter</code>トピックに&#8221;Hello world&#8221;と1秒毎にPublishします．
Arduinoへの書き込みが済んだら，早速確認してみましょう．</p>

<ol>
<li>まずは<code>roscore</code>を起動します．</li>
<li>次に<code>rosrun rosserial_python serial_node.py _port:=/dev/ttyACM0</code>を起動します．</li>
</ol>


<p>  Note: <em>_port:=</em>のパスは自分のArduinoへのパスを入れてください．</p>

<p>これで<code>chatter</code>トピックへの配信が始まりました．<code>rostopic</code>で確認してみましょう．</p>

<pre><code class="bash">rostopic echo chatter
</code></pre>

<p>&ldquo;Hello World&#8221;と送られていたら成功です．</p>

<p><code>rosserial_python serial_node</code>でArduinoに書き込んだノードを実行していると考えるとわかりやすいと思います．(実際は全然違います)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ジョイスティックで4つのLEDをつける(Arduino&ROS)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/10/light-four-leds-on-arduino-by-ros/"/>
    <updated>2015-03-10T16:59:22+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/10/light-four-leds-on-arduino-by-ros</id>
    <content type="html"><![CDATA[<h1>　ジョイスティックで4つのLEDをつけるbyROS</h1>

<h2>概要</h2>

<p>ROSのトピックを利用してArduinoでledをつける．
更に，ROSのjoystick_driversを利用してDualShock3でledを制御する．</p>

<h2>検証情報</h2>

<h3>日時</h3>

<p>03/09/2015 (Mon)</p>

<h3>スペック</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">スペック</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">PC</td>
<td style="text-align:center;">Panasonic Let&rsquo;s note CF-LX3TG7TC</td>
</tr>
<tr>
<td style="text-align:center;">Prosessor</td>
<td style="text-align:center;">Intel core i7-4500U (1.8GHz)</td>
</tr>
<tr>
<td style="text-align:center;">RAM</td>
<td style="text-align:center;">DDR3 SDRAM(PC3-12800) 4GB</td>
</tr>
<tr>
<td style="text-align:center;">OS</td>
<td style="text-align:center;">Ubuntu 14.04.2 LTS 64bit</td>
</tr>
<tr>
<td style="text-align:center;">Kernel</td>
<td style="text-align:center;">3.13.0-46-generic</td>
</tr>
<tr>
<td style="text-align:center;">ROS</td>
<td style="text-align:center;">indigo 1.11.10</td>
</tr>
<tr>
<td style="text-align:center;">Arduino</td>
<td style="text-align:center;">Arduino UNO</td>
</tr>
<tr>
<td style="text-align:center;">joystick_drivers</td>
<td style="text-align:center;">1.10.0</td>
</tr>
</tbody>
</table>


<!--more-->


<h2>前提条件</h2>

<table>
<thead>
<tr>
<th style="text-align:left;">対象</th>
<th style="text-align:left;">条件</th>
<th style="text-align:left;">参考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">ROS</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;"><a href="/blog/2015/02/25/we-have-get-to-work-when-install-ubuntu">CIR-KITメンバーが必ずすべきこと</a></td>
</tr>
<tr>
<td style="text-align:left;">Arduino</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;">&lsquo;sudo apt-get install Arduino&rsquo;</td>
</tr>
<tr>
<td style="text-align:left;">rosserial</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;"><a href="/blog/2015/03/10/use-rosserial-first.md">ArduinoをROSで動かす</a></td>
</tr>
<tr>
<td style="text-align:left;">joystick_drivers</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;"><a href="http://wiki.ros.org/turtlebot_teleop/Tutorials/PS3%20Joystick%20Teleop">ROS Wiki</a></td>
</tr>
</tbody>
</table>


<h2>はじめに</h2>

<p>ROSは，ノードの再利用を理念に作成されているため，出力用，入力用，計算用，アダプター用の４種のパッケージを作るべきだと私は考えています．今回は入力をjoystick_driversに任せて，出力パッケージとアダプターパッケージを作成します．</p>

<h2>仕様作成</h2>

<p>今回は４つのLEDを十字に配置して，ジョイスティックのアナログパッドを傾けた方向のLEDを光らせます．この時，傾きに合わせて光る強さを変えられるようにします．</p>

<h2>出力パッケージ作成</h2>

<p>出力パッケージは，受け取るメッセージ型を定義し，そのメッセージに対する処理をするノードを作成します．今回パッケージ名は<code>light_fourleds</code>とします．今回はArduinoを使用し，ROSノードは作らないため依存パッケージはありません．</p>

<pre><code class="bash">cd &lt;catkin_ws&gt;/src
catkin_create_pkg light_fourleds
cd light_fourleds
</code></pre>

<p>以後しばらくは<code>light_fourleds</code>パッケージの中で作業します．</p>

<h3>メッセージ作成</h3>

<h4>msg定義</h4>

<p>x軸とy軸を考えてそれぞれの強さを受け取るようにするのが良いと考えました．
よってメッセージ型は<code>Vector2</code>とします．内容はfloat32 のxとyです．</p>

<pre><code class="bash">mkdir -p msg
cd msg
echo "float32 x" &gt; Vector2.msg
echo "float32 y" &gt;&gt; Vector2.msg
</code></pre>

<h4>msg生成</h4>

<p>まずは定義したmsgをmakeします．Arduinoでmsgを利用するには必ず対象のmsgがmakeされていなければなりません．これはros_libとの関係です．</p>

<p>作ったmsgのためにCMakeListsとpackage.xmlを下のように書き換えましょう．</p>

<p>CMakeLists.txt
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cmake_minimum_required<span class="o">(</span>VERSION 2.8.3<span class="o">)</span>
</span><span class='line'>project<span class="o">(</span>light_fourleds<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Load catkin and all dependencies required <span class="k">for</span> this package&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;find_package<span class="o">(</span>catkin REQUIRED COMPONENTS message_generation<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;#&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;Declare ROS message&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;#&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Generate messages in the <span class="p">&amp;</span>lsquo<span class="p">;</span>msg<span class="p">&amp;</span>rsquo<span class="p">;</span> folder&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;add_message_files<span class="o">(</span>FILES Vector.msg<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;Generate added messages with any dependencies listed here&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;generate_messages<span class="o">()</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;#&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;catkin specific configuration&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;#&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;catkin_package<span class="o">(</span>CATKIN_DEPENDS message_runtime<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>package.txt
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;package&gt;
</span><span class='line'>  &lt;name&gt;light_fourleds&lt;/name&gt;
</span><span class='line'>  &lt;version&gt;0.1.0&lt;/version&gt;
</span><span class='line'>  &lt;description&gt;
</span><span class='line'>    This package defines message, and have node of arduino to light
</span><span class='line'>    four leds.
</span><span class='line'>  &lt;/description&gt;
</span><span class='line'>  &lt;maintainer <span class="nv">email</span><span class="o">=</span><span class="s2">&quot;yourName@todo.todo&quot;</span>&gt;yourName&lt;/maintainer&gt;
</span><span class='line'>  &lt;license&gt;BSD&lt;/license&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  &lt;build_depend&gt;message_generation&lt;/build_depend&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  &lt;run_depend&gt;message_runtime&lt;/run_depend&gt;
</span><span class='line'>  &lt;run_depend&gt;rosserial_python&lt;/run_depend&gt;
</span><span class='line'>&lt;/package&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>書き終えたら<code>catkin_make --force-cmake</code>を実行します．
<code>bash
cd &lt;catkin_ws&gt;
catkin_make --force-cmake
</code></p>

<h3>Arduinoノード作成</h3>

<p>それでは実際に今作ったmsgを利用して動く出力ノードを作成します．
まずは，新しく作ったmsgを認識させるために<code>ros_lib</code>を削除し，再度rosrunで<code>ros_lib</code>を入れなおします．<code>roscore</code>を立ち上げるのを忘れないでください．</p>

<pre><code class="bash">cd &lt;sketchbook&gt;/libraries
rm -fr ros_lib
rosrun rosserial_arduino make_libraries.py
</code></pre>

<p>続いてそのライブラリが使用できるところでArduinoのプログラムを作成します．下のプログラムを作成してください．</p>

<pre><code class="bash">/**
 * light four leds on arduino
 * @author "yourName"
 */
#include &lt;ros.h&gt;
#include &lt;light_fourleds/Vector2.h&gt;
#define UP 3
#define RIGHT 5
#define DOWN 6
#define LEFT 9
unsigned int der[4];
ros::NodeHandle nh;

void messageCb(const light_fourleds::Vector2&amp; msg) {
    for (int i; i &lt; 4; i++) analogWrite(der[i], 0); //all cleanup
    if (msg.x &gt; 0) // left
    analogWrite(der[3], 255*msg.x);
    else if (msg.x &lt; 0) // right
        analogWrite(der[1], -255*msg.x);
    if (msg.y &gt; 0) // up
        analogWrite(der[0], 255*msg.y);
    else if (msg.y &lt; 0) // down
        analogWrite(der[2], -255*msg.y);
}

ros::Subscriber&lt;light_fourleds::Vector2&gt; sub("light_fourleds", &amp;messageCb);

void setup(void) {
    der[0] = UP;
    der[1] = RIGHT;
    der[2] = DOWN;
    der[3] = LEFT;
    nh.initNode();
    nh.subscribe(sub);
}

void loop(void) {
    nh.spinOnce();
    delay(1);
}
</code></pre>

<p>書き込んだら，Arduinoでビルドして，uploadしてください．</p>

<h3>配線</h3>

<p>3,5,6,9pinにLEDをそれぞれつけてください．3を上にして時計回りに配置すると想定された配置となります．</p>

<p>画像は後ほど追加予定です．</p>

<h3>ここまでの確認</h3>

<p>これで出力部が作成できたはずです．ROSの強力な特徴として，ノード単位でのテストができる点があるので，早速実行して試してみましょう．</p>

<pre><code class="bash">rosrun rosserial_python serial_node.py
</code></pre>

<pre><code class="bash">rostopic pub light_fourleds/Vector2 -- 1 0
</code></pre>

<p>左のLED(9pin)が光っていれば成功です．</p>

<h2>アダプターパッケージの作成</h2>

<p>アダプターパッケージは出力と入力パッケージのmsgを適切につなぐパッケージです．個人的な命令方法は「出力パッケージ_adapters」です．これは，使いたい入力に対して適宜adapterノードを作成すれば良いと考えているからです．それでは下のコマンドでパッケージを作りましょう．</p>

<pre><code class="bash">cd &lt;catkin_ws&gt;/src
catkin_create_pkg light_fourleds_adapters roscpp light_fourleds joy
cd light_fourleds_adapters
</code></pre>

<p>以後しばらくは<code>light_fourleds</code>パッケージの中で作業します．</p>

<h3>アダプターノード作成</h3>

<pre><code class="bash">mkdir src
cd src
</code></pre>

<p>このsrcディレクトリに<code>adapt_joy_node.cpp</code>を作成し，以下の文を書き込みます．</p>

<pre><code class="bash">#include "ros/ros.h"
#include "light_fourleds/Vector.h"
#include "sensor_msgs/Joy.h"

ros::Publisher pub;

void joyCb(const sensor_msgs::Joy::ConstPtr&amp; joy) {
    light_fourleds::Vector2 msg;
    msg.x = joy-&gt;axes[0];
    msg.y = joy-&gt;axes[1];
    pub.publish(msg);
}

int main(int argc, char **argv) {
    ros::init(argc, argv, "adapt_joy_node");
    ros::NodeHandle nh;
    ros::Subscriber sub = nh.subscribe("joy", 1, joyCb);
    pub = nh.advertise&lt;light_fourleds::Vector2&gt;("light_fourleds", 1);
    ros::spin();
    return 0;
}
</code></pre>

<p>書き込んだら，CMakeLists.txtとpackage.xmlを下のように書き換えます．</p>

<p>CMakeLists.txt
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cmake_minimum_required<span class="o">(</span>VERSION 2.8.3<span class="o">)</span>
</span><span class='line'>project<span class="o">(</span>light_fourleds_adapters<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set<span class="o">(</span>CATKIN_DEPS roscpp sensor_msgs<span class="o">)</span>
</span><span class='line'><span class="nb">set</span><span class="o">(</span>ROSDEP_DEPS light_fourleds<span class="o">)</span>
</span><span class='line'>find_package<span class="o">(</span>catkin REQUIRED COMPONENTS <span class="k">${</span><span class="nv">CATKIN_DEPS</span><span class="k">}</span> <span class="k">${</span><span class="nv">ROSDEP_DEPS</span><span class="k">}</span><span class="o">)</span>
</span><span class='line'>catkin_package<span class="o">(</span>CATKIN_DEPENDS <span class="k">${</span><span class="nv">CATKIN_DEPS</span><span class="k">}</span> <span class="k">${</span><span class="nv">ROSDEP_DEPS</span><span class="k">}</span><span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;include_directories<span class="o">(</span><span class="k">${</span><span class="nv">catkin_INCLUDE_DIRS</span><span class="k">}</span><span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;add_executable<span class="o">(</span>adapt_joy_node src/adapt_joy_node.cpp<span class="o">)</span>
</span><span class='line'>target_link_libraries<span class="o">(</span>adapt_joy_node <span class="k">${</span><span class="nv">catkin_LIBRARIES</span><span class="k">}</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>package.xml
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;package&gt;
</span><span class='line'>  &lt;name&gt;light_fourleds_adapters&lt;/name&gt;
</span><span class='line'>  &lt;version&gt;0.1.0&lt;/version&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  &lt;description&gt;Adapt message to light_fourleds package.&lt;/description&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  &lt;maintainer <span class="nv">email</span><span class="o">=</span><span class="s2">&quot;yourName@todo.todo&quot;</span>&gt;yourName&lt;/maintainer&gt;
</span><span class='line'>  &lt;license&gt;BSD&lt;/license&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  &lt;build_depend&gt;light_fourleds&lt;/build_depend&gt;
</span><span class='line'>  &lt;build_depend&gt;roscpp&lt;/build_depend&gt;
</span><span class='line'>  &lt;build_depend&gt;sensor_msgs&lt;/build_depend&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  &lt;run_depend&gt;light_fourleds&lt;/run_depend&gt;
</span><span class='line'>  &lt;run_depend&gt;roscpp&lt;/run_depend&gt;
</span><span class='line'>  &lt;run_depend&gt;sensor_msgs&lt;/run_depend&gt;
</span><span class='line'>&lt;/package&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>すべて書き込んだら<code>workspace</code>直下へ移動して<code>catkin_make</code>します．</p>

<pre><code class="bash">cd &lt;catkin_ws&gt;
catkin_make --force-cmake
</code></pre>

<p>makeが通ったら実行してみましょう．USBポートにジョイスティックとArduinoを接続して，以下の行を<strong>それぞれ別のターミナル</strong>で実行してください．
<code>bash
roscore
rosrun joy joy_node
rosrun light_fourleds_adapters adapt_joy_node
rosrun rosserial_python serial_node.py _port:=ttyACM0
</code></p>

<ul>
<li>Note: Arduinoのbuildとuploadはしましたか？</li>
<li>Note: rostopic コマンドでトピックを確認することで問題を特定しやすくなります．</li>
</ul>


<h3>補足など</h3>

<p>後ほどコメントや修正，解説などを加えると思います．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-10:GazeboをROSに繋ぐ (発展的なROSの統合 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-advanced-integration/"/>
    <updated>2015-03-04T05:26:59+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-advanced-integration</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>03/04/2015 (Wed)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「Advanced ROS Integratio」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : 発展的なROSの統合</h2>

<h3>動的再構成</h3>

<p>物理エンジンのパラメータの一部は<a href="http://cir-kit.github.io/blog/2015/02/03/gazebo-modifying-a-world/">環境を修正する</a>のチュートリアルで行ったように、Gazeboに合わせることが出きます。これに加えて、ROSの動的再構成メカニズムを使うことで、これらのパラメータを調整できます。<br/>
例として、シミュレーション中の重力を入れ替えてみます。以下のインストールが完了しているか確認してください。:</p>

<h5>Groovyの場合</h5>

<pre><code class="bash">sudo apt-get install ros-groovy-rqt-common-plugins ros-groovy-dynamic-reconfigure
</code></pre>

<h5>Hydroの場合</h5>

<pre><code class="bash">sudo apt-get install ros-hydro-rqt-common-plugins ros-hydro-dynamic-reconfigure
</code></pre>

<h5>Indigoの場合</h5>

<pre><code class="bash">sudo apt-get install ros-indigo-rqt-common-plugins ros-indigo-dynamic-reconfigure
</code></pre>

<p>続いて、Gazeboを起動してください。:</p>

<pre><code class="bash">rosrun gazebo_ros gazebo
</code></pre>

<p>物理エンジンについての変更を行う前に、Gazeboのモデルを挿入しましょう。画面左のタブより<strong>Insert</strong>をkリックし、<strong>Pioneer 2DX</strong>のロボットモデルをクリックしてください。<br/>
完了したら、ランタイムのGazeboと情報を交換するために、ROSのGUIツールを起動してください。</p>

<pre><code class="bash">rosrun rqt_gui rqt_gui
</code></pre>

<p><img src="/images/2015-03-04-ros-advanced-integration/rqt.png" alt="rqt" /></p>

<p>上に載せたキャプチャと一致するように、RQT(前述のROSのGUI)のパラメータを設定してください。<br/>
RQTの左側にある<strong>gazebo</strong>をクリックすると、調整可能な物理エンジンのパラメータのリストを確認できます。<br/>
確認できたら、<code>gravity_z</code>を<strong>-9.8</strong>から<strong>+9.8</strong>にして、あなたのロボットに重力がどのような影響を及ぼすか、確認してみてください。<br/>
ちなみに、変更すると、<strong>Pioneer2DX</strong>がどっかに飛んでいったはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-9:GazeboをROSに繋ぐ (ROS Plugin 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-plugin/"/>
    <updated>2015-03-04T04:45:47+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-plugin</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>03/04/2015 (Wed)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「ROS Plugin」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : ROSプラグイン</h2>

<p>このチュートリアルでは、とても基本的なROSに関するGazeboのプラグインを作ってゆきます。</p>

<h2>ROSパッケージを作る</h2>

<p>あなたの<code>catkin</code>ワークスペースに新しいROSパッケージを作成してください。:</p>

<pre><code class="bash">cd ~/catkin_ws
catkin_create-pkg gazebo_tutorials gazebo_ros roscpp
</code></pre>

<h2>プラグインを作る</h2>

<p><a href="http://gazebosim.org/tutorials?tut=plugins_hello_world&amp;cat=write_plugin">ここ</a>で説明したような簡単なプラグインを制作し、<code>gazebotutorials/src/simpleworld_plugin.cpp</code>として保存してください。:</p>

<pre><code class="cpp">#include &lt;gazebo/common/Plugin.hh&gt;
#include &lt;ros/ros.h&gt;

namespace gazebo
{
class WorldPluginTutorial : public WorldPlugin
{
public:
  WorldPluginTutorial() : WorldPlugin()
  {
  }

  void Load(physics::WorldPtr _world, sdf::ElementPtr _sdf)
  {
    // Make sure the ROS node for Gazebo has already been initialized                                                                                    
    if (!ros::isInitialized())
    {
      ROS_FATAL_STREAM("A ROS node for Gazebo has not been initialized, unable to load plugin. "
        &lt;&lt; "Load the Gazebo system plugin 'libgazebo_ros_api_plugin.so' in the gazebo_ros package)");
      return;
    }

    ROS_INFO("Hello World!");
  }

};
GZ_REGISTER_WORLD_PLUGIN(WorldPluginTutorial)
}
</code></pre>

<h2><code>CMakeLists.txt</code>をアップデートする</h2>

<p><code>gazebo_tutorials/CMakeLists.txt</code>を開き、以下のようにしてください。:</p>

<pre><code class="cmake">cmake_minimum_required(VERSION 2.8.3)
project(gazebo_tutorials)

# Load catkin and all dependencies required for this package
find_package(catkin REQUIRED COMPONENTS 
  roscpp 
  gazebo_ros 
)

# Depend on system install of Gazebo
find_package(gazebo REQUIRED)

link_directories(${GAZEBO_LIBRARY_DIRS})
include_directories(${Boost_INCLUDE_DIR} ${catkin_INCLUDE_DIRS} ${GAZEBO_INCLUDE_DIRS})

add_library(${PROJECT_NAME} src/simple_world_plugin.cpp)
target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES} ${GAZEBO_LIBRARIES})

catkin_package(
  DEPENDS 
    roscpp 
    gazebo_ros 
)
</code></pre>

<h2><code>package.xml</code>をアップデートする</h2>

<p>以下の行をタグの中に追加し(タグがなければ、タグも追加)、<code>gazebo_tutorials/package.xml</code>をアップデートしてください。</p>

<pre><code class="xml">  &lt;gazebo_ros plugin_path="${prefix}/lib" gazebo_media_path="${prefix}" /&gt;
</code></pre>

<h2>プラグインをコンパイルする</h2>

<p>catkinをあなたのワークスペースで実行して、プラグインをビルドしてください。</p>

<pre><code class="bash">cd ~/catkin_ws
catkin_make
</code></pre>

<h2>Worldファイルを作る</h2>

<p>以下のファイルを<code>gazebo_tutorials/worlds/hello.World</code>として保存してください。:</p>

<pre><code class="xml">&lt;?xml version="1.0" ?&gt;
&lt;sdf version="1.4"&gt;
  &lt;world name="default"&gt;
    &lt;include&gt;
      &lt;uri&gt;model://ground_plane&lt;/uri&gt;
    &lt;/include&gt;

    &lt;include&gt;
      &lt;uri&gt;model://sun&lt;/uri&gt;
    &lt;/include&gt;

    &lt;!-- reference to your plugin --&gt;
    &lt;plugin name="gazebo_tutorials" filename="libgazebo_tutorials.so"/&gt;
  &lt;/world&gt;
&lt;/sdf&gt;
</code></pre>

<h2>Launchファイルを作る</h2>

<p>以下のファイルを<code>gazebo_tutorials/launch/hello.launch</code>として作成してください。:</p>

<pre><code class="xml">&lt;launch&gt;
  &lt;!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --&gt;
  &lt;include file="$(find gazebo_ros)/launch/empty_world.launch"&gt;
    &lt;arg name="world_name" value="$(find gazebo_tutorials)/worlds/hello.world"/&gt;
    &lt;!-- more default parameters can be changed here --&gt;
  &lt;/include&gt;
&lt;/launch&gt;
</code></pre>

<h2>プラグインを実行する</h2>

<pre><code class="bash">roslaunch gazebo_tutorials hello.launch
</code></pre>

<p>空のGazeboが開き、ターミナルには以下のような文字列が表示されるはずです。:</p>

<pre><code class="bash"> INFO ros.gazebo_tutorials: Hello World!
</code></pre>

<h2>テンプレートから始める</h2>

<p>GazeboとROSのプラグインについて手っ取り早く理解するには、テンプレートが有効です。:</p>

<p><a href="https://github.com/ros-simulation/gazebo_ros_pkgs/blob/hydro-devel/gazebo_plugins/src/gazebo_ros_template.cpp">gazeborostemplate.cpp</a></p>

<h2>機能性を追加する</h2>

<p>GazeboとROSで有用な効果を果たすプラグインを作るために、<a href="http://gazebosim.org/tutorials/?cat=write_plugin">プラグインについて</a>のチュートリアルを読むことをおすすめします。</p>

<h2>ROSのノードの注意点</h2>

<p>もし、ROSノードが<code>Load()</code>関数によって初期化されているなら、すべての<code>gazebo-ros</code>プラグインは、チェックするべきです。これについては、<a href="http://answers.gazebosim.org/question/1493/rosinit-needed-for-ros-gazebo-plugin/">issues</a>でも議論されています。ROSノードの初期化は、実行した時に自動的に初期化されます。</p>

<pre><code class="bash">rosrun gazeboros gazebo
</code></pre>

<p>もしくは、<code>empty.world</code>のlaunchファイルを使用してください。<br/>
<code>gazeboros/src/gazeborosapi_plugin.cpp</code>は<code>ros::init()</code>をコールするGazeboの中にのみあるべきです。</p>

<h2>次のステップ</h2>

<p>様々な、Gazebo-ROS間の仕組みについては、<a href="http://cir-kit.github.io/blog/2015/03/04/gazebo-ros-advanced-integration/">発展的なROSの統合</a>をご覧ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No.6-8:GazeboをROSに繋ぐ (ROS Communication 編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/02/gazebo-ros-communication/"/>
    <updated>2015-03-02T21:11:56+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/02/gazebo-ros-communication</id>
    <content type="html"><![CDATA[<p><img src="/images/gazebo_logo.png" alt="gazebo_logo" /></p>

<h5>検証日時</h5>

<p>03/02/2015 (Mon)</p>

<h5>概要</h5>

<p>Gazeboのチュートリアル第六弾「Connect to ROS」。
ROSはロボットの制御フレームワークです。このチュートリアルでは、GazeboとROSのインターフェースについて説明します。
今回はその「ROS Communication」編です。
公式サイトを適当に翻訳しただけですので、あしからず。</p>

<h5>レベル</h5>

<p><strong>INTERMEDIATE</strong></p>

<!-- more -->


<h5>環境</h5>

<table>
<thead>
<tr>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
<th style="text-align:center;"> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong>PC</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Lenovo ThinkPad X240 </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Prosessor</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Intel Core i7-4600U (2.10GHz, 4MB, 1600MHz) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>RAM</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> PC3-12800 DDR3L (8GB) </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>OS</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Ubuntu 14.04 LTS 64bit </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Kernel</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> 3.13.0-44-generic </td>
</tr>
<tr>
<td style="text-align:center;"> <strong>Gazebo</strong> </td>
<td style="text-align:center;"> <strong> : </strong> </td>
<td style="text-align:center;"> Version 5.0.1 </td>
</tr>
</tbody>
</table>


<h5>参考</h5>

<p><a href="http://gazebosim.org/tutorials?cat=connect_ros">GAZEBO Tutorial-Connect to ROS</a></p>

<h2>チュートリアル : ROS Communication</h2>

<p>Gazeboはユーザにシミュレートされたworldの様々な角度を取得したり修正したりできるROSのAPIを提供しています。以下のセクションでは、シミュレーションのworldと物体を操るための効果について説明します。GazeboのためのROSメッセージとサービスの完全なリストはこのチュートリアルに書いてあります。</p>

<h2>必要条件</h2>

<p>これから説明する例を実行していきたいなら、RRBotのセットアップは、<a href="http://cir-kit.github.io/blog/2015/02/17/gazebo-urdf-in-gazebo/">GazeboにおけるURDF</a>のチュートリアルで述べているということを念頭に置いてください。このチュートリアルでは、いろいろな方法を使ってコーラの缶を<strong>蹴ります</strong>。<br/>
また、Gazeboが以下のコマンドですでにlaunchされていると仮定して話を進めます。:</p>

<pre><code class="bash">roscore &amp;
rosrun gazebo_ros gazebo
</code></pre>

<p>ただし、これから紹介するコマンドを打った後に、Gazeboを再起動する必要があるかもしれません。</p>

<h2><code>gazeborosapi_plugin</code>について</h2>

<p><code>gazeboros</code>パッケージと共に配置されている<code>gazeborosapi_plugin</code>は、<code>gazebo</code>と呼ばれるROSのノードを初期化します。これは、これから説明する様なROSのインターフェースを供給するために、ROSコールバックスケジュラー(<code>message passing</code>)とGazeboのインターナショナルスケジュラーを統合しています。このROSのAPIはユーザーがROSを超えたシミュレーション環境の詳細を扱うのと同じように、環境のモデルの姿勢の内観とスポーンを行うことを可能にします。<br/>
また、このプラグインは<code>gzserver</code>によってのみ読み込まれます。</p>

<h2><code>gazeborospaths_plugin</code>について</h2>

<p>２つ目の<code>gazeborospath_plugin</code>という名前のプラグインはGazeboがROSリソースを探す(例えば、ROSパッケージのパス名を解決する)ことを可能にする<code>gazebo ros</code>パッケージの中で利用可能です。<br/>
このプラグインは<code>gzserver</code>と<code>gzclient</code>の両方によって読み込まれます。</p>

<h2>Gazeboのpublishしたパラメータ</h2>

<p>Parameters</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> /usesimtime </td>
<td style="text-align:center;"> Bool </td>
<td style="text-align:center;"> ROSがpublishされたROS timeのための<code>/clock</code>トピックを使うかどうか定義します </td>
</tr>
</tbody>
</table>


<p>Gazeboは、もしシミュレーション時間が<code>/usertime</code>パラメータに使用されるべきなら、他のアプリケーション(とりわけRviz)を定義するためにROSパラメータサーバーを使用します。これは、あなたが<code>gazebo_ros</code>を起動した時に、Gazeboが自動で設定すべきことです。<br/>
もし、ROSシステムをシミュレーション同期時間と共に提供するために、<code>gazebo_ros</code>がROSの<code>/clock</code>トピックをpublishしているなら、<code>usesimtime</code>は<code>true</code>です。シミュレーション時間については<a href="http://www.ros.org/wiki/roscpp/Overview/Time">ROS C++ Time</a>をご覧ください。</p>

<h3>値をクリックする</h3>

<p>パラメータに何が設定されているか見るためには、以下のコマンドを実行してください。:</p>

<pre><code class="bash">rosparam get /use_sim_time 
</code></pre>

<h2>Gazeboが購読するトピック</h2>

<p>Topics</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/setlinkstate </td>
<td style="text-align:center;">gazebomsgs/LinkState </td>
<td style="text-align:center;"> リンクの姿勢(<code>pose/twist</code>)を設定します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/setmodelstate </td>
<td style="text-align:center;">gazebomsgs/ModelState </td>
<td style="text-align:center;"> モデルの姿勢(<code>pose/twist</code>)を設定します。</td>
</tr>
</tbody>
</table>


<h3>トピックを通じたシミュレーションにおけるモデルのPoseとTwist</h3>

<p><a href="http://www.ros.org/wiki/Topics">Topics</a>は<code>pose</code>の設定動作が完了するのを待つことなく、迅速にモデルの<code>pose</code>と<code>twist</code>を設定するのに使うことができます。そのようにするために、求められる<a href="http://www.ros.org/doc/api/gazebo/html/msg/ModelState.html">model state message</a>を<code>/gazebo/setmodelstate</code>トピックにpublishします。例えば、<code>topics</code>を通じて<code>pose</code>の設定をテストするために、オンラインデータベースからモデルをスポーンさせてコーラの缶をシミュレーションに追加します。:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -database coke_can -gazebo -model coke_can -y 1
</code></pre>

<p>そして<code>/gazebo/setmodelstate</code>トピックにpublishすることで、コーラの缶の姿勢を設定します。:</p>

<pre><code class="bash">rostopic pub -r 20 /gazebo/set_model_state gazebo_msgs/ModelState '{model_name: coke_can, pose: { position: { x: 1, y: 0, z: 2 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: { x: 0, y: 0, z: 0 }, angular: { x: 0, y: 0, z: 0}  }, reference_frame: world }'
</code></pre>

<p>すると以下のように、蹴ってくれと言わんばかりに(まあ、今から蹴るんですが)RRBotの前にコーラの缶が浮いているのを確認できるはずです。<br/>
ただし、以下のように、RRBotを追加するため、これまでに説明したroslaunchを使っています。:</p>

<pre><code class="bash">roslaunch rrbot_gazebo rrbot_world.launch
</code></pre>

<p><img src="/images/2015-03-02-gazebo-ros-communication/rrbot-test-1.png" alt="rrbot-test-1" /></p>

<h2>Gazeboがpuvlishするトピック</h2>

<p>Topics</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> /clock </td>
<td style="text-align:center;">rosgraphmsgs/Clock </td>
<td style="text-align:center;"> シミュレーション時間を<code>/usertime</code>パラメータと共にpublishします。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/linkstates </td>
<td style="text-align:center;">gazebomsgs/LinkStates </td>
<td style="text-align:center;"> シミュレーション中のすべてのリンクの状態をpublishします。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/modelstates </td>
<td style="text-align:center;">gazebo_msgs/ModelStates </td>
<td style="text-align:center;"> シミュレーション中のすべてのモデルの状態をpublishします。</td>
</tr>
</tbody>
</table>


<h3>Topicを使ってモデルとリンクの姿勢を訂正する</h3>

<p>Gazeboはworld座標系に関するシミュレーション中の物体のposeとtwistの情報を含む、<code>/gazebo/linkstates</code>と<code>/gazebo/modelstates</code>トピックをpublishしています。これらの挙動は、以下のコマンドを実行することで確認できます。</p>

<pre><code class="bash">rostopic echo -n 1 /gazebo/model_states
</code></pre>

<p>もしくは</p>

<pre><code class="bash">rostopic echo -n 1 /gazebo/link_states
</code></pre>

<p>繰り返すには、<code>link</code>が慣性、外観、衝突プロパティの定義された剛体として定義される必要があります。一方、<code>model</code>はリンクとジョイントの衝突要素として定義されます。<code>model</code>の状態は標準的な<code>link</code>の状態であります。URDFが木構造で与えられており、モデルのカノニカルリンクは自身のルートリンクによって定義されます。</p>

<h2>サービス : シミュレーション中のモデルの削除と作成</h2>

<p>以下のサービスでは、シミュレーション中のモデルを削除したり作成したりできます。:</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/spawnurdfmodel </td>
<td style="text-align:center;">gazebomsgs/SpawnModel </td>
<td style="text-align:center;"> Universal Robotic Description Format (URDF)をスポーンするために、このサービスを使います。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/spawnsdfmodel </td>
<td style="text-align:center;">gazebomsgs/SpawnModel </td>
<td style="text-align:center;"> Gazeboに記述されるSimulmulation Description Format (SDF)モデルをスポーンするために、このサービスを使います。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/deletemodel </td>
<td style="text-align:center;">gazebomsgs/DeleteModel </td>
<td style="text-align:center;"> シミュレーションからモデルを削除することができます。</td>
</tr>
</tbody>
</table>


<h3>モデルをスポーンする</h3>

<p><code>spawnmodel</code>と呼ばれるスクリプトはモデルの<code>gazeboros</code>によって呼び出されるスポーンサービスをコールするために提供されています。モデルをサービスコールを使ってスポーンするための最も実践的な方法は<code>roslaunch</code>ファイルを使うことです。詳細は、<a href="http://cir-kit.github.io/blog/2015/02/15/gazebo-using-roslaunch/">roslaunchを使う</a>というチュートリアルに書いてあります。URDFやSDFをGazeboに追加するために<code>spawn_model</code>を使う方法はたくさんあります。以下はそのうちのいくつかの例です。:<br/>
URDFをファイルからスポーンする - まず最初に<code>.Xacro</code>ファイルを<code>.xml</code>ファイルに変換し、スポーンします。:</p>

<pre><code class="bash">rosrun xacro xacro `rospack find rrbot_description`/urdf/rrbot.xacro &gt;&gt; `rospack find rrbot_description`/urdf/rrbot.xml
rosrun gazebo_ros spawn_model -file `rospack find rrbot_description`/urdf/rrbot.xml -urdf -y 1 -model rrbot1 -robot_namespace rrbot1
</code></pre>

<p><code>roslaunch</code>と<code>xacro</code>を使ったパラメータサーバーからのURDF: <a href="http://cir-kit.github.io/blog/2015/02/15/gazebo-using-roslaunch/">roslaunchを使う</a>をご覧ください。<br/>
ローカルモデルデータベースからのSDF:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -file `echo $GAZEBO_MODEL_PATH`/coke_can/model.sdf -sdf -model coke_can1 -y 0.2 -x -0.3
</code></pre>

<p>オンラインモデルデータベースからのSDF:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -database coke_can -sdf -model coke_can3 -y 2.2 -x -0.3
</code></pre>

<p>名前空間、<code>trimesh</code>プロパティ、ジョイントポジション、RPYオリエンテーションを含む<code>spawn_model</code>のための利用可能な引数をすべて見るには、以下を実行してください。:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -h
</code></pre>

<h3>モデルを削除する</h3>

<p>すでにGazeboの中にあるモデルの削除は、物体に与えたモデルの名前を覚えている限りは簡単です。もし、RRBotを前のセクションで記述したように、<code>rrbot1</code>と名付けているなら、以下のコマンドでそれを削除できます。:</p>

<pre><code class="bash">rosservice call gazebo/delete_model '{model_name: rrbot1}'
</code></pre>

<h2>サービス : 状態とプロパティのセッティング</h2>

<p>以下のサービスでは、シミュレーション中の物体やシミュレーションについての状態やプロパティの情報を設定することができます。:</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/setlinkproperties </td>
<td style="text-align:center;">gazebomsgs/SetLinkProperties</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setphysicsproperties </td>
<td style="text-align:center;">gazebomsgs/SetPhysicsProperties</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setmodelstate </td>
<td style="text-align:center;">gazebomsgs/SetModelState</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setmodelconfiguration </td>
<td style="text-align:center;">gazebomsgs/SetModelConfiguration </td>
<td style="text-align:center;"> モデルのジョイントポジションをダイナミクスなしで設定できるようになります。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/setjointproperties </td>
<td style="text-align:center;">gazebomsgs/SetJointProperties</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setlinkstate </td>
<td style="text-align:center;">gazebomsgs/SetLinkState</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setlinkstate </td>
<td style="text-align:center;">gazebomsgs/LinkState</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;"> ~/setmodelstate </td>
<td style="text-align:center;">gazebomsgs/ModelState</td>
<td></td>
</tr>
</tbody>
</table>


<h3>モデルの姿勢を設定する例</h3>

<p><code>/gazebo/setmodelstate</code>サービスを使い、RRBotでコーラの缶を蹴ってみましょう !<br/>
もし、まだシミュレーションにコーラの缶を追加していないのなら、以下のコマンドを実行してください。:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -database coke_can -gazebo -model coke_can -y 1
</code></pre>

<p>これは、Gazeboもしくはオンラインモデルデータベース(インターネット接続が必要です)を通じて利用可能になるようパッケージされていなければなりません。尚、コーラの缶がどこにあっても問題はありません。<br/>
続いて、コーラの缶をRRBotのポジションに動かすためのサービスリクエストをコールしましょう。:</p>

<pre><code class="bash">rosservice call /gazebo/set_model_state '{model_state: { model_name: coke_can, pose: { position: { x: 0.3, y: 0.2 ,z: 0 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }'
</code></pre>

<p>すると、以下のようになるはずです。</p>

<p><img src="/images/2015-03-02-gazebo-ros-communication/rrbot-test-2.png" alt="rrobt-test-2" /></p>

<p>続いて、RRBotを以下のコマンドを使って動かしてみましょう。</p>

<pre><code class="bash">rosservice call /gazebo/set_model_state '{model_state: { model_name: rrbot, pose: { position: { x: 1, y: 1 ,z: 10 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }'
</code></pre>

<p>うまく行けば、コーラの缶がどこかに飛んでゆくでしょう。(゜Д゜)ノ&#8221;<br/>
うまいう行かなかったら、やり直してみましょう。これはチュートリアルなんですから。<br/>
ちなみに、以下の動画みたいになります。以下の動画では、缶が転がってます。私も何回かやりましたが、缶が気持ちよく飛んでゆくこともありましたw</p>

<p>&lt; div class=&ldquo;youtube-container&rdquo;></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/A8tGFOlgRdg" frameborder="0" allowfullscreen></iframe>


<p></div></p>

<h2>サービス : 状態とプロパティの取得</h2>

<p>以下のサービスでは、シミュレーション中の物体やシミュレーションについての状態やプロパティの情報を取得することができます。:</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/getmodelproperties </td>
<td style="text-align:center;">gazebomsgs/GetModelProperties</td>
<td style="text-align:center;"> シミュレーション中のモデルのプロパティを返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getmodelstate </td>
<td style="text-align:center;">gazebomsgs/GetModelState </td>
<td style="text-align:center;"> シミュレーション中のモデルの状態を返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getworldproperties </td>
<td style="text-align:center;">gazebomsgs/GetWorldProperties </td>
<td style="text-align:center;"> シミュレーションworldのプロパティを返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getjointproperties </td>
<td style="text-align:center;">gazebomsgs/GetJointProperties </td>
<td style="text-align:center;"> シミュレーション中のジョイントのプロパティを返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getlinkproperties </td>
<td style="text-align:center;">gazebomsgs/GetLinkProperties </td>
<td style="text-align:center;"> シミュレーション中のリンクのプロパティを返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getlinkstate </td>
<td style="text-align:center;">gazebomsgs/GetLinkState </td>
<td style="text-align:center;"> シミュレーション中のリンクの状態を返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/getphysicsproperties </td>
<td style="text-align:center;">gazebomsgs/GetPhysicsProperties </td>
<td style="text-align:center;"> シミュレーション中で使用される物理エンジンのプロパティを返します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/linkstates </td>
<td style="text-align:center;">gazebomsgs/LinkStates </td>
<td style="text-align:center;"> world座標の完全なリンクの状態をpublishします。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/modelstates </td>
<td style="text-align:center;">gazebo_msgs/ModelStates </td>
<td style="text-align:center;"> world座標の完全なモデルの状態をpublishします。</td>
</tr>
</tbody>
</table>


<h2>注意</h2>

<p>Gazebo中のリンクの名前は<code>modelname::body_name</code>の名前表記にスコープされます。</p>

<h3>モデルの状態を取得する例</h3>

<p>さて、すでにコーラの缶を<strong>蹴った</strong>ことでしょう。今度は、それがどのくらい飛んだのか知りたいですね。これまでの例を使い(同じシミュレーションを実行して)、以下のサービスコールを使ってコーラの缶の<code>pose</code>と<code>twist</code>を取得しましょう。:</p>

<pre><code class="bash">rosservice call gazebo/get_model_state '{model_name: coke_can}'
</code></pre>

<p>この結果は、ロボットの蹴った具合によって変わりますが、以下のような感じになるはずです。:</p>

<pre><code class="bash">pose: 
  position: 
    x: -33.4741996929
    y: 1.72965811349
    z: 0.0715116701823
  orientation: 
    x: 0.52144600413
    y: 0.478438115917
    z: -0.471063379854
    w: -0.526583636448
twist: 
  linear: 
    x: 5.74579911953e-07
    y: 0.000217124920081
    z: 9.67915822705e-06
  angular: 
    x: -0.0029562892652
    y: 7.77750570372e-06
    z: 4.16767016512e-05
success: True
</code></pre>

<p>私のロボットは 33 [m]飛ばしました。あなたのはどうでしたか ?</p>

<h3>シミュレーションworldとオブジェクトプロパティを取得する</h3>

<p>以下のコマンドで、worldの中のモデルのリスト(<code>ground_plane</code>, <code>coke cane</code>, <code>rrbot</code>)を取得することができます。:</p>

<pre><code class="bash">rosservice call gazebo/get_world_properties
</code></pre>

<p>すると、以下のような結果が得られるはずです。</p>

<pre><code class="bash">sim_time: 59.62
model_names: ['ground_plane', 'rrbot', 'coke_can']
rendering_enabled: True
success: True
status_message: GetWorldProperties: got properties
</code></pre>

<p>また、以下のコマンドで特定のモデルの詳細を取得できます。</p>

<pre><code class="bash">rosservice call gazebo/get_model_properties '{model_name: rrbot}'
</code></pre>

<p>すると、以下の様な結果が得られるはずです。</p>

<pre><code class="bash">parent_model_name: ''
canonical_body_name: ''
body_names: ['link1', 'link2', 'link3']
geom_names: ['link1_collision', 'link2_collision', 'link3_collision', 'link3_collision_camera_link', 'link3_collision_hokuyo_link']
joint_names: ['fixed', 'joint1', 'joint2']
child_model_names: []
is_static: False
success: True
status_message: GetModelProperties: got properties
</code></pre>

<h2>サービス : 力のコントロール</h2>

<p>以下のサービスでは、シミュレーション中のボディやジョイントへの力とねじりを適用することができます。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/applybodywrench </td>
<td style="text-align:center;">gazebomsgs/ApplyBodyWrench </td>
<td style="text-align:center;"> シミュレーション中のボディにねじりを適用します。同じボディに適用されるすべてのアクティブなねじりは累積します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/applyjointeffort </td>
<td style="text-align:center;">gazebomsgs/ApplyJointEffort </td>
<td style="text-align:center;"> シミュレーション中のジョイントへの力を適用します。同じジョイントに適用されるすべてのアクティブな力は累積します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/clearjointforces </td>
<td style="text-align:center;">gazebomsgs/ClearJointForces </td>
<td style="text-align:center;"> ジョイントへ適用されている力をクリアします。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/clearbodywrenches </td>
<td style="text-align:center;">gazebomsgs/ClearBodyWrenches </td>
<td style="text-align:center;"> ボディへ適用されているねじりをクリアします。</td>
</tr>
</tbody>
</table>


<h3>ねじりをリンクに適用する</h3>

<p>Gazeboのボディへのねじりの適用を説明するために、重力をなくして物体をスポーンさせてみましょう。すでにコーラの缶が追加されていることを確認してください。:</p>

<pre><code class="bash">rosrun gazebo_ros spawn_model -database coke_can -gazebo -model coke_can -y 1
</code></pre>

<p>続いて、<code>/gazebo/setphysicsproperties</code>サービスコールを送り、すべての軸の重力をなくしましょう。:</p>

<p>Then to turn off gravity send a service call to /gazebo/setphysicsproperties with no gravity in any of the axis:</p>

<pre><code class="bash">rosservice call /gazebo/set_physics_properties "
time_step: 0.001
max_update_rate: 1000.0
gravity: 
  x: 0.0
  y: 0.0
  z: 0.0
ode_config: 
  auto_disable_bodies: False
  sor_pgs_precon_iters: 0
  sor_pgs_iters: 50
  sor_pgs_w: 1.3
  sor_pgs_rms_error_tol: 0.0
  contact_surface_layer: 0.001
  contact_max_correcting_vel: 100.0
  cfm: 0.0
  erp: 0.2
  max_contacts: 20"
</code></pre>

<p><code>/gazebo/applybodywerch</code>サービスを呼び、コーラの缶の原点に１秒間、0.01 [Nm]のトルクを適用しましょう。すると、コーラの缶が、X軸に対して正の方向にスピンするのが確認できるはずです。:</p>

<pre><code class="bash">rosservice call /gazebo/apply_body_wrench '{body_name: "coke_can::link" , wrench: { torque: { x: 0.01, y: 0 , z: 0 } }, start_time: 10000000000, duration: 1000000000 }'
</code></pre>

<p>今度は、コーラの缶の原点に1秒間、-0.01 [Nm]のトルクを適用し、缶の回転を止めましょう。:</p>

<pre><code class="bash">rosservice call /gazebo/apply_body_wrench '{body_name: "coke_can::link" , wrench: { torque: { x: -0.01, y: 0 , z: 0 } }, start_time: 10000000000, duration: 1000000000 }'
</code></pre>

<p>通常、負のトルクは、曖昧な定義であることが多いです。すべてのアクティブなねじりをボディに適用するには、以下のようなコマンドを実行してください。:</p>

<pre><code class="bash">rosservice call /gazebo/clear_body_wrenches '{body_name: "coke_can::link"}'
</code></pre>

<h3>シミュレーション中のジョイントに力を適用する</h3>

<p>ジョイントにトルクを適用するために、<code>/gazebo/applyjointeffort</code>をコールしてください。:</p>

<pre><code class="bash">rosservice call /gazebo/apply_joint_effort "joint_name: 'joint2'
effort: 10.0
start_time:
  secs: 0
  nsecs: 0
duration:
  secs: 10
  nsecs: 0"
</code></pre>

<p>するとリンクが回り始めるはずです。<br/>
特定のジョイントの力をクリアするためには、以下のコマンドをコールしてください。:</p>

<pre><code class="bash">rosservice call /gazebo/clear_joint_forces '{joint_name: joint2}'
</code></pre>

<h2>サービス : シミュレーションコントロール</h2>

<p>以下のサービスでは、シミュレーション中の物理エンジンを一時停止したり解除したリアできます。:</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 名前 </th>
<th style="text-align:center;"> 型 </th>
<th style="text-align:center;"> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ~/pausephysics </td>
<td style="text-align:center;">stdsrvs/Empty </td>
<td style="text-align:center;"> 物理エンジンのアップデートを一時停止します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/unpausephysics </td>
<td style="text-align:center;">stdsrvs/Empty </td>
<td style="text-align:center;"> 物理エンジンのアップデートを再開します。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/resetsimulation </td>
<td style="text-align:center;">stdsrvs/Empty </td>
<td style="text-align:center;"> モデルのポーズをリセットします。</td>
</tr>
<tr>
<td style="text-align:center;"> ~/resetworld </td>
<td style="text-align:center;">stdsrvs/Empty </td>
<td style="text-align:center;"> 時間を含むすべてのシミュレーションをリセットします。</td>
</tr>
</tbody>
</table>


<h3>物理エンジンのアップデートを一時停止する</h3>

<p>飛んでゆくコーラの缶のナイスなスクリーンショットを撮りたいとしましょう。いや、そうだと言ってください。そんな時には、以下のコマンドをコールすることで、物理エンジンを一時停止することができます。:</p>

<pre><code class="bash">rosservice call gazebo/pause_physics
</code></pre>

<p>シミュレーションが一時停止するとき、シミュレーション時間が停止し、物体も静的になります。しかし、Gazeboの内部アップデートループ(カスタムのダイナミクスプラグインアップデートなど)は依然として動いており、シミュレーション時間は変わっていません。これは、シミュレーションタイムをアップデートしないことで抑制されているのです。シミュレーションを再開するために、以下のコマンドをコールして物理エンジンを再開してください。:</p>

<pre><code class="bash">rosservice call gazebo/unpause_physics
</code></pre>

<h2>次のステップ</h2>

<p>Gazeboのための独自のROSプラグインの作り方について学んでください。</p>
]]></content>
  </entry>
  
</feed>
