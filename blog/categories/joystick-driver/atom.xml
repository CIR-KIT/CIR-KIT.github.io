<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Joystick_driver | 九州工業大学 CIR-KIT Blog]]></title>
  <link href="http://cir-kit.github.io/blog/categories/joystick-driver/atom.xml" rel="self"/>
  <link href="http://cir-kit.github.io/"/>
  <updated>2015-06-24T17:01:51+09:00</updated>
  <id>http://cir-kit.github.io/</id>
  <author>
    <name><![CDATA[CIR-KIT Members]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ジョイスティックで亀を泳がせる（機動編）]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/15/make-turtlesim-teleop/"/>
    <updated>2015-03-15T19:10:46+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/15/make-turtlesim-teleop</id>
    <content type="html"><![CDATA[<h1>ジョイスティックで亀を泳がせる</h1>

<h2>概要</h2>

<p>ROSのチュートリアルで使用したturtlesimの亀をジョイスティックで動かします。<a href="http://wiki.ros.org/joy/Tutorials">joy_tutorial</a>で行っていることをやりますので、原文はそちらへどうぞ。</p>

<h2>検証情報</h2>

<h3>日時</h3>

<p>03/13/2015 (Fri)</p>

<!--more-->


<h3>スペック</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">スペック</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">PC</td>
<td style="text-align:center;">CLEVO M76T</td>
</tr>
<tr>
<td style="text-align:center;">Prosessor</td>
<td style="text-align:center;">CeleronDualCore T3000 1.80GHz×2</td>
</tr>
<tr>
<td style="text-align:center;">RAM</td>
<td style="text-align:center;">4GB</td>
</tr>
<tr>
<td style="text-align:center;">OS</td>
<td style="text-align:center;">Ubuntu 14.04.2 LTS 64bit</td>
</tr>
<tr>
<td style="text-align:center;">ROS</td>
<td style="text-align:center;">indigo 1.11.10</td>
</tr>
<tr>
<td style="text-align:center;">joystick_drivers</td>
<td style="text-align:center;">1.10.0</td>
</tr>
</tbody>
</table>


<h2>使用したもの</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"></th>
<th style="text-align:left;">参考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">ROS</td>
<td style="text-align:left;"><a href="/blog/2015/02/25/we-have-get-to-work-when-install-ubuntu">CIR-KITメンバーが必ずすべきこと</a></td>
</tr>
<tr>
<td style="text-align:left;">DualShock3</td>
<td style="text-align:left;"><a href="http://www.jp.playstation.com/ps3/peripheral/cechzc2j.html">PlayStation.com</a></td>
</tr>
<tr>
<td style="text-align:left;">joystick_driver</td>
<td style="text-align:left;"><a href="http://wiki.ros.org/joy">ROS.org</a></td>
</tr>
<tr>
<td style="text-align:left;">PC</td>
<td style="text-align:left;"><a href="http://shopap.lenovo.com/jp/notebooks/thinkpad/x-series/x250/?cid=jp:sem:q2xyf9&amp;#tab-customize">ご自由に</a></td>
</tr>
<tr>
<td style="text-align:left;">USBケーブル</td>
<td style="text-align:left;"><a href="http://www.amazon.co.jp/%E3%82%BD%E3%83%8B%E3%83%BC%E3%83%BB%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%86%E3%82%A4%E3%83%B3%E3%83%A1%E3%83%B3%E3%83%88-USB-%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB-2-8m/dp/B00462Q5ZW/ref=sr_1_1?ie=UTF8&amp;qid=1426232234&amp;sr=8-1&amp;keywords=usb%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB+Dualshock">適宜用意</a></td>
</tr>
</tbody>
</table>


<h2>新しいパッケージを作る</h2>

<p>亀を動かすためのパッケージを作ります。<code>catkin_ws</code>に移動して以下のコマンドを実行して下さい。
<code>bash
catkin_create_pkg learning_joy roscpp turtlesim joy
</code>
これで<code>roscpp</code> <code>turtlesim</code> <code>joy</code>を依存関係に持つ<code>learnig_joy</code>というパッケージが出来ました。</p>

<p>次は中身を作ります。</p>

<pre><code class="bash">cd src/learning_joy/src
emacs turtle_teleop_joy.cpp
</code></pre>

<p>以下のソースをコピーして下さい。</p>

<pre><code class="cpp">#include &lt;ros/ros.h&gt;
#include &lt;geometry_msgs/Twist.h&gt;
#include &lt;sensor_msgs/Joy.h&gt;


class TeleopTurtle
{
public:
  TeleopTurtle();

private:
  void joyCallback(const sensor_msgs::Joy::ConstPtr&amp; joy);

  ros::NodeHandle nh_;

  int linear_, angular_;
  double l_scale_, a_scale_;
  ros::Publisher twist_pub_;
  ros::Subscriber joy_sub_;

};


TeleopTurtle::TeleopTurtle():
  linear_(1),
  angular_(2)
{

  nh_.param("axis_linear", linear_, linear_);
  nh_.param("axis_angular", angular_, angular_);
  nh_.param("scale_angular", a_scale_, a_scale_);
  nh_.param("scale_linear", l_scale_, l_scale_);


  twist_pub_ = nh_.advertise&lt;geometry_msgs::Twist&gt;("turtle1/cmd_vel", 1);


  joy_sub_ = nh_.subscribe&lt;sensor_msgs::Joy&gt;("joy", 10, &amp;TeleopTurtle::joyCallback, this);

}

void TeleopTurtle::joyCallback(const sensor_msgs::Joy::ConstPtr&amp; joy)
{
  geometry_msgs::Twist twist;
  twist.angular.z = a_scale_*joy-&gt;axes[angular_];
  twist.linear.x = l_scale_*joy-&gt;axes[linear_];
  twist_pub_.publish(twist);
}


int main(int argc, char** argv)
{
  ros::init(argc, argv, "teleop_turtle");
  TeleopTurtle teleop_turtle;

  ros::spin();
}
</code></pre>

<p>このソースは既にIndigoで動くように所々書き換えられています。よって、Indigo以外のディストリビューションの方は原文のページを参考にして下さい。</p>

<p>次に、<code>CMakeLists.txt</code>を書き換えます。</p>

<pre><code class="bash">cd ..
emacs CMakeLists.txt
</code></pre>

<p>以下の行を<code>CMakeLists.txt</code>の最後に追加して下さい。</p>

<pre><code class="bash">add_executable(turtle_teleop_joy src/turtle_teleop_joy.cpp)
target_link_libraries(turtle_teleop_joy ${catkin_LIBRARIES})
</code></pre>

<p>また、以下の部分を探してコメントアウトを外して下さい。
<code>bash
CATKIN_DEPENDS joy roscpp turtlesim
</code></p>

<h2>launchファイルを作る</h2>

<p>joy_nodeやturtlesimを一斉に起動するlaunchファイルを作ります。</p>

<pre><code class="bash">mkdir launch
cd launch
emacs turtle_joy.launch
</code></pre>

<p>以下のソースをコピーして下さい。</p>

<pre><code class="cpp">&lt;launch&gt;

 &lt;!-- Turtlesim Node--&gt;
  &lt;node pkg="turtlesim" type="turtlesim_node" name="sim"/&gt;


 &lt;!-- joy node --&gt;
  &lt;node respawn="true" pkg="joy"
        type="joy_node" name="turtle_joy" &gt;
    &lt;param name="dev" type="string" value="/dev/input/js0" /&gt;
    &lt;param name="deadzone" value="0.12" /&gt;
  &lt;/node&gt;

 &lt;!-- Axes --&gt;
  &lt;param name="axis_linear" value="1" type="int"/&gt;
  &lt;param name="axis_angular" value="0" type="int"/&gt;
  &lt;param name="scale_linear" value="2" type="double"/&gt;
  &lt;param name="scale_angular" value="2" type="double"/&gt;

  &lt;node pkg="leaning_joy" type="turtle_teleop_joy" name="teleop"/&gt;

&lt;/launch&gt;
</code></pre>

<p>例によって、Indigo用に書き換えてあります。</p>

<p>保存したら、<code>catkin_ws</code>に移動して以下のコマンドを実行して下さい。</p>

<pre><code class="bash">catkin_make install
</code></pre>

<p>これは依存関係をすべて整えてグローバルインストールします。つまり、困ったらコレ的な便利コマンドです。</p>

<p>DualShock3を繋いで許可を出し、トピックが配信されることを確認しましょう。</p>

<pre><code class="bash">ls -l /dev/input/js0
sudo chmod a+rw /dev/input/js0
rostopic echo joy
</code></pre>

<p>確認ができたら以下のコマンドを実行して下さい。turtlesimが起動して、DualShock3で動かせるようになっているはずです。</p>

<pre><code class="bash">roslaunch learning_joy turtle_joy.launch
</code></pre>

<h2>最後に</h2>

<p>今回は自分が誤字で依存関係がうまく構築できなかったり、DualShock3からうまく情報が取れなかったりと色々ありました。が、とりあえず動いたので満足です。</p>

<p>間違っているところがあればコメントお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ジョイスティックで亀を泳がせる(準備編)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/13/turtlesim-with-joystick/"/>
    <updated>2015-03-13T13:02:00+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/13/turtlesim-with-joystick</id>
    <content type="html"><![CDATA[<h1>ジョイスティックで亀を泳がせる</h1>

<h2>概要</h2>

<p>ROSのチュートリアルで使用したturtlesimの亀をジョイスティックで動かします。<a href="http://wiki.ros.org/joy/Tutorials">joy_tutorial</a>で行っていることをやりますので、原文はそちらへどうぞ。</p>

<h2>検証情報</h2>

<h3>日時</h3>

<p>03/13/2015 (Fri)</p>

<h3>スペック</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">スペック</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">PC</td>
<td style="text-align:center;">CLEVO M76T</td>
</tr>
<tr>
<td style="text-align:center;">Prosessor</td>
<td style="text-align:center;">CeleronDualCore T3000 1.80GHz×2</td>
</tr>
<tr>
<td style="text-align:center;">RAM</td>
<td style="text-align:center;">4GB</td>
</tr>
<tr>
<td style="text-align:center;">OS</td>
<td style="text-align:center;">Ubuntu 14.04.2 LTS 64bit</td>
</tr>
<tr>
<td style="text-align:center;">ROS</td>
<td style="text-align:center;">indigo 1.11.10</td>
</tr>
<tr>
<td style="text-align:center;">joystick_drivers</td>
<td style="text-align:center;">1.10.0</td>
</tr>
</tbody>
</table>


<!--more-->


<h2>使用したもの</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"></th>
<th style="text-align:left;">参考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">ROS</td>
<td style="text-align:left;"><a href="/blog/2015/02/25/we-have-get-to-work-when-install-ubuntu">CIR-KITメンバーが必ずすべきこと</a></td>
</tr>
<tr>
<td style="text-align:left;">DualShock3</td>
<td style="text-align:left;"><a href="http://www.jp.playstation.com/ps3/peripheral/cechzc2j.html">PlayStation.com</a></td>
</tr>
<tr>
<td style="text-align:left;">joystick_driver</td>
<td style="text-align:left;"><a href="http://wiki.ros.org/joy">ROS.org</a></td>
</tr>
<tr>
<td style="text-align:left;">PC</td>
<td style="text-align:left;"><a href="http://shopap.lenovo.com/jp/notebooks/thinkpad/x-series/x250/?cid=jp:sem:q2xyf9&amp;#tab-customize">ご自由に</a></td>
</tr>
<tr>
<td style="text-align:left;">USBケーブル</td>
<td style="text-align:left;"><a href="http://www.amazon.co.jp/%E3%82%BD%E3%83%8B%E3%83%BC%E3%83%BB%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%86%E3%82%A4%E3%83%B3%E3%83%A1%E3%83%B3%E3%83%88-USB-%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB-2-8m/dp/B00462Q5ZW/ref=sr_1_1?ie=UTF8&amp;qid=1426232234&amp;sr=8-1&amp;keywords=usb%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB+Dualshock">適宜用意</a></td>
</tr>
</tbody>
</table>


<h2>準備</h2>

<p><a href="http://wiki.ros.org/ja">ROS</a>及び<a href="http://wiki.ros.org/joy">joystick_drivers</a>はインストールしておいて下さい。</p>

<p>まずは、joystickの依存関係（要は必要なもの）をインストールして、コンパイルします。
<code>bash
rosdep install joy
rosmake joy
</code></p>

<p>次に、DualShock3を試します。
テスト用に<code>jstest</code>をインストールしましょう。
<code>bash
sudo apt-get install joystick
</code>
インストールが完了したら、DualShock3が繋がっているか確かめます。
<code>bash
ls /dev/input
</code>
おそらく、次のように表示されるはずです。
<code>bash
by-id    event0  event2  event4  event6  event8  mouse0  mouse2  uinput
by-path  event1  event3  event5  event7  js0     mice    mouse1
</code>
この場合は<code>js0</code>にDualShock3に繋がっています。</p>

<p>それでは、<code>jstest</code>を使ってDualShock3の情報を見てみましょう。
<code>bash
sudo jstest /dev/input/jsX
</code>
Xは先ほど確認した数字に合わせて下さい。すると、以下のように表示されるはずです。
<code>bash
Driver version is 2.1.0.
Joystick (Logitech Logitech Cordless RumblePad 2) has 6 axes (X, Y, Z, Rz, Hat0X, Hat0Y)
and 12 buttons (BtnX, BtnY, BtnZ, BtnTL, BtnTR, BtnTL2, BtnTR2, BtnSelect, BtnStart, BtnMode, BtnThumbL, BtnThumbR).
Testing ... (interrupt to exit)
Axes:  0:     0  1:     0  2:     0  3:     0  4:     0  5:     0 Buttons:  0:off  1:off  2:off  3:off  4:off  5:off  6:off  7:off  8:off  9:off 10:off 11:off
</code>
確認できたら、準備は完了です。</p>

<h2>備考</h2>

<p>何か間違った表現とかあればコメントお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ジョイスティックで4つのLEDをつける(Arduino&ROS)]]></title>
    <link href="http://cir-kit.github.io/blog/2015/03/10/light-four-leds-on-arduino-by-ros/"/>
    <updated>2015-03-10T17:00:00+09:00</updated>
    <id>http://cir-kit.github.io/blog/2015/03/10/light-four-leds-on-arduino-by-ros</id>
    <content type="html"><![CDATA[<h1>　ジョイスティックで4つのLEDをつけるbyROS</h1>

<h2>概要</h2>

<p>ROSのトピックを利用してArduinoでledをつける．
更に，ROSのjoystick_driversを利用してDualShock3でledを制御する．</p>

<h2>検証情報</h2>

<h3>日時</h3>

<p>03/09/2015 (Mon)</p>

<h3>スペック</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">スペック</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">PC</td>
<td style="text-align:center;">Panasonic Let&rsquo;s note CF-LX3TG7TC</td>
</tr>
<tr>
<td style="text-align:center;">Prosessor</td>
<td style="text-align:center;">Intel core i7-4500U (1.8GHz)</td>
</tr>
<tr>
<td style="text-align:center;">RAM</td>
<td style="text-align:center;">DDR3 SDRAM(PC3-12800) 4GB</td>
</tr>
<tr>
<td style="text-align:center;">OS</td>
<td style="text-align:center;">Ubuntu 14.04.2 LTS 64bit</td>
</tr>
<tr>
<td style="text-align:center;">Kernel</td>
<td style="text-align:center;">3.13.0-46-generic</td>
</tr>
<tr>
<td style="text-align:center;">ROS</td>
<td style="text-align:center;">indigo 1.11.10</td>
</tr>
<tr>
<td style="text-align:center;">Arduino</td>
<td style="text-align:center;">Arduino UNO</td>
</tr>
<tr>
<td style="text-align:center;">joystick_drivers</td>
<td style="text-align:center;">1.10.0</td>
</tr>
</tbody>
</table>


<!--more-->


<h2>前提条件</h2>

<table>
<thead>
<tr>
<th style="text-align:left;">対象</th>
<th style="text-align:left;">条件</th>
<th style="text-align:left;">参考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">ROS</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;"><a href="/blog/2015/02/25/we-have-get-to-work-when-install-ubuntu">CIR-KITメンバーが必ずすべきこと</a></td>
</tr>
<tr>
<td style="text-align:left;">Arduino</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;">&lsquo;sudo apt-get install Arduino&rsquo;</td>
</tr>
<tr>
<td style="text-align:left;">rosserial</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;"><a href="/blog/2015/03/10/use-rosserial-first">ArduinoをROSで動かす</a></td>
</tr>
<tr>
<td style="text-align:left;">joystick_drivers</td>
<td style="text-align:left;">Install済み</td>
<td style="text-align:left;"><a href="http://wiki.ros.org/turtlebot_teleop/Tutorials/PS3%20Joystick%20Teleop">ROS Wiki</a></td>
</tr>
</tbody>
</table>


<h2>はじめに</h2>

<p>ROSは，ノードの再利用を理念に作成されているため，出力用，入力用，計算用，アダプター用の４種のパッケージを作るべきだと私は考えています．今回は入力をjoystick_driversに任せて，出力パッケージとアダプターパッケージを作成します．</p>

<h2>仕様作成</h2>

<p>今回は４つのLEDを十字に配置して，ジョイスティックのアナログパッドを傾けた方向のLEDを光らせます．この時，傾きに合わせて光る強さを変えられるようにします．</p>

<h2>出力パッケージ作成</h2>

<p>出力パッケージは，受け取るメッセージ型を定義し，そのメッセージに対する処理をするノードを作成します．今回パッケージ名は<code>light_fourleds</code>とします．今回はArduinoを使用し，ROSノードは作らないため依存パッケージはありません．</p>

<pre><code class="bash">cd &lt;catkin_ws&gt;/src
catkin_create_pkg light_fourleds
cd light_fourleds
</code></pre>

<p>以後しばらくは<code>light_fourleds</code>パッケージの中で作業します．</p>

<h3>メッセージ作成</h3>

<h4>msg定義</h4>

<p>x軸とy軸を考えてそれぞれの強さを受け取るようにするのが良いと考えました．
よってメッセージ型は<code>Vector2</code>とします．内容はfloat32 のxとyです．</p>

<pre><code class="bash">mkdir -p msg
cd msg
echo "float32 x" &gt; Vector2.msg
echo "float32 y" &gt;&gt; Vector2.msg
</code></pre>

<h4>msg生成</h4>

<p>まずは定義したmsgをmakeします．Arduinoでmsgを利用するには必ず対象のmsgがmakeされていなければなりません．これはros_libとの関係です．</p>

<p>作ったmsgのためにCMakeListsとpackage.xmlを下のように書き換えましょう．</p>

<p>CMakeLists.txt
&#8220;`bash
cmake_minimum_required(VERSION 2.8.3)
project(light_fourleds)</p>

<h1>Load catkin and all dependencies required for this package</h1>

<p>find_package(catkin REQUIRED COMPONENTS message_generation)</p>

<h6>#</h6>

<h2>Declare ROS message</h2>

<h6>#</h6>

<h1>Generate messages in the &lsquo;msg&rsquo; folder</h1>

<p>add_message_files(FILES Vector2.msg)</p>

<h2>Generate added messages with any dependencies listed here</h2>

<p>generate_messages()</p>

<h6>#</h6>

<h2>catkin specific configuration</h2>

<h6>#</h6>

<p>catkin_package(CATKIN_DEPENDS message_runtime)
&#8220;`</p>

<p>package.txt
&#8220;`bash
<package>
  <name>light_fourleds</name>
  <version>0.1.0</version>
  <description>
    This package defines message, and have node of arduino to light
    four leds.
  </description>
  <maintainer email="yourName@todo.todo">yourName</maintainer>
  <license>BSD</license></p>

<p>  <buildtool_depend>catkin</buildtool_depend></p>

<p>  <build_depend>message_generation</build_depend></p>

<p>  <run_depend>message_runtime</run_depend>
  <run_depend>rosserial_python</run_depend>
</package>
&#8220;`</p>

<p>書き終えたら<code>catkin_make --force-cmake</code>を実行します．
<code>bash
cd &lt;catkin_ws&gt;
catkin_make --force-cmake
</code></p>

<h3>Arduinoノード作成</h3>

<p>それでは実際に今作ったmsgを利用して動く出力ノードを作成します．
まずは，新しく作ったmsgを認識させるために<code>ros_lib</code>を削除し，再度rosrunで<code>ros_lib</code>を入れなおします．<code>roscore</code>を立ち上げるのを忘れないでください．</p>

<pre><code class="bash">cd &lt;sketchbook&gt;/libraries
rm -fr ros_lib
rosrun rosserial_arduino make_libraries.py
</code></pre>

<p>続いてそのライブラリが使用できるところでArduinoのプログラムを作成します．下のプログラムを作成してください．</p>

<pre><code class="bash">/**
 * light four leds on arduino
 * @author "yourName"
 */
#include &lt;ros.h&gt;
#include &lt;light_fourleds/Vector2.h&gt;
#define UP 3
#define RIGHT 5
#define DOWN 6
#define LEFT 9
unsigned int der[4];
ros::NodeHandle nh;

void messageCb(const light_fourleds::Vector2&amp; msg) {
    for (int i; i &lt; 4; i++) analogWrite(der[i], 0); //all cleanup
    if (msg.x &gt; 0) // left
    analogWrite(der[3], 255*msg.x);
    else if (msg.x &lt; 0) // right
        analogWrite(der[1], -255*msg.x);
    if (msg.y &gt; 0) // up
        analogWrite(der[0], 255*msg.y);
    else if (msg.y &lt; 0) // down
        analogWrite(der[2], -255*msg.y);
}

ros::Subscriber&lt;light_fourleds::Vector2&gt; sub("light_fourleds", &amp;messageCb);

void setup(void) {
    der[0] = UP;
    der[1] = RIGHT;
    der[2] = DOWN;
    der[3] = LEFT;
    nh.initNode();
    nh.subscribe(sub);
}

void loop(void) {
    nh.spinOnce();
    delay(1);
}
</code></pre>

<p>書き込んだら，Arduinoでビルドして，uploadしてください．</p>

<h3>配線</h3>

<p>3,5,6,9pinにLEDをそれぞれつけてください．3を上にして時計回りに配置すると想定された配置となります．</p>

<p>画像は後ほど追加予定です．</p>

<h3>ここまでの確認</h3>

<p>これで出力部が作成できたはずです．ROSの強力な特徴として，ノード単位でのテストができる点があるので，早速実行して試してみましょう．</p>

<pre><code class="bash">rosrun rosserial_python serial_node.py
</code></pre>

<pre><code class="bash">rostopic pub light_fourleds/Vector2 -- 1 0
</code></pre>

<p>左のLED(9pin)が光っていれば成功です．</p>

<h2>アダプターパッケージの作成</h2>

<p>アダプターパッケージは出力と入力パッケージのmsgを適切につなぐパッケージです．個人的な命令方法は「出力パッケージ_adapters」です．これは，使いたい入力に対して適宜adapterノードを作成すれば良いと考えているからです．それでは下のコマンドでパッケージを作りましょう．</p>

<pre><code class="bash">cd &lt;catkin_ws&gt;/src
catkin_create_pkg light_fourleds_adapters roscpp light_fourleds joy
cd light_fourleds_adapters
</code></pre>

<p>以後しばらくは<code>light_fourleds_adapters</code>パッケージの中で作業します．</p>

<h3>アダプターノード作成</h3>

<pre><code class="bash">mkdir src
cd src
</code></pre>

<p>このsrcディレクトリに<code>adapt_joy_node.cpp</code>を作成し，以下の文を書き込みます．</p>

<pre><code class="bash">#include "ros/ros.h"
#include "light_fourleds/Vector2.h"
#include "sensor_msgs/Joy.h"

ros::Publisher pub;

void joyCb(const sensor_msgs::Joy::ConstPtr&amp; joy) {
    light_fourleds::Vector2 msg;
    msg.x = joy-&gt;axes[0];
    msg.y = joy-&gt;axes[1];
    pub.publish(msg);
}

int main(int argc, char **argv) {
    ros::init(argc, argv, "adapt_joy_node");
    ros::NodeHandle nh;
    ros::Subscriber sub = nh.subscribe("joy", 1, joyCb);
    pub = nh.advertise&lt;light_fourleds::Vector2&gt;("light_fourleds", 1);
    ros::spin();
    return 0;
}
</code></pre>

<p>書き込んだら，CMakeLists.txtとpackage.xmlを下のように書き換えます．</p>

<p>CMakeLists.txt
&#8220;`bash
cmake_minimum_required(VERSION 2.8.3)
project(light_fourleds_adapters)</p>

<p>set(CATKIN_DEPS roscpp sensor_msgs)
set(ROSDEP_DEPS light_fourleds)
find_package(catkin REQUIRED COMPONENTS ${CATKIN_DEPS} ${ROSDEP_DEPS})
catkin_package(CATKIN_DEPENDS ${CATKIN_DEPS} ${ROSDEP_DEPS})</p>

<p>include_directories(${catkin_INCLUDE_DIRS})</p>

<p>add_executable(adapt_joy_node src/adapt_joy_node.cpp)
target_link_libraries(adapt_joy_node ${catkin_LIBRARIES})
&#8220;`</p>

<p>package.xml
&#8220;`bash
<package>
  <name>light_fourleds_adapters</name>
  <version>0.1.0</version></p>

<p>  <description>Adapt message to light_fourleds package.</description></p>

<p>  <maintainer email="yourName@todo.todo">yourName</maintainer>
  <license>BSD</license></p>

<p>  <buildtool_depend>catkin</buildtool_depend></p>

<p>  <build_depend>light_fourleds</build_depend>
  <build_depend>roscpp</build_depend>
  <build_depend>sensor_msgs</build_depend></p>

<p>  <run_depend>light_fourleds</run_depend>
  <run_depend>roscpp</run_depend>
  <run_depend>sensor_msgs</run_depend>
</package>
&#8220;`</p>

<p>すべて書き込んだら<code>workspace</code>直下へ移動して<code>catkin_make</code>します．</p>

<pre><code class="bash">cd &lt;catkin_ws&gt;
catkin_make --force-cmake
</code></pre>

<p>makeが通ったら実行してみましょう．USBポートにジョイスティックとArduinoを接続して，以下の行を<strong>それぞれ別のターミナル</strong>で実行してください．
<code>bash
roscore
rosrun joy joy_node
rosrun light_fourleds_adapters adapt_joy_node
rosrun rosserial_python serial_node.py _port:=ttyACM0
</code></p>

<ul>
<li>Note: Arduinoのbuildとuploadはしましたか？</li>
<li>Note: rostopic コマンドでトピックを確認することで問題を特定しやすくなります．</li>
</ul>


<h3>補足など</h3>

<p>後ほどコメントや修正，解説などを加えると思います．</p>
]]></content>
  </entry>
  
</feed>
